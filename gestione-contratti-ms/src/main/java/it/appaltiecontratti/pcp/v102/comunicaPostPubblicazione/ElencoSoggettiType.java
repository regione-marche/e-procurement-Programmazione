/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.2
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.InvitatoType;
import it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.PartecipanteType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * Elenco di soggetti che hanno presentato offerta e di ulteriori invitati che non hanno presentato offerta.
 */
@Schema(description = "Elenco di soggetti che hanno presentato offerta e di ulteriori invitati che non hanno presentato offerta.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:12:50.940473900+02:00[Europe/Berlin]")

public class ElencoSoggettiType {
  @JsonProperty("cig")
  private String cig = null;

  @JsonProperty("invitatiCheNonHannoPresentatoOfferta")
  private List<InvitatoType> invitatiCheNonHannoPresentatoOfferta = null;

  @JsonProperty("partecipanti")
  private List<PartecipanteType> partecipanti = new ArrayList<>();

  @JsonProperty("dataInvito")
  private java.time.OffsetDateTime dataInvito = null;

  @JsonProperty("dataScadenzaPresentazioneOfferta")
  private java.time.OffsetDateTime dataScadenzaPresentazioneOfferta = null;

  public ElencoSoggettiType cig(String cig) {
    this.cig = cig;
    return this;
  }

   /**
   * codice identificativo lotto
   * @return cig
  **/
  @Schema(required = true, description = "codice identificativo lotto")
  public String getCig() {
    return cig;
  }

  public void setCig(String cig) {
    this.cig = cig;
  }

  public ElencoSoggettiType invitatiCheNonHannoPresentatoOfferta(List<InvitatoType> invitatiCheNonHannoPresentatoOfferta) {
    this.invitatiCheNonHannoPresentatoOfferta = invitatiCheNonHannoPresentatoOfferta;
    return this;
  }

  public ElencoSoggettiType addInvitatiCheNonHannoPresentatoOffertaItem(InvitatoType invitatiCheNonHannoPresentatoOffertaItem) {
    if (this.invitatiCheNonHannoPresentatoOfferta == null) {
      this.invitatiCheNonHannoPresentatoOfferta = new ArrayList<>();
    }
    this.invitatiCheNonHannoPresentatoOfferta.add(invitatiCheNonHannoPresentatoOffertaItem);
    return this;
  }

   /**
   * Dati relativi ai soggetti invitati che non hanno presentato offerta
   * @return invitatiCheNonHannoPresentatoOfferta
  **/
  @Schema(description = "Dati relativi ai soggetti invitati che non hanno presentato offerta")
  public List<InvitatoType> getInvitatiCheNonHannoPresentatoOfferta() {
    return invitatiCheNonHannoPresentatoOfferta;
  }

  public void setInvitatiCheNonHannoPresentatoOfferta(List<InvitatoType> invitatiCheNonHannoPresentatoOfferta) {
    this.invitatiCheNonHannoPresentatoOfferta = invitatiCheNonHannoPresentatoOfferta;
  }

  public ElencoSoggettiType partecipanti(List<PartecipanteType> partecipanti) {
    this.partecipanti = partecipanti;
    return this;
  }

  public ElencoSoggettiType addPartecipantiItem(PartecipanteType partecipantiItem) {
    this.partecipanti.add(partecipantiItem);
    return this;
  }

   /**
   * Dati relativi ai partecipanti
   * @return partecipanti
  **/
  @Schema(required = true, description = "Dati relativi ai partecipanti")
  public List<PartecipanteType> getPartecipanti() {
    return partecipanti;
  }

  public void setPartecipanti(List<PartecipanteType> partecipanti) {
    this.partecipanti = partecipanti;
  }

  public ElencoSoggettiType dataInvito(java.time.OffsetDateTime dataInvito) {
    this.dataInvito = dataInvito;
    return this;
  }

   /**
   * Data della lettera di invito
   * @return dataInvito
  **/
  @Schema(description = "Data della lettera di invito")
  public java.time.OffsetDateTime getDataInvito() {
    return dataInvito;
  }

  public void setDataInvito(java.time.OffsetDateTime dataInvito) {
    this.dataInvito = dataInvito;
  }

  public ElencoSoggettiType dataScadenzaPresentazioneOfferta(java.time.OffsetDateTime dataScadenzaPresentazioneOfferta) {
    this.dataScadenzaPresentazioneOfferta = dataScadenzaPresentazioneOfferta;
    return this;
  }

   /**
   * Data della scadenza di presentazione dell&#x27;offerta
   * @return dataScadenzaPresentazioneOfferta
  **/
  @Schema(required = true, description = "Data della scadenza di presentazione dell'offerta")
  public java.time.OffsetDateTime getDataScadenzaPresentazioneOfferta() {
    return dataScadenzaPresentazioneOfferta;
  }

  public void setDataScadenzaPresentazioneOfferta(java.time.OffsetDateTime dataScadenzaPresentazioneOfferta) {
    this.dataScadenzaPresentazioneOfferta = dataScadenzaPresentazioneOfferta;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElencoSoggettiType elencoSoggettiType = (ElencoSoggettiType) o;
    return Objects.equals(this.cig, elencoSoggettiType.cig) &&
        Objects.equals(this.invitatiCheNonHannoPresentatoOfferta, elencoSoggettiType.invitatiCheNonHannoPresentatoOfferta) &&
        Objects.equals(this.partecipanti, elencoSoggettiType.partecipanti) &&
        Objects.equals(this.dataInvito, elencoSoggettiType.dataInvito) &&
        Objects.equals(this.dataScadenzaPresentazioneOfferta, elencoSoggettiType.dataScadenzaPresentazioneOfferta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cig, invitatiCheNonHannoPresentatoOfferta, partecipanti, dataInvito, dataScadenzaPresentazioneOfferta);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElencoSoggettiType {\n");
    
    sb.append("    cig: ").append(toIndentedString(cig)).append("\n");
    sb.append("    invitatiCheNonHannoPresentatoOfferta: ").append(toIndentedString(invitatiCheNonHannoPresentatoOfferta)).append("\n");
    sb.append("    partecipanti: ").append(toIndentedString(partecipanti)).append("\n");
    sb.append("    dataInvito: ").append(toIndentedString(dataInvito)).append("\n");
    sb.append("    dataScadenzaPresentazioneOfferta: ").append(toIndentedString(dataScadenzaPresentazioneOfferta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
