/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CategoriaEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CategorieMerceologicheEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CondizioniNegoziataEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ContrattiDisposizioniParticolariEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAccessibilitaType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAggiuntiviType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseComunicazioneType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseDocumentiType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.FinanziamentoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.IpotesiCollegamentoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ModalitaAcquisizioneEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.MotivoEsclusioneConcessioneEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.MotivoEsclusioneOrdinarioSpecialeEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.PrestazioniEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.TipoRealizzazioneContrattoEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.TipologiaLavoroEnum;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto
 */
@Schema(description = "Oggetto che riporta i dati del lotto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class LottoP7BaseType {
  @JsonProperty("lotIdentifier")
  private String lotIdentifier = null;

  @JsonProperty("categorieMerceologiche")
  private List<CategorieMerceologicheEnum> categorieMerceologiche = new ArrayList<>();

  @JsonProperty("saNonSoggettaObblighi24Dicembre2015")
  private Boolean saNonSoggettaObblighi24Dicembre2015 = null;

  @JsonProperty("iniziativeNonSoddisfacenti")
  private Boolean iniziativeNonSoddisfacenti = null;

  @JsonProperty("strumentiElettroniciSpecifici")
  private Boolean strumentiElettroniciSpecifici = null;

  @JsonProperty("motivoEsclusioneOrdinarioSpeciale")
  private MotivoEsclusioneOrdinarioSpecialeEnum motivoEsclusioneOrdinarioSpeciale = null;

  @JsonProperty("motivoEsclusioneConcessione")
  private MotivoEsclusioneConcessioneEnum motivoEsclusioneConcessione = null;

  @JsonProperty("condizioniNegoziata")
  private List<CondizioniNegoziataEnum> condizioniNegoziata = new ArrayList<>();

  @JsonProperty("contrattiDisposizioniParticolari")
  private ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari = null;

  @JsonProperty("codIstat")
  private CodIstatEnum codIstat = null;

  @JsonProperty("servizioPubblicoLocale")
  private Boolean servizioPubblicoLocale = null;

  @JsonProperty("lavoroOAcquistoPrevistoInProgrammazione")
  private Boolean lavoroOAcquistoPrevistoInProgrammazione = null;

  @JsonProperty("cui")
  private String cui = null;

  @JsonProperty("ripetizioniEConsegneComplementari")
  private Boolean ripetizioniEConsegneComplementari = null;

  @JsonProperty("ipotesiCollegamento")
  private IpotesiCollegamentoType ipotesiCollegamento = null;

  @JsonProperty("opzioniRinnovi")
  private Boolean opzioniRinnovi = null;

  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("paritaDiGenereGenerazionale")
  private ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale = null;

  @JsonProperty("ccnl")
  private String ccnl = null;

  @JsonProperty("modalitaAcquisizione")
  private ModalitaAcquisizioneEnum modalitaAcquisizione = null;

  @JsonProperty("tipologiaLavoro")
  private List<TipologiaLavoroEnum> tipologiaLavoro = null;

  @JsonProperty("categoria")
  private CategoriaEnum categoria = null;

  @JsonProperty("categoriaScorporabile")
  private List<CategoriaEnum> categoriaScorporabile = null;

  @JsonProperty("prestazioniComprese")
  private PrestazioniEnum prestazioniComprese = null;

  @JsonProperty("finanziamenti")
  private List<FinanziamentoType> finanziamenti = new ArrayList<>();

  @JsonProperty("tipoRealizzazione")
  private TipoRealizzazioneContrattoEnum tipoRealizzazione = null;

  @JsonProperty("datiBase")
  private AllOfLottoP7BaseTypeDatiBase datiBase = null;

  @JsonProperty("datiBaseCPV")
  private AllOfLottoP7BaseTypeDatiBaseCPV datiBaseCPV = null;

  @JsonProperty("datiBaseContratto")
  private AllOfLottoP7BaseTypeDatiBaseContratto datiBaseContratto = null;

  @JsonProperty("datiBaseAggiudicazione")
  private AllOfLottoP7BaseTypeDatiBaseAggiudicazione datiBaseAggiudicazione = null;

  @JsonProperty("datiBaseAggiuntivi")
  private DatiBaseAggiuntiviType datiBaseAggiuntivi = null;

  @JsonProperty("datiBaseAccessibilita")
  private DatiBaseAccessibilitaType datiBaseAccessibilita = null;

  @JsonProperty("datiBaseComunicazione")
  private DatiBaseComunicazioneType datiBaseComunicazione = null;

  @JsonProperty("datiBaseDocumenti")
  private DatiBaseDocumentiType datiBaseDocumenti = null;

  public LottoP7BaseType lotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
    return this;
  }

   /**
   * Id univoco del lotto generato dalla stazione appaltante
   * @return lotIdentifier
  **/
  @Schema(required = true, description = "Id univoco del lotto generato dalla stazione appaltante")
  public String getLotIdentifier() {
    return lotIdentifier;
  }

  public void setLotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
  }

  public LottoP7BaseType categorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
    return this;
  }

  public LottoP7BaseType addCategorieMerceologicheItem(CategorieMerceologicheEnum categorieMerceologicheItem) {
    this.categorieMerceologiche.add(categorieMerceologicheItem);
    return this;
  }

   /**
   * Get categorieMerceologiche
   * @return categorieMerceologiche
  **/
  @Schema(required = true, description = "")
  public List<CategorieMerceologicheEnum> getCategorieMerceologiche() {
    return categorieMerceologiche;
  }

  public void setCategorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
  }

  public LottoP7BaseType saNonSoggettaObblighi24Dicembre2015(Boolean saNonSoggettaObblighi24Dicembre2015) {
    this.saNonSoggettaObblighi24Dicembre2015 = saNonSoggettaObblighi24Dicembre2015;
    return this;
  }

   /**
   * Che questa stazione appaltante non è soggetta agli obblighi del DPCM 24 dicembre 2015 e ss.mm.ii.
   * @return saNonSoggettaObblighi24Dicembre2015
  **/
  @Schema(required = true, description = "Che questa stazione appaltante non è soggetta agli obblighi del DPCM 24 dicembre 2015 e ss.mm.ii.")
  public Boolean isSaNonSoggettaObblighi24Dicembre2015() {
    return saNonSoggettaObblighi24Dicembre2015;
  }

  public void setSaNonSoggettaObblighi24Dicembre2015(Boolean saNonSoggettaObblighi24Dicembre2015) {
    this.saNonSoggettaObblighi24Dicembre2015 = saNonSoggettaObblighi24Dicembre2015;
  }

  public LottoP7BaseType iniziativeNonSoddisfacenti(Boolean iniziativeNonSoddisfacenti) {
    this.iniziativeNonSoddisfacenti = iniziativeNonSoddisfacenti;
    return this;
  }

   /**
   * Che nessuna delle iniziative disponibili presso i soggetti aggregatori di riferimento ha caratteristiche in grado di soddisfare i fabbisogni di questa stazione appaltante
   * @return iniziativeNonSoddisfacenti
  **/
  @Schema(required = true, description = "Che nessuna delle iniziative disponibili presso i soggetti aggregatori di riferimento ha caratteristiche in grado di soddisfare i fabbisogni di questa stazione appaltante")
  public Boolean isIniziativeNonSoddisfacenti() {
    return iniziativeNonSoddisfacenti;
  }

  public void setIniziativeNonSoddisfacenti(Boolean iniziativeNonSoddisfacenti) {
    this.iniziativeNonSoddisfacenti = iniziativeNonSoddisfacenti;
  }

  public LottoP7BaseType strumentiElettroniciSpecifici(Boolean strumentiElettroniciSpecifici) {
    this.strumentiElettroniciSpecifici = strumentiElettroniciSpecifici;
    return this;
  }

   /**
   * Uso e metodi e strumenti elettronici specifici, quali quelli di modellazione per l’edilizia e le infrastrutture, nelle fasi di progettazione, costruzione e gestione delle opere e relative verifiche
   * @return strumentiElettroniciSpecifici
  **/
  @Schema(description = "Uso e metodi e strumenti elettronici specifici, quali quelli di modellazione per l’edilizia e le infrastrutture, nelle fasi di progettazione, costruzione e gestione delle opere e relative verifiche")
  public Boolean isStrumentiElettroniciSpecifici() {
    return strumentiElettroniciSpecifici;
  }

  public void setStrumentiElettroniciSpecifici(Boolean strumentiElettroniciSpecifici) {
    this.strumentiElettroniciSpecifici = strumentiElettroniciSpecifici;
  }

  public LottoP7BaseType motivoEsclusioneOrdinarioSpeciale(MotivoEsclusioneOrdinarioSpecialeEnum motivoEsclusioneOrdinarioSpeciale) {
    this.motivoEsclusioneOrdinarioSpeciale = motivoEsclusioneOrdinarioSpeciale;
    return this;
  }

   /**
   * Get motivoEsclusioneOrdinarioSpeciale
   * @return motivoEsclusioneOrdinarioSpeciale
  **/
  @Schema(description = "")
  public MotivoEsclusioneOrdinarioSpecialeEnum getMotivoEsclusioneOrdinarioSpeciale() {
    return motivoEsclusioneOrdinarioSpeciale;
  }

  public void setMotivoEsclusioneOrdinarioSpeciale(MotivoEsclusioneOrdinarioSpecialeEnum motivoEsclusioneOrdinarioSpeciale) {
    this.motivoEsclusioneOrdinarioSpeciale = motivoEsclusioneOrdinarioSpeciale;
  }

  public LottoP7BaseType motivoEsclusioneConcessione(MotivoEsclusioneConcessioneEnum motivoEsclusioneConcessione) {
    this.motivoEsclusioneConcessione = motivoEsclusioneConcessione;
    return this;
  }

   /**
   * Get motivoEsclusioneConcessione
   * @return motivoEsclusioneConcessione
  **/
  @Schema(description = "")
  public MotivoEsclusioneConcessioneEnum getMotivoEsclusioneConcessione() {
    return motivoEsclusioneConcessione;
  }

  public void setMotivoEsclusioneConcessione(MotivoEsclusioneConcessioneEnum motivoEsclusioneConcessione) {
    this.motivoEsclusioneConcessione = motivoEsclusioneConcessione;
  }

  public LottoP7BaseType condizioniNegoziata(List<CondizioniNegoziataEnum> condizioniNegoziata) {
    this.condizioniNegoziata = condizioniNegoziata;
    return this;
  }

  public LottoP7BaseType addCondizioniNegoziataItem(CondizioniNegoziataEnum condizioniNegoziataItem) {
    this.condizioniNegoziata.add(condizioniNegoziataItem);
    return this;
  }

   /**
   * Get condizioniNegoziata
   * @return condizioniNegoziata
  **/
  @Schema(required = true, description = "")
  public List<CondizioniNegoziataEnum> getCondizioniNegoziata() {
    return condizioniNegoziata;
  }

  public void setCondizioniNegoziata(List<CondizioniNegoziataEnum> condizioniNegoziata) {
    this.condizioniNegoziata = condizioniNegoziata;
  }

  public LottoP7BaseType contrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
    return this;
  }

   /**
   * Get contrattiDisposizioniParticolari
   * @return contrattiDisposizioniParticolari
  **/
  @Schema(description = "")
  public ContrattiDisposizioniParticolariEnum getContrattiDisposizioniParticolari() {
    return contrattiDisposizioniParticolari;
  }

  public void setContrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
  }

  public LottoP7BaseType codIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
    return this;
  }

   /**
   * Get codIstat
   * @return codIstat
  **/
  @Schema(required = true, description = "")
  public CodIstatEnum getCodIstat() {
    return codIstat;
  }

  public void setCodIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
  }

  public LottoP7BaseType servizioPubblicoLocale(Boolean servizioPubblicoLocale) {
    this.servizioPubblicoLocale = servizioPubblicoLocale;
    return this;
  }

   /**
   * Flag servizio pubblico locale
   * @return servizioPubblicoLocale
  **/
  @Schema(required = true, description = "Flag servizio pubblico locale")
  public Boolean isServizioPubblicoLocale() {
    return servizioPubblicoLocale;
  }

  public void setServizioPubblicoLocale(Boolean servizioPubblicoLocale) {
    this.servizioPubblicoLocale = servizioPubblicoLocale;
  }

  public LottoP7BaseType lavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
    return this;
  }

   /**
   * Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione
   * @return lavoroOAcquistoPrevistoInProgrammazione
  **/
  @Schema(required = true, description = "Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione")
  public Boolean isLavoroOAcquistoPrevistoInProgrammazione() {
    return lavoroOAcquistoPrevistoInProgrammazione;
  }

  public void setLavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
  }

  public LottoP7BaseType cui(String cui) {
    this.cui = cui;
    return this;
  }

   /**
   * CUI programma triennale lavori pubblici o programma biennale forniture e servizi
   * @return cui
  **/
  @Schema(description = "CUI programma triennale lavori pubblici o programma biennale forniture e servizi")
  public String getCui() {
    return cui;
  }

  public void setCui(String cui) {
    this.cui = cui;
  }

  public LottoP7BaseType ripetizioniEConsegneComplementari(Boolean ripetizioniEConsegneComplementari) {
    this.ripetizioniEConsegneComplementari = ripetizioniEConsegneComplementari;
    return this;
  }

   /**
   * L’appalto prevede ripetizioni di servizi/forniture/lavori analoghi e consegne complementari?
   * @return ripetizioniEConsegneComplementari
  **/
  @Schema(description = "L’appalto prevede ripetizioni di servizi/forniture/lavori analoghi e consegne complementari?")
  public Boolean isRipetizioniEConsegneComplementari() {
    return ripetizioniEConsegneComplementari;
  }

  public void setRipetizioniEConsegneComplementari(Boolean ripetizioniEConsegneComplementari) {
    this.ripetizioniEConsegneComplementari = ripetizioniEConsegneComplementari;
  }

  public LottoP7BaseType ipotesiCollegamento(IpotesiCollegamentoType ipotesiCollegamento) {
    this.ipotesiCollegamento = ipotesiCollegamento;
    return this;
  }

   /**
   * Get ipotesiCollegamento
   * @return ipotesiCollegamento
  **/
  @Schema(required = true, description = "")
  public IpotesiCollegamentoType getIpotesiCollegamento() {
    return ipotesiCollegamento;
  }

  public void setIpotesiCollegamento(IpotesiCollegamentoType ipotesiCollegamento) {
    this.ipotesiCollegamento = ipotesiCollegamento;
  }

  public LottoP7BaseType opzioniRinnovi(Boolean opzioniRinnovi) {
    this.opzioniRinnovi = opzioniRinnovi;
    return this;
  }

   /**
   * L’appalto prevede opzioni/rinnovi?
   * @return opzioniRinnovi
  **/
  @Schema(description = "L’appalto prevede opzioni/rinnovi?")
  public Boolean isOpzioniRinnovi() {
    return opzioniRinnovi;
  }

  public void setOpzioniRinnovi(Boolean opzioniRinnovi) {
    this.opzioniRinnovi = opzioniRinnovi;
  }

  public LottoP7BaseType afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

   /**
   * L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
  **/
  @Schema(required = true, description = "L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public LottoP7BaseType acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

   /**
   * Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
  **/
  @Schema(description = "Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public LottoP7BaseType cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public LottoP7BaseType addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

   /**
   * Cup associati al lotto
   * @return cupLotto
  **/
  @Schema(description = "Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public LottoP7BaseType paritaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
    return this;
  }

   /**
   * Get paritaDiGenereGenerazionale
   * @return paritaDiGenereGenerazionale
  **/
  @Schema(description = "")
  public ParitaDiGenereGenerazionaleType getParitaDiGenereGenerazionale() {
    return paritaDiGenereGenerazionale;
  }

  public void setParitaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
  }

  public LottoP7BaseType ccnl(String ccnl) {
    this.ccnl = ccnl;
    return this;
  }

   /**
   * indicare il codice CNEL o non applicabile
   * @return ccnl
  **/
  @Schema(required = true, description = "indicare il codice CNEL o non applicabile")
  public String getCcnl() {
    return ccnl;
  }

  public void setCcnl(String ccnl) {
    this.ccnl = ccnl;
  }

  public LottoP7BaseType modalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
    return this;
  }

   /**
   * Get modalitaAcquisizione
   * @return modalitaAcquisizione
  **/
  @Schema(description = "")
  public ModalitaAcquisizioneEnum getModalitaAcquisizione() {
    return modalitaAcquisizione;
  }

  public void setModalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
  }

  public LottoP7BaseType tipologiaLavoro(List<TipologiaLavoroEnum> tipologiaLavoro) {
    this.tipologiaLavoro = tipologiaLavoro;
    return this;
  }

  public LottoP7BaseType addTipologiaLavoroItem(TipologiaLavoroEnum tipologiaLavoroItem) {
    if (this.tipologiaLavoro == null) {
      this.tipologiaLavoro = new ArrayList<>();
    }
    this.tipologiaLavoro.add(tipologiaLavoroItem);
    return this;
  }

   /**
   * Get tipologiaLavoro
   * @return tipologiaLavoro
  **/
  @Schema(description = "")
  public List<TipologiaLavoroEnum> getTipologiaLavoro() {
    return tipologiaLavoro;
  }

  public void setTipologiaLavoro(List<TipologiaLavoroEnum> tipologiaLavoro) {
    this.tipologiaLavoro = tipologiaLavoro;
  }

  public LottoP7BaseType categoria(CategoriaEnum categoria) {
    this.categoria = categoria;
    return this;
  }

   /**
   * Get categoria
   * @return categoria
  **/
  @Schema(required = true, description = "")
  public CategoriaEnum getCategoria() {
    return categoria;
  }

  public void setCategoria(CategoriaEnum categoria) {
    this.categoria = categoria;
  }

  public LottoP7BaseType categoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
    return this;
  }

  public LottoP7BaseType addCategoriaScorporabileItem(CategoriaEnum categoriaScorporabileItem) {
    if (this.categoriaScorporabile == null) {
      this.categoriaScorporabile = new ArrayList<>();
    }
    this.categoriaScorporabile.add(categoriaScorporabileItem);
    return this;
  }

   /**
   * Get categoriaScorporabile
   * @return categoriaScorporabile
  **/
  @Schema(description = "")
  public List<CategoriaEnum> getCategoriaScorporabile() {
    return categoriaScorporabile;
  }

  public void setCategoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
  }

  public LottoP7BaseType prestazioniComprese(PrestazioniEnum prestazioniComprese) {
    this.prestazioniComprese = prestazioniComprese;
    return this;
  }

   /**
   * Get prestazioniComprese
   * @return prestazioniComprese
  **/
  @Schema(required = true, description = "")
  public PrestazioniEnum getPrestazioniComprese() {
    return prestazioniComprese;
  }

  public void setPrestazioniComprese(PrestazioniEnum prestazioniComprese) {
    this.prestazioniComprese = prestazioniComprese;
  }

  public LottoP7BaseType finanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
    return this;
  }

  public LottoP7BaseType addFinanziamentiItem(FinanziamentoType finanziamentiItem) {
    this.finanziamenti.add(finanziamentiItem);
    return this;
  }

   /**
   * Dati relativi ai finanziamenti
   * @return finanziamenti
  **/
  @Schema(required = true, description = "Dati relativi ai finanziamenti")
  public List<FinanziamentoType> getFinanziamenti() {
    return finanziamenti;
  }

  public void setFinanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
  }

  public LottoP7BaseType tipoRealizzazione(TipoRealizzazioneContrattoEnum tipoRealizzazione) {
    this.tipoRealizzazione = tipoRealizzazione;
    return this;
  }

   /**
   * Get tipoRealizzazione
   * @return tipoRealizzazione
  **/
  @Schema(required = true, description = "")
  public TipoRealizzazioneContrattoEnum getTipoRealizzazione() {
    return tipoRealizzazione;
  }

  public void setTipoRealizzazione(TipoRealizzazioneContrattoEnum tipoRealizzazione) {
    this.tipoRealizzazione = tipoRealizzazione;
  }

  public LottoP7BaseType datiBase(AllOfLottoP7BaseTypeDatiBase datiBase) {
    this.datiBase = datiBase;
    return this;
  }

   /**
   * Get datiBase
   * @return datiBase
  **/
  @Schema(required = true, description = "")
  public AllOfLottoP7BaseTypeDatiBase getDatiBase() {
    return datiBase;
  }

  public void setDatiBase(AllOfLottoP7BaseTypeDatiBase datiBase) {
    this.datiBase = datiBase;
  }

  public LottoP7BaseType datiBaseCPV(AllOfLottoP7BaseTypeDatiBaseCPV datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
    return this;
  }

   /**
   * Get datiBaseCPV
   * @return datiBaseCPV
  **/
  @Schema(required = true, description = "")
  public AllOfLottoP7BaseTypeDatiBaseCPV getDatiBaseCPV() {
    return datiBaseCPV;
  }

  public void setDatiBaseCPV(AllOfLottoP7BaseTypeDatiBaseCPV datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
  }

  public LottoP7BaseType datiBaseContratto(AllOfLottoP7BaseTypeDatiBaseContratto datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
    return this;
  }

   /**
   * Get datiBaseContratto
   * @return datiBaseContratto
  **/
  @Schema(description = "")
  public AllOfLottoP7BaseTypeDatiBaseContratto getDatiBaseContratto() {
    return datiBaseContratto;
  }

  public void setDatiBaseContratto(AllOfLottoP7BaseTypeDatiBaseContratto datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
  }

  public LottoP7BaseType datiBaseAggiudicazione(AllOfLottoP7BaseTypeDatiBaseAggiudicazione datiBaseAggiudicazione) {
    this.datiBaseAggiudicazione = datiBaseAggiudicazione;
    return this;
  }

   /**
   * Get datiBaseAggiudicazione
   * @return datiBaseAggiudicazione
  **/
  @Schema(description = "")
  public AllOfLottoP7BaseTypeDatiBaseAggiudicazione getDatiBaseAggiudicazione() {
    return datiBaseAggiudicazione;
  }

  public void setDatiBaseAggiudicazione(AllOfLottoP7BaseTypeDatiBaseAggiudicazione datiBaseAggiudicazione) {
    this.datiBaseAggiudicazione = datiBaseAggiudicazione;
  }

  public LottoP7BaseType datiBaseAggiuntivi(DatiBaseAggiuntiviType datiBaseAggiuntivi) {
    this.datiBaseAggiuntivi = datiBaseAggiuntivi;
    return this;
  }

   /**
   * Get datiBaseAggiuntivi
   * @return datiBaseAggiuntivi
  **/
  @Schema(description = "")
  public DatiBaseAggiuntiviType getDatiBaseAggiuntivi() {
    return datiBaseAggiuntivi;
  }

  public void setDatiBaseAggiuntivi(DatiBaseAggiuntiviType datiBaseAggiuntivi) {
    this.datiBaseAggiuntivi = datiBaseAggiuntivi;
  }

  public LottoP7BaseType datiBaseAccessibilita(DatiBaseAccessibilitaType datiBaseAccessibilita) {
    this.datiBaseAccessibilita = datiBaseAccessibilita;
    return this;
  }

   /**
   * Get datiBaseAccessibilita
   * @return datiBaseAccessibilita
  **/
  @Schema(description = "")
  public DatiBaseAccessibilitaType getDatiBaseAccessibilita() {
    return datiBaseAccessibilita;
  }

  public void setDatiBaseAccessibilita(DatiBaseAccessibilitaType datiBaseAccessibilita) {
    this.datiBaseAccessibilita = datiBaseAccessibilita;
  }

  public LottoP7BaseType datiBaseComunicazione(DatiBaseComunicazioneType datiBaseComunicazione) {
    this.datiBaseComunicazione = datiBaseComunicazione;
    return this;
  }

   /**
   * Get datiBaseComunicazione
   * @return datiBaseComunicazione
  **/
  @Schema(description = "")
  public DatiBaseComunicazioneType getDatiBaseComunicazione() {
    return datiBaseComunicazione;
  }

  public void setDatiBaseComunicazione(DatiBaseComunicazioneType datiBaseComunicazione) {
    this.datiBaseComunicazione = datiBaseComunicazione;
  }

  public LottoP7BaseType datiBaseDocumenti(DatiBaseDocumentiType datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
    return this;
  }

   /**
   * Get datiBaseDocumenti
   * @return datiBaseDocumenti
  **/
  @Schema(required = true, description = "")
  public DatiBaseDocumentiType getDatiBaseDocumenti() {
    return datiBaseDocumenti;
  }

  public void setDatiBaseDocumenti(DatiBaseDocumentiType datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoP7BaseType lottoP7BaseType = (LottoP7BaseType) o;
    return Objects.equals(this.lotIdentifier, lottoP7BaseType.lotIdentifier) &&
        Objects.equals(this.categorieMerceologiche, lottoP7BaseType.categorieMerceologiche) &&
        Objects.equals(this.saNonSoggettaObblighi24Dicembre2015, lottoP7BaseType.saNonSoggettaObblighi24Dicembre2015) &&
        Objects.equals(this.iniziativeNonSoddisfacenti, lottoP7BaseType.iniziativeNonSoddisfacenti) &&
        Objects.equals(this.strumentiElettroniciSpecifici, lottoP7BaseType.strumentiElettroniciSpecifici) &&
        Objects.equals(this.motivoEsclusioneOrdinarioSpeciale, lottoP7BaseType.motivoEsclusioneOrdinarioSpeciale) &&
        Objects.equals(this.motivoEsclusioneConcessione, lottoP7BaseType.motivoEsclusioneConcessione) &&
        Objects.equals(this.condizioniNegoziata, lottoP7BaseType.condizioniNegoziata) &&
        Objects.equals(this.contrattiDisposizioniParticolari, lottoP7BaseType.contrattiDisposizioniParticolari) &&
        Objects.equals(this.codIstat, lottoP7BaseType.codIstat) &&
        Objects.equals(this.servizioPubblicoLocale, lottoP7BaseType.servizioPubblicoLocale) &&
        Objects.equals(this.lavoroOAcquistoPrevistoInProgrammazione, lottoP7BaseType.lavoroOAcquistoPrevistoInProgrammazione) &&
        Objects.equals(this.cui, lottoP7BaseType.cui) &&
        Objects.equals(this.ripetizioniEConsegneComplementari, lottoP7BaseType.ripetizioniEConsegneComplementari) &&
        Objects.equals(this.ipotesiCollegamento, lottoP7BaseType.ipotesiCollegamento) &&
        Objects.equals(this.opzioniRinnovi, lottoP7BaseType.opzioniRinnovi) &&
        Objects.equals(this.afferenteInvestimentiPNRR, lottoP7BaseType.afferenteInvestimentiPNRR) &&
        Objects.equals(this.acquisizioneCup, lottoP7BaseType.acquisizioneCup) &&
        Objects.equals(this.cupLotto, lottoP7BaseType.cupLotto) &&
        Objects.equals(this.paritaDiGenereGenerazionale, lottoP7BaseType.paritaDiGenereGenerazionale) &&
        Objects.equals(this.ccnl, lottoP7BaseType.ccnl) &&
        Objects.equals(this.modalitaAcquisizione, lottoP7BaseType.modalitaAcquisizione) &&
        Objects.equals(this.tipologiaLavoro, lottoP7BaseType.tipologiaLavoro) &&
        Objects.equals(this.categoria, lottoP7BaseType.categoria) &&
        Objects.equals(this.categoriaScorporabile, lottoP7BaseType.categoriaScorporabile) &&
        Objects.equals(this.prestazioniComprese, lottoP7BaseType.prestazioniComprese) &&
        Objects.equals(this.finanziamenti, lottoP7BaseType.finanziamenti) &&
        Objects.equals(this.tipoRealizzazione, lottoP7BaseType.tipoRealizzazione) &&
        Objects.equals(this.datiBase, lottoP7BaseType.datiBase) &&
        Objects.equals(this.datiBaseCPV, lottoP7BaseType.datiBaseCPV) &&
        Objects.equals(this.datiBaseContratto, lottoP7BaseType.datiBaseContratto) &&
        Objects.equals(this.datiBaseAggiudicazione, lottoP7BaseType.datiBaseAggiudicazione) &&
        Objects.equals(this.datiBaseAggiuntivi, lottoP7BaseType.datiBaseAggiuntivi) &&
        Objects.equals(this.datiBaseAccessibilita, lottoP7BaseType.datiBaseAccessibilita) &&
        Objects.equals(this.datiBaseComunicazione, lottoP7BaseType.datiBaseComunicazione) &&
        Objects.equals(this.datiBaseDocumenti, lottoP7BaseType.datiBaseDocumenti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotIdentifier, categorieMerceologiche, saNonSoggettaObblighi24Dicembre2015, iniziativeNonSoddisfacenti, strumentiElettroniciSpecifici, motivoEsclusioneOrdinarioSpeciale, motivoEsclusioneConcessione, condizioniNegoziata, contrattiDisposizioniParticolari, codIstat, servizioPubblicoLocale, lavoroOAcquistoPrevistoInProgrammazione, cui, ripetizioniEConsegneComplementari, ipotesiCollegamento, opzioniRinnovi, afferenteInvestimentiPNRR, acquisizioneCup, cupLotto, paritaDiGenereGenerazionale, ccnl, modalitaAcquisizione, tipologiaLavoro, categoria, categoriaScorporabile, prestazioniComprese, finanziamenti, tipoRealizzazione, datiBase, datiBaseCPV, datiBaseContratto, datiBaseAggiudicazione, datiBaseAggiuntivi, datiBaseAccessibilita, datiBaseComunicazione, datiBaseDocumenti);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoP7BaseType {\n");
    
    sb.append("    lotIdentifier: ").append(toIndentedString(lotIdentifier)).append("\n");
    sb.append("    categorieMerceologiche: ").append(toIndentedString(categorieMerceologiche)).append("\n");
    sb.append("    saNonSoggettaObblighi24Dicembre2015: ").append(toIndentedString(saNonSoggettaObblighi24Dicembre2015)).append("\n");
    sb.append("    iniziativeNonSoddisfacenti: ").append(toIndentedString(iniziativeNonSoddisfacenti)).append("\n");
    sb.append("    strumentiElettroniciSpecifici: ").append(toIndentedString(strumentiElettroniciSpecifici)).append("\n");
    sb.append("    motivoEsclusioneOrdinarioSpeciale: ").append(toIndentedString(motivoEsclusioneOrdinarioSpeciale)).append("\n");
    sb.append("    motivoEsclusioneConcessione: ").append(toIndentedString(motivoEsclusioneConcessione)).append("\n");
    sb.append("    condizioniNegoziata: ").append(toIndentedString(condizioniNegoziata)).append("\n");
    sb.append("    contrattiDisposizioniParticolari: ").append(toIndentedString(contrattiDisposizioniParticolari)).append("\n");
    sb.append("    codIstat: ").append(toIndentedString(codIstat)).append("\n");
    sb.append("    servizioPubblicoLocale: ").append(toIndentedString(servizioPubblicoLocale)).append("\n");
    sb.append("    lavoroOAcquistoPrevistoInProgrammazione: ").append(toIndentedString(lavoroOAcquistoPrevistoInProgrammazione)).append("\n");
    sb.append("    cui: ").append(toIndentedString(cui)).append("\n");
    sb.append("    ripetizioniEConsegneComplementari: ").append(toIndentedString(ripetizioniEConsegneComplementari)).append("\n");
    sb.append("    ipotesiCollegamento: ").append(toIndentedString(ipotesiCollegamento)).append("\n");
    sb.append("    opzioniRinnovi: ").append(toIndentedString(opzioniRinnovi)).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    paritaDiGenereGenerazionale: ").append(toIndentedString(paritaDiGenereGenerazionale)).append("\n");
    sb.append("    ccnl: ").append(toIndentedString(ccnl)).append("\n");
    sb.append("    modalitaAcquisizione: ").append(toIndentedString(modalitaAcquisizione)).append("\n");
    sb.append("    tipologiaLavoro: ").append(toIndentedString(tipologiaLavoro)).append("\n");
    sb.append("    categoria: ").append(toIndentedString(categoria)).append("\n");
    sb.append("    categoriaScorporabile: ").append(toIndentedString(categoriaScorporabile)).append("\n");
    sb.append("    prestazioniComprese: ").append(toIndentedString(prestazioniComprese)).append("\n");
    sb.append("    finanziamenti: ").append(toIndentedString(finanziamenti)).append("\n");
    sb.append("    tipoRealizzazione: ").append(toIndentedString(tipoRealizzazione)).append("\n");
    sb.append("    datiBase: ").append(toIndentedString(datiBase)).append("\n");
    sb.append("    datiBaseCPV: ").append(toIndentedString(datiBaseCPV)).append("\n");
    sb.append("    datiBaseContratto: ").append(toIndentedString(datiBaseContratto)).append("\n");
    sb.append("    datiBaseAggiudicazione: ").append(toIndentedString(datiBaseAggiudicazione)).append("\n");
    sb.append("    datiBaseAggiuntivi: ").append(toIndentedString(datiBaseAggiuntivi)).append("\n");
    sb.append("    datiBaseAccessibilita: ").append(toIndentedString(datiBaseAccessibilita)).append("\n");
    sb.append("    datiBaseComunicazione: ").append(toIndentedString(datiBaseComunicazione)).append("\n");
    sb.append("    datiBaseDocumenti: ").append(toIndentedString(datiBaseDocumenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
