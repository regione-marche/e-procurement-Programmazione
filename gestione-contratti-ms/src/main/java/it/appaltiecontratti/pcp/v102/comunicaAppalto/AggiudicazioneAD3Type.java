/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CategoriaEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAccessibilitaType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAggiudicazioneAppaltoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseCPVType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseContrattoADType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseLottoADType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.PartecipanteADType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoType;
import java.util.ArrayList;
import java.util.List;
/**
 * AggiudicazioneAD3Type
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class AggiudicazioneAD3Type {
  @JsonProperty("lotIdentifier")
  private String lotIdentifier = null;

  @JsonProperty("ccnl")
  private String ccnl = null;

  @JsonProperty("categoria")
  private CategoriaEnum categoria = null;

  @JsonProperty("categoriaScorporabile")
  private List<CategoriaEnum> categoriaScorporabile = null;

  @JsonProperty("codIstat")
  private CodIstatEnum codIstat = null;

  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("paritaDiGenereGenerazionale")
  private ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale = null;

  @JsonProperty("quadroEconomicoStandard")
  private QuadroEconomicoType quadroEconomicoStandard = null;

  @JsonProperty("partecipanti")
  private List<PartecipanteADType> partecipanti = new ArrayList<>();

  @JsonProperty("datiBase")
  private DatiBaseLottoADType datiBase = null;

  @JsonProperty("datiBaseCPV")
  private DatiBaseCPVType datiBaseCPV = null;

  @JsonProperty("datiBaseContratto")
  private DatiBaseContrattoADType datiBaseContratto = null;

  @JsonProperty("datiBaseAggiudicazioneAppalto")
  private DatiBaseAggiudicazioneAppaltoType datiBaseAggiudicazioneAppalto = null;

  @JsonProperty("datiBaseAccessibilita")
  private DatiBaseAccessibilitaType datiBaseAccessibilita = null;

  @JsonProperty("datiBaseDocumenti")
  private AllOfAggiudicazioneAD3TypeDatiBaseDocumenti datiBaseDocumenti = null;

  public AggiudicazioneAD3Type lotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
    return this;
  }

   /**
   * Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED
   * @return lotIdentifier
  **/
  @Schema(required = true, description = "Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED")
  public String getLotIdentifier() {
    return lotIdentifier;
  }

  public void setLotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
  }

  public AggiudicazioneAD3Type ccnl(String ccnl) {
    this.ccnl = ccnl;
    return this;
  }

   /**
   * indicare il codice CNEL o non applicabile
   * @return ccnl
  **/
  @Schema(required = true, description = "indicare il codice CNEL o non applicabile")
  public String getCcnl() {
    return ccnl;
  }

  public void setCcnl(String ccnl) {
    this.ccnl = ccnl;
  }

  public AggiudicazioneAD3Type categoria(CategoriaEnum categoria) {
    this.categoria = categoria;
    return this;
  }

   /**
   * Get categoria
   * @return categoria
  **/
  @Schema(required = true, description = "")
  public CategoriaEnum getCategoria() {
    return categoria;
  }

  public void setCategoria(CategoriaEnum categoria) {
    this.categoria = categoria;
  }

  public AggiudicazioneAD3Type categoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
    return this;
  }

  public AggiudicazioneAD3Type addCategoriaScorporabileItem(CategoriaEnum categoriaScorporabileItem) {
    if (this.categoriaScorporabile == null) {
      this.categoriaScorporabile = new ArrayList<>();
    }
    this.categoriaScorporabile.add(categoriaScorporabileItem);
    return this;
  }

   /**
   * Get categoriaScorporabile
   * @return categoriaScorporabile
  **/
  @Schema(description = "")
  public List<CategoriaEnum> getCategoriaScorporabile() {
    return categoriaScorporabile;
  }

  public void setCategoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
  }

  public AggiudicazioneAD3Type codIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
    return this;
  }

   /**
   * Get codIstat
   * @return codIstat
  **/
  @Schema(required = true, description = "")
  public CodIstatEnum getCodIstat() {
    return codIstat;
  }

  public void setCodIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
  }

  public AggiudicazioneAD3Type afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

   /**
   * L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
  **/
  @Schema(description = "L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public AggiudicazioneAD3Type acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

   /**
   * Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
  **/
  @Schema(description = "Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public AggiudicazioneAD3Type cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public AggiudicazioneAD3Type addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

   /**
   * Cup associati al lotto
   * @return cupLotto
  **/
  @Schema(description = "Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public AggiudicazioneAD3Type paritaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
    return this;
  }

   /**
   * Get paritaDiGenereGenerazionale
   * @return paritaDiGenereGenerazionale
  **/
  @Schema(description = "")
  public ParitaDiGenereGenerazionaleType getParitaDiGenereGenerazionale() {
    return paritaDiGenereGenerazionale;
  }

  public void setParitaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
  }

  public AggiudicazioneAD3Type quadroEconomicoStandard(QuadroEconomicoType quadroEconomicoStandard) {
    this.quadroEconomicoStandard = quadroEconomicoStandard;
    return this;
  }

   /**
   * Get quadroEconomicoStandard
   * @return quadroEconomicoStandard
  **/
  @Schema(required = true, description = "")
  public QuadroEconomicoType getQuadroEconomicoStandard() {
    return quadroEconomicoStandard;
  }

  public void setQuadroEconomicoStandard(QuadroEconomicoType quadroEconomicoStandard) {
    this.quadroEconomicoStandard = quadroEconomicoStandard;
  }

  public AggiudicazioneAD3Type partecipanti(List<PartecipanteADType> partecipanti) {
    this.partecipanti = partecipanti;
    return this;
  }

  public AggiudicazioneAD3Type addPartecipantiItem(PartecipanteADType partecipantiItem) {
    this.partecipanti.add(partecipantiItem);
    return this;
  }

   /**
   * Get partecipanti
   * @return partecipanti
  **/
  @Schema(required = true, description = "")
  public List<PartecipanteADType> getPartecipanti() {
    return partecipanti;
  }

  public void setPartecipanti(List<PartecipanteADType> partecipanti) {
    this.partecipanti = partecipanti;
  }

  public AggiudicazioneAD3Type datiBase(DatiBaseLottoADType datiBase) {
    this.datiBase = datiBase;
    return this;
  }

   /**
   * Get datiBase
   * @return datiBase
  **/
  @Schema(required = true, description = "")
  public DatiBaseLottoADType getDatiBase() {
    return datiBase;
  }

  public void setDatiBase(DatiBaseLottoADType datiBase) {
    this.datiBase = datiBase;
  }

  public AggiudicazioneAD3Type datiBaseCPV(DatiBaseCPVType datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
    return this;
  }

   /**
   * Get datiBaseCPV
   * @return datiBaseCPV
  **/
  @Schema(required = true, description = "")
  public DatiBaseCPVType getDatiBaseCPV() {
    return datiBaseCPV;
  }

  public void setDatiBaseCPV(DatiBaseCPVType datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
  }

  public AggiudicazioneAD3Type datiBaseContratto(DatiBaseContrattoADType datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
    return this;
  }

   /**
   * Get datiBaseContratto
   * @return datiBaseContratto
  **/
  @Schema(description = "")
  public DatiBaseContrattoADType getDatiBaseContratto() {
    return datiBaseContratto;
  }

  public void setDatiBaseContratto(DatiBaseContrattoADType datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
  }

  public AggiudicazioneAD3Type datiBaseAggiudicazioneAppalto(DatiBaseAggiudicazioneAppaltoType datiBaseAggiudicazioneAppalto) {
    this.datiBaseAggiudicazioneAppalto = datiBaseAggiudicazioneAppalto;
    return this;
  }

   /**
   * Get datiBaseAggiudicazioneAppalto
   * @return datiBaseAggiudicazioneAppalto
  **/
  @Schema(required = true, description = "")
  public DatiBaseAggiudicazioneAppaltoType getDatiBaseAggiudicazioneAppalto() {
    return datiBaseAggiudicazioneAppalto;
  }

  public void setDatiBaseAggiudicazioneAppalto(DatiBaseAggiudicazioneAppaltoType datiBaseAggiudicazioneAppalto) {
    this.datiBaseAggiudicazioneAppalto = datiBaseAggiudicazioneAppalto;
  }

  public AggiudicazioneAD3Type datiBaseAccessibilita(DatiBaseAccessibilitaType datiBaseAccessibilita) {
    this.datiBaseAccessibilita = datiBaseAccessibilita;
    return this;
  }

   /**
   * Get datiBaseAccessibilita
   * @return datiBaseAccessibilita
  **/
  @Schema(description = "")
  public DatiBaseAccessibilitaType getDatiBaseAccessibilita() {
    return datiBaseAccessibilita;
  }

  public void setDatiBaseAccessibilita(DatiBaseAccessibilitaType datiBaseAccessibilita) {
    this.datiBaseAccessibilita = datiBaseAccessibilita;
  }

  public AggiudicazioneAD3Type datiBaseDocumenti(AllOfAggiudicazioneAD3TypeDatiBaseDocumenti datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
    return this;
  }

   /**
   * Get datiBaseDocumenti
   * @return datiBaseDocumenti
  **/
  @Schema(required = true, description = "")
  public AllOfAggiudicazioneAD3TypeDatiBaseDocumenti getDatiBaseDocumenti() {
    return datiBaseDocumenti;
  }

  public void setDatiBaseDocumenti(AllOfAggiudicazioneAD3TypeDatiBaseDocumenti datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggiudicazioneAD3Type aggiudicazioneAD3Type = (AggiudicazioneAD3Type) o;
    return Objects.equals(this.lotIdentifier, aggiudicazioneAD3Type.lotIdentifier) &&
        Objects.equals(this.ccnl, aggiudicazioneAD3Type.ccnl) &&
        Objects.equals(this.categoria, aggiudicazioneAD3Type.categoria) &&
        Objects.equals(this.categoriaScorporabile, aggiudicazioneAD3Type.categoriaScorporabile) &&
        Objects.equals(this.codIstat, aggiudicazioneAD3Type.codIstat) &&
        Objects.equals(this.afferenteInvestimentiPNRR, aggiudicazioneAD3Type.afferenteInvestimentiPNRR) &&
        Objects.equals(this.acquisizioneCup, aggiudicazioneAD3Type.acquisizioneCup) &&
        Objects.equals(this.cupLotto, aggiudicazioneAD3Type.cupLotto) &&
        Objects.equals(this.paritaDiGenereGenerazionale, aggiudicazioneAD3Type.paritaDiGenereGenerazionale) &&
        Objects.equals(this.quadroEconomicoStandard, aggiudicazioneAD3Type.quadroEconomicoStandard) &&
        Objects.equals(this.partecipanti, aggiudicazioneAD3Type.partecipanti) &&
        Objects.equals(this.datiBase, aggiudicazioneAD3Type.datiBase) &&
        Objects.equals(this.datiBaseCPV, aggiudicazioneAD3Type.datiBaseCPV) &&
        Objects.equals(this.datiBaseContratto, aggiudicazioneAD3Type.datiBaseContratto) &&
        Objects.equals(this.datiBaseAggiudicazioneAppalto, aggiudicazioneAD3Type.datiBaseAggiudicazioneAppalto) &&
        Objects.equals(this.datiBaseAccessibilita, aggiudicazioneAD3Type.datiBaseAccessibilita) &&
        Objects.equals(this.datiBaseDocumenti, aggiudicazioneAD3Type.datiBaseDocumenti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotIdentifier, ccnl, categoria, categoriaScorporabile, codIstat, afferenteInvestimentiPNRR, acquisizioneCup, cupLotto, paritaDiGenereGenerazionale, quadroEconomicoStandard, partecipanti, datiBase, datiBaseCPV, datiBaseContratto, datiBaseAggiudicazioneAppalto, datiBaseAccessibilita, datiBaseDocumenti);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggiudicazioneAD3Type {\n");
    
    sb.append("    lotIdentifier: ").append(toIndentedString(lotIdentifier)).append("\n");
    sb.append("    ccnl: ").append(toIndentedString(ccnl)).append("\n");
    sb.append("    categoria: ").append(toIndentedString(categoria)).append("\n");
    sb.append("    categoriaScorporabile: ").append(toIndentedString(categoriaScorporabile)).append("\n");
    sb.append("    codIstat: ").append(toIndentedString(codIstat)).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    paritaDiGenereGenerazionale: ").append(toIndentedString(paritaDiGenereGenerazionale)).append("\n");
    sb.append("    quadroEconomicoStandard: ").append(toIndentedString(quadroEconomicoStandard)).append("\n");
    sb.append("    partecipanti: ").append(toIndentedString(partecipanti)).append("\n");
    sb.append("    datiBase: ").append(toIndentedString(datiBase)).append("\n");
    sb.append("    datiBaseCPV: ").append(toIndentedString(datiBaseCPV)).append("\n");
    sb.append("    datiBaseContratto: ").append(toIndentedString(datiBaseContratto)).append("\n");
    sb.append("    datiBaseAggiudicazioneAppalto: ").append(toIndentedString(datiBaseAggiudicazioneAppalto)).append("\n");
    sb.append("    datiBaseAccessibilita: ").append(toIndentedString(datiBaseAccessibilita)).append("\n");
    sb.append("    datiBaseDocumenti: ").append(toIndentedString(datiBaseDocumenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
