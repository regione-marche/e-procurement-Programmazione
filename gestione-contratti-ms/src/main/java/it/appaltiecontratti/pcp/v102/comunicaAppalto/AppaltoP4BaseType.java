/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAppaltoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseStrumentiProceduraAstaType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.StrumentiSvolgimentoProcedureEnum;
import java.util.UUID;
/**
 * Oggetto che riporta i dati dell&#x27;appalto
 */
@Schema(description = "Oggetto che riporta i dati dell'appalto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class AppaltoP4BaseType {
  @JsonProperty("codiceAppalto")
  private String codiceAppalto = null;

  @JsonProperty("prelazionePromotore")
  private Boolean prelazionePromotore = null;

  @JsonProperty("strumentiSvolgimentoProcedure")
  private StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure = null;

  @JsonProperty("idPianificazione")
  private UUID idPianificazione = null;

  @JsonProperty("termineRidottoAvvisoPreinformazione")
  private Boolean termineRidottoAvvisoPreinformazione = null;

  @JsonProperty("costituzioneSocietaDiScopo")
  private Boolean costituzioneSocietaDiScopo = null;

  @JsonProperty("datiBase")
  private DatiBaseAppaltoType datiBase = null;

  @JsonProperty("datiBaseProcedura")
  private AllOfAppaltoP4BaseTypeDatiBaseProcedura datiBaseProcedura = null;

  @JsonProperty("datiBaseStrumentiProcedura")
  private DatiBaseStrumentiProceduraAstaType datiBaseStrumentiProcedura = null;

  public AppaltoP4BaseType codiceAppalto(String codiceAppalto) {
    this.codiceAppalto = codiceAppalto;
    return this;
  }

   /**
   * Identificativo univoco dell&#x27;appalto definito dalla Stazione Appaltante
   * @return codiceAppalto
  **/
  @Schema(required = true, description = "Identificativo univoco dell'appalto definito dalla Stazione Appaltante")
  public String getCodiceAppalto() {
    return codiceAppalto;
  }

  public void setCodiceAppalto(String codiceAppalto) {
    this.codiceAppalto = codiceAppalto;
  }

  public AppaltoP4BaseType prelazionePromotore(Boolean prelazionePromotore) {
    this.prelazionePromotore = prelazionePromotore;
    return this;
  }

   /**
   * E&#x27; previsto il diritto di prelazione per il promotore?
   * @return prelazionePromotore
  **/
  @Schema(required = true, description = "E' previsto il diritto di prelazione per il promotore?")
  public Boolean isPrelazionePromotore() {
    return prelazionePromotore;
  }

  public void setPrelazionePromotore(Boolean prelazionePromotore) {
    this.prelazionePromotore = prelazionePromotore;
  }

  public AppaltoP4BaseType strumentiSvolgimentoProcedure(StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure) {
    this.strumentiSvolgimentoProcedure = strumentiSvolgimentoProcedure;
    return this;
  }

   /**
   * Get strumentiSvolgimentoProcedure
   * @return strumentiSvolgimentoProcedure
  **/
  @Schema(description = "")
  public StrumentiSvolgimentoProcedureEnum getStrumentiSvolgimentoProcedure() {
    return strumentiSvolgimentoProcedure;
  }

  public void setStrumentiSvolgimentoProcedure(StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure) {
    this.strumentiSvolgimentoProcedure = strumentiSvolgimentoProcedure;
  }

  public AppaltoP4BaseType idPianificazione(UUID idPianificazione) {
    this.idPianificazione = idPianificazione;
    return this;
  }

   /**
   * ID pianificazione
   * @return idPianificazione
  **/
  @Schema(description = "ID pianificazione")
  public UUID getIdPianificazione() {
    return idPianificazione;
  }

  public void setIdPianificazione(UUID idPianificazione) {
    this.idPianificazione = idPianificazione;
  }

  public AppaltoP4BaseType termineRidottoAvvisoPreinformazione(Boolean termineRidottoAvvisoPreinformazione) {
    this.termineRidottoAvvisoPreinformazione = termineRidottoAvvisoPreinformazione;
    return this;
  }

   /**
   * E&#x27; stato utilizzato un termine ridotto con avviso di preinformazione?
   * @return termineRidottoAvvisoPreinformazione
  **/
  @Schema(description = "E' stato utilizzato un termine ridotto con avviso di preinformazione?")
  public Boolean isTermineRidottoAvvisoPreinformazione() {
    return termineRidottoAvvisoPreinformazione;
  }

  public void setTermineRidottoAvvisoPreinformazione(Boolean termineRidottoAvvisoPreinformazione) {
    this.termineRidottoAvvisoPreinformazione = termineRidottoAvvisoPreinformazione;
  }

  public AppaltoP4BaseType costituzioneSocietaDiScopo(Boolean costituzioneSocietaDiScopo) {
    this.costituzioneSocietaDiScopo = costituzioneSocietaDiScopo;
    return this;
  }

   /**
   * Indicare se è prevista la costituzione di una società di scopo
   * @return costituzioneSocietaDiScopo
  **/
  @Schema(required = true, description = "Indicare se è prevista la costituzione di una società di scopo")
  public Boolean isCostituzioneSocietaDiScopo() {
    return costituzioneSocietaDiScopo;
  }

  public void setCostituzioneSocietaDiScopo(Boolean costituzioneSocietaDiScopo) {
    this.costituzioneSocietaDiScopo = costituzioneSocietaDiScopo;
  }

  public AppaltoP4BaseType datiBase(DatiBaseAppaltoType datiBase) {
    this.datiBase = datiBase;
    return this;
  }

   /**
   * Get datiBase
   * @return datiBase
  **/
  @Schema(required = true, description = "")
  public DatiBaseAppaltoType getDatiBase() {
    return datiBase;
  }

  public void setDatiBase(DatiBaseAppaltoType datiBase) {
    this.datiBase = datiBase;
  }

  public AppaltoP4BaseType datiBaseProcedura(AllOfAppaltoP4BaseTypeDatiBaseProcedura datiBaseProcedura) {
    this.datiBaseProcedura = datiBaseProcedura;
    return this;
  }

   /**
   * Get datiBaseProcedura
   * @return datiBaseProcedura
  **/
  @Schema(required = true, description = "")
  public AllOfAppaltoP4BaseTypeDatiBaseProcedura getDatiBaseProcedura() {
    return datiBaseProcedura;
  }

  public void setDatiBaseProcedura(AllOfAppaltoP4BaseTypeDatiBaseProcedura datiBaseProcedura) {
    this.datiBaseProcedura = datiBaseProcedura;
  }

  public AppaltoP4BaseType datiBaseStrumentiProcedura(DatiBaseStrumentiProceduraAstaType datiBaseStrumentiProcedura) {
    this.datiBaseStrumentiProcedura = datiBaseStrumentiProcedura;
    return this;
  }

   /**
   * Get datiBaseStrumentiProcedura
   * @return datiBaseStrumentiProcedura
  **/
  @Schema(description = "")
  public DatiBaseStrumentiProceduraAstaType getDatiBaseStrumentiProcedura() {
    return datiBaseStrumentiProcedura;
  }

  public void setDatiBaseStrumentiProcedura(DatiBaseStrumentiProceduraAstaType datiBaseStrumentiProcedura) {
    this.datiBaseStrumentiProcedura = datiBaseStrumentiProcedura;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppaltoP4BaseType appaltoP4BaseType = (AppaltoP4BaseType) o;
    return Objects.equals(this.codiceAppalto, appaltoP4BaseType.codiceAppalto) &&
        Objects.equals(this.prelazionePromotore, appaltoP4BaseType.prelazionePromotore) &&
        Objects.equals(this.strumentiSvolgimentoProcedure, appaltoP4BaseType.strumentiSvolgimentoProcedure) &&
        Objects.equals(this.idPianificazione, appaltoP4BaseType.idPianificazione) &&
        Objects.equals(this.termineRidottoAvvisoPreinformazione, appaltoP4BaseType.termineRidottoAvvisoPreinformazione) &&
        Objects.equals(this.costituzioneSocietaDiScopo, appaltoP4BaseType.costituzioneSocietaDiScopo) &&
        Objects.equals(this.datiBase, appaltoP4BaseType.datiBase) &&
        Objects.equals(this.datiBaseProcedura, appaltoP4BaseType.datiBaseProcedura) &&
        Objects.equals(this.datiBaseStrumentiProcedura, appaltoP4BaseType.datiBaseStrumentiProcedura);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codiceAppalto, prelazionePromotore, strumentiSvolgimentoProcedure, idPianificazione, termineRidottoAvvisoPreinformazione, costituzioneSocietaDiScopo, datiBase, datiBaseProcedura, datiBaseStrumentiProcedura);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppaltoP4BaseType {\n");
    
    sb.append("    codiceAppalto: ").append(toIndentedString(codiceAppalto)).append("\n");
    sb.append("    prelazionePromotore: ").append(toIndentedString(prelazionePromotore)).append("\n");
    sb.append("    strumentiSvolgimentoProcedure: ").append(toIndentedString(strumentiSvolgimentoProcedure)).append("\n");
    sb.append("    idPianificazione: ").append(toIndentedString(idPianificazione)).append("\n");
    sb.append("    termineRidottoAvvisoPreinformazione: ").append(toIndentedString(termineRidottoAvvisoPreinformazione)).append("\n");
    sb.append("    costituzioneSocietaDiScopo: ").append(toIndentedString(costituzioneSocietaDiScopo)).append("\n");
    sb.append("    datiBase: ").append(toIndentedString(datiBase)).append("\n");
    sb.append("    datiBaseProcedura: ").append(toIndentedString(datiBaseProcedura)).append("\n");
    sb.append("    datiBaseStrumentiProcedura: ").append(toIndentedString(datiBaseStrumentiProcedura)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
