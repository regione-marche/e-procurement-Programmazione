/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.2
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.MotiviModificaContrattualeEnum;
import it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.MultilinguaType;
import java.time.OffsetDateTime;
/**
 * Dato in comune con i Business Group Contract e Modification delle eforms
 */
@Schema(description = "Dato in comune con i Business Group Contract e Modification delle eforms")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:12:50.940473900+02:00[Europe/Berlin]")

public class DatiBaseModificaContrattualeType {
  @JsonProperty("dataSottoscrizione")
  private java.time.OffsetDateTime dataSottoscrizione = null;

  @JsonProperty("motiviModifica")
  private MotiviModificaContrattualeEnum motiviModifica = null;

  @JsonProperty("causaModifica")
  private String causaModifica = null;

  @JsonProperty("causaModificaMl")
  private MultilinguaType causaModificaMl = null;

  public DatiBaseModificaContrattualeType dataSottoscrizione(java.time.OffsetDateTime dataSottoscrizione) {
    this.dataSottoscrizione = dataSottoscrizione;
    return this;
  }

   /**
   * Data sottoscrizione eventuale atto aggiuntivo/ sottomissione - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-145 - Contract Conclusion Date del TED
   * @return dataSottoscrizione
  **/
  @Schema(required = true, description = "Data sottoscrizione eventuale atto aggiuntivo/ sottomissione - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-145 - Contract Conclusion Date del TED")
  public java.time.OffsetDateTime getDataSottoscrizione() {
    return dataSottoscrizione;
  }

  public void setDataSottoscrizione(java.time.OffsetDateTime dataSottoscrizione) {
    this.dataSottoscrizione = dataSottoscrizione;
  }

  public DatiBaseModificaContrattualeType motiviModifica(MotiviModificaContrattualeEnum motiviModifica) {
    this.motiviModifica = motiviModifica;
    return this;
  }

   /**
   * Get motiviModifica
   * @return motiviModifica
  **/
  @Schema(required = true, description = "")
  public MotiviModificaContrattualeEnum getMotiviModifica() {
    return motiviModifica;
  }

  public void setMotiviModifica(MotiviModificaContrattualeEnum motiviModifica) {
    this.motiviModifica = motiviModifica;
  }

  public DatiBaseModificaContrattualeType causaModifica(String causaModifica) {
    this.causaModifica = causaModifica;
    return this;
  }

   /**
   * Cause della modifica contrattuale
   * @return causaModifica
  **/
  @Schema(required = true, description = "Cause della modifica contrattuale")
  public String getCausaModifica() {
    return causaModifica;
  }

  public void setCausaModifica(String causaModifica) {
    this.causaModifica = causaModifica;
  }

  public DatiBaseModificaContrattualeType causaModificaMl(MultilinguaType causaModificaMl) {
    this.causaModificaMl = causaModificaMl;
    return this;
  }

   /**
   * Get causaModificaMl
   * @return causaModificaMl
  **/
  @Schema(description = "")
  public MultilinguaType getCausaModificaMl() {
    return causaModificaMl;
  }

  public void setCausaModificaMl(MultilinguaType causaModificaMl) {
    this.causaModificaMl = causaModificaMl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatiBaseModificaContrattualeType datiBaseModificaContrattualeType = (DatiBaseModificaContrattualeType) o;
    return Objects.equals(this.dataSottoscrizione, datiBaseModificaContrattualeType.dataSottoscrizione) &&
        Objects.equals(this.motiviModifica, datiBaseModificaContrattualeType.motiviModifica) &&
        Objects.equals(this.causaModifica, datiBaseModificaContrattualeType.causaModifica) &&
        Objects.equals(this.causaModificaMl, datiBaseModificaContrattualeType.causaModificaMl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSottoscrizione, motiviModifica, causaModifica, causaModificaMl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatiBaseModificaContrattualeType {\n");
    
    sb.append("    dataSottoscrizione: ").append(toIndentedString(dataSottoscrizione)).append("\n");
    sb.append("    motiviModifica: ").append(toIndentedString(motiviModifica)).append("\n");
    sb.append("    causaModifica: ").append(toIndentedString(causaModifica)).append("\n");
    sb.append("    causaModificaMl: ").append(toIndentedString(causaModificaMl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
