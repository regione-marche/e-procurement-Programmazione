/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.2
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
/**
 * Oggetto che riporta tutti i dati delle Sospensioni
 */
@Schema(description = "Oggetto che riporta tutti i dati delle Sospensioni")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:12:50.940473900+02:00[Europe/Berlin]")

public class SospensioneType2 {
  @JsonProperty("dataVerbaleRipresa")
  private java.time.OffsetDateTime dataVerbaleRipresa = null;

  @JsonProperty("incidenzaCronoprogramma")
  private Double incidenzaCronoprogramma = null;

  @JsonProperty("superatoTempo")
  private Boolean superatoTempo = null;

  @JsonProperty("riserve")
  private Boolean riserve = null;

  @JsonProperty("verbaleNonSottoscritto")
  private Boolean verbaleNonSottoscritto = null;

  public SospensioneType2 dataVerbaleRipresa(java.time.OffsetDateTime dataVerbaleRipresa) {
    this.dataVerbaleRipresa = dataVerbaleRipresa;
    return this;
  }

   /**
   * Data del verbale di ripresa
   * @return dataVerbaleRipresa
  **/
  @Schema(description = "Data del verbale di ripresa")
  public java.time.OffsetDateTime getDataVerbaleRipresa() {
    return dataVerbaleRipresa;
  }

  public void setDataVerbaleRipresa(java.time.OffsetDateTime dataVerbaleRipresa) {
    this.dataVerbaleRipresa = dataVerbaleRipresa;
  }

  public SospensioneType2 incidenzaCronoprogramma(Double incidenzaCronoprogramma) {
    this.incidenzaCronoprogramma = incidenzaCronoprogramma;
    return this;
  }

   /**
   * Incidenza sul croprogramma (nel caso di sospensione parziale)
   * minimum: 0
   * maximum: 100
   * @return incidenzaCronoprogramma
  **/
  @Schema(description = "Incidenza sul croprogramma (nel caso di sospensione parziale)")
  public Double getIncidenzaCronoprogramma() {
    return incidenzaCronoprogramma;
  }

  public void setIncidenzaCronoprogramma(Double incidenzaCronoprogramma) {
    this.incidenzaCronoprogramma = incidenzaCronoprogramma;
  }

  public SospensioneType2 superatoTempo(Boolean superatoTempo) {
    this.superatoTempo = superatoTempo;
    return this;
  }

   /**
   * E’ stato superato il quarto del tempo contrattuale
   * @return superatoTempo
  **/
  @Schema(required = true, description = "E’ stato superato il quarto del tempo contrattuale")
  public Boolean isSuperatoTempo() {
    return superatoTempo;
  }

  public void setSuperatoTempo(Boolean superatoTempo) {
    this.superatoTempo = superatoTempo;
  }

  public SospensioneType2 riserve(Boolean riserve) {
    this.riserve = riserve;
    return this;
  }

   /**
   * Iscrizione di riserve dell’appaltatore nei verbali di sospensione e/o ripresa lavori
   * @return riserve
  **/
  @Schema(required = true, description = "Iscrizione di riserve dell’appaltatore nei verbali di sospensione e/o ripresa lavori")
  public Boolean isRiserve() {
    return riserve;
  }

  public void setRiserve(Boolean riserve) {
    this.riserve = riserve;
  }

  public SospensioneType2 verbaleNonSottoscritto(Boolean verbaleNonSottoscritto) {
    this.verbaleNonSottoscritto = verbaleNonSottoscritto;
    return this;
  }

   /**
   * Verbale/i non sottoscritti dall’appaltatore
   * @return verbaleNonSottoscritto
  **/
  @Schema(required = true, description = "Verbale/i non sottoscritti dall’appaltatore")
  public Boolean isVerbaleNonSottoscritto() {
    return verbaleNonSottoscritto;
  }

  public void setVerbaleNonSottoscritto(Boolean verbaleNonSottoscritto) {
    this.verbaleNonSottoscritto = verbaleNonSottoscritto;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SospensioneType2 sospensioneType2 = (SospensioneType2) o;
    return Objects.equals(this.dataVerbaleRipresa, sospensioneType2.dataVerbaleRipresa) &&
        Objects.equals(this.incidenzaCronoprogramma, sospensioneType2.incidenzaCronoprogramma) &&
        Objects.equals(this.superatoTempo, sospensioneType2.superatoTempo) &&
        Objects.equals(this.riserve, sospensioneType2.riserve) &&
        Objects.equals(this.verbaleNonSottoscritto, sospensioneType2.verbaleNonSottoscritto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataVerbaleRipresa, incidenzaCronoprogramma, superatoTempo, riserve, verbaleNonSottoscritto);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SospensioneType2 {\n");
    
    sb.append("    dataVerbaleRipresa: ").append(toIndentedString(dataVerbaleRipresa)).append("\n");
    sb.append("    incidenzaCronoprogramma: ").append(toIndentedString(incidenzaCronoprogramma)).append("\n");
    sb.append("    superatoTempo: ").append(toIndentedString(superatoTempo)).append("\n");
    sb.append("    riserve: ").append(toIndentedString(riserve)).append("\n");
    sb.append("    verbaleNonSottoscritto: ").append(toIndentedString(verbaleNonSottoscritto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
