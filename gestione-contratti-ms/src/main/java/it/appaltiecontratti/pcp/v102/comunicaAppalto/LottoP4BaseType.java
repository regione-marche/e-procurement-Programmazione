/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CategoriaEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CondizioniNegoziataEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ContrattiDisposizioniParticolariEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAccessibilitaType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAggiudicazioneOptionalType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseAggiuntiviType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseCPVType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseContrattoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiBaseLottoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.DatiTerminiInvioType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.FinanziamentoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.IpotesiCollegamentoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ModalitaAcquisizioneEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.TipologiaLavoroEnum;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto
 */
@Schema(description = "Oggetto che riporta i dati del lotto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class LottoP4BaseType {
  @JsonProperty("servizioPubblicoLocale")
  private Boolean servizioPubblicoLocale = null;

  @JsonProperty("lotIdentifier")
  private String lotIdentifier = null;

  @JsonProperty("condizioniNegoziata")
  private List<CondizioniNegoziataEnum> condizioniNegoziata = null;

  @JsonProperty("codIstat")
  private CodIstatEnum codIstat = null;

  @JsonProperty("contrattiDisposizioniParticolari")
  private ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari = null;

  @JsonProperty("lavoroOAcquistoPrevistoInProgrammazione")
  private Boolean lavoroOAcquistoPrevistoInProgrammazione = null;

  @JsonProperty("cui")
  private String cui = null;

  @JsonProperty("ipotesiCollegamento")
  private IpotesiCollegamentoType ipotesiCollegamento = null;

  @JsonProperty("opzioniRinnovi")
  private Boolean opzioniRinnovi = null;

  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("paritaDiGenereGenerazionale")
  private ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale = null;

  @JsonProperty("modalitaAcquisizione")
  private ModalitaAcquisizioneEnum modalitaAcquisizione = null;

  @JsonProperty("tipologiaLavoro")
  private List<TipologiaLavoroEnum> tipologiaLavoro = null;

  @JsonProperty("categoria")
  private CategoriaEnum categoria = null;

  @JsonProperty("categoriaScorporabile")
  private List<CategoriaEnum> categoriaScorporabile = null;

  @JsonProperty("finanziamenti")
  private List<FinanziamentoType> finanziamenti = null;

  @JsonProperty("datiBase")
  private DatiBaseLottoType datiBase = null;

  @JsonProperty("datiBaseCPV")
  private DatiBaseCPVType datiBaseCPV = null;

  @JsonProperty("datiBaseContratto")
  private DatiBaseContrattoType datiBaseContratto = null;

  @JsonProperty("datiBaseAggiudicazione")
  private DatiBaseAggiudicazioneOptionalType datiBaseAggiudicazione = null;

  @JsonProperty("datiBaseAggiuntivi")
  private DatiBaseAggiuntiviType datiBaseAggiuntivi = null;

  @JsonProperty("datiBaseTerminiInvio")
  private DatiTerminiInvioType datiBaseTerminiInvio = null;

  @JsonProperty("datiBaseAccessibilita")
  private DatiBaseAccessibilitaType datiBaseAccessibilita = null;

  @JsonProperty("datiBaseDocumenti")
  private AllOfLottoP4BaseTypeDatiBaseDocumenti datiBaseDocumenti = null;

  public LottoP4BaseType servizioPubblicoLocale(Boolean servizioPubblicoLocale) {
    this.servizioPubblicoLocale = servizioPubblicoLocale;
    return this;
  }

   /**
   * Flag servizio pubblico locale
   * @return servizioPubblicoLocale
  **/
  @Schema(required = true, description = "Flag servizio pubblico locale")
  public Boolean isServizioPubblicoLocale() {
    return servizioPubblicoLocale;
  }

  public void setServizioPubblicoLocale(Boolean servizioPubblicoLocale) {
    this.servizioPubblicoLocale = servizioPubblicoLocale;
  }

  public LottoP4BaseType lotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
    return this;
  }

   /**
   * Id univoco del lotto generato dalla stazione appaltante
   * @return lotIdentifier
  **/
  @Schema(required = true, description = "Id univoco del lotto generato dalla stazione appaltante")
  public String getLotIdentifier() {
    return lotIdentifier;
  }

  public void setLotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
  }

  public LottoP4BaseType condizioniNegoziata(List<CondizioniNegoziataEnum> condizioniNegoziata) {
    this.condizioniNegoziata = condizioniNegoziata;
    return this;
  }

  public LottoP4BaseType addCondizioniNegoziataItem(CondizioniNegoziataEnum condizioniNegoziataItem) {
    if (this.condizioniNegoziata == null) {
      this.condizioniNegoziata = new ArrayList<>();
    }
    this.condizioniNegoziata.add(condizioniNegoziataItem);
    return this;
  }

   /**
   * Get condizioniNegoziata
   * @return condizioniNegoziata
  **/
  @Schema(description = "")
  public List<CondizioniNegoziataEnum> getCondizioniNegoziata() {
    return condizioniNegoziata;
  }

  public void setCondizioniNegoziata(List<CondizioniNegoziataEnum> condizioniNegoziata) {
    this.condizioniNegoziata = condizioniNegoziata;
  }

  public LottoP4BaseType codIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
    return this;
  }

   /**
   * Get codIstat
   * @return codIstat
  **/
  @Schema(required = true, description = "")
  public CodIstatEnum getCodIstat() {
    return codIstat;
  }

  public void setCodIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
  }

  public LottoP4BaseType contrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
    return this;
  }

   /**
   * Get contrattiDisposizioniParticolari
   * @return contrattiDisposizioniParticolari
  **/
  @Schema(required = true, description = "")
  public ContrattiDisposizioniParticolariEnum getContrattiDisposizioniParticolari() {
    return contrattiDisposizioniParticolari;
  }

  public void setContrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
  }

  public LottoP4BaseType lavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
    return this;
  }

   /**
   * Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione
   * @return lavoroOAcquistoPrevistoInProgrammazione
  **/
  @Schema(required = true, description = "Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione")
  public Boolean isLavoroOAcquistoPrevistoInProgrammazione() {
    return lavoroOAcquistoPrevistoInProgrammazione;
  }

  public void setLavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
  }

  public LottoP4BaseType cui(String cui) {
    this.cui = cui;
    return this;
  }

   /**
   * CUI programma triennale lavori pubblici o programma biennale forniture e servizi
   * @return cui
  **/
  @Schema(description = "CUI programma triennale lavori pubblici o programma biennale forniture e servizi")
  public String getCui() {
    return cui;
  }

  public void setCui(String cui) {
    this.cui = cui;
  }

  public LottoP4BaseType ipotesiCollegamento(IpotesiCollegamentoType ipotesiCollegamento) {
    this.ipotesiCollegamento = ipotesiCollegamento;
    return this;
  }

   /**
   * Get ipotesiCollegamento
   * @return ipotesiCollegamento
  **/
  @Schema(description = "")
  public IpotesiCollegamentoType getIpotesiCollegamento() {
    return ipotesiCollegamento;
  }

  public void setIpotesiCollegamento(IpotesiCollegamentoType ipotesiCollegamento) {
    this.ipotesiCollegamento = ipotesiCollegamento;
  }

  public LottoP4BaseType opzioniRinnovi(Boolean opzioniRinnovi) {
    this.opzioniRinnovi = opzioniRinnovi;
    return this;
  }

   /**
   * L’appalto prevede opzioni/rinnovi?
   * @return opzioniRinnovi
  **/
  @Schema(required = true, description = "L’appalto prevede opzioni/rinnovi?")
  public Boolean isOpzioniRinnovi() {
    return opzioniRinnovi;
  }

  public void setOpzioniRinnovi(Boolean opzioniRinnovi) {
    this.opzioniRinnovi = opzioniRinnovi;
  }

  public LottoP4BaseType afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

   /**
   * L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
  **/
  @Schema(required = true, description = "L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public LottoP4BaseType acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

   /**
   * Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
  **/
  @Schema(description = "Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public LottoP4BaseType cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public LottoP4BaseType addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

   /**
   * Cup associati al lotto
   * @return cupLotto
  **/
  @Schema(description = "Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public LottoP4BaseType paritaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
    return this;
  }

   /**
   * Get paritaDiGenereGenerazionale
   * @return paritaDiGenereGenerazionale
  **/
  @Schema(description = "")
  public ParitaDiGenereGenerazionaleType getParitaDiGenereGenerazionale() {
    return paritaDiGenereGenerazionale;
  }

  public void setParitaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
  }

  public LottoP4BaseType modalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
    return this;
  }

   /**
   * Get modalitaAcquisizione
   * @return modalitaAcquisizione
  **/
  @Schema(description = "")
  public ModalitaAcquisizioneEnum getModalitaAcquisizione() {
    return modalitaAcquisizione;
  }

  public void setModalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
  }

  public LottoP4BaseType tipologiaLavoro(List<TipologiaLavoroEnum> tipologiaLavoro) {
    this.tipologiaLavoro = tipologiaLavoro;
    return this;
  }

  public LottoP4BaseType addTipologiaLavoroItem(TipologiaLavoroEnum tipologiaLavoroItem) {
    if (this.tipologiaLavoro == null) {
      this.tipologiaLavoro = new ArrayList<>();
    }
    this.tipologiaLavoro.add(tipologiaLavoroItem);
    return this;
  }

   /**
   * Get tipologiaLavoro
   * @return tipologiaLavoro
  **/
  @Schema(description = "")
  public List<TipologiaLavoroEnum> getTipologiaLavoro() {
    return tipologiaLavoro;
  }

  public void setTipologiaLavoro(List<TipologiaLavoroEnum> tipologiaLavoro) {
    this.tipologiaLavoro = tipologiaLavoro;
  }

  public LottoP4BaseType categoria(CategoriaEnum categoria) {
    this.categoria = categoria;
    return this;
  }

   /**
   * Get categoria
   * @return categoria
  **/
  @Schema(required = true, description = "")
  public CategoriaEnum getCategoria() {
    return categoria;
  }

  public void setCategoria(CategoriaEnum categoria) {
    this.categoria = categoria;
  }

  public LottoP4BaseType categoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
    return this;
  }

  public LottoP4BaseType addCategoriaScorporabileItem(CategoriaEnum categoriaScorporabileItem) {
    if (this.categoriaScorporabile == null) {
      this.categoriaScorporabile = new ArrayList<>();
    }
    this.categoriaScorporabile.add(categoriaScorporabileItem);
    return this;
  }

   /**
   * Get categoriaScorporabile
   * @return categoriaScorporabile
  **/
  @Schema(description = "")
  public List<CategoriaEnum> getCategoriaScorporabile() {
    return categoriaScorporabile;
  }

  public void setCategoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
  }

  public LottoP4BaseType finanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
    return this;
  }

  public LottoP4BaseType addFinanziamentiItem(FinanziamentoType finanziamentiItem) {
    if (this.finanziamenti == null) {
      this.finanziamenti = new ArrayList<>();
    }
    this.finanziamenti.add(finanziamentiItem);
    return this;
  }

   /**
   * Dati relativi ai finanziamenti
   * @return finanziamenti
  **/
  @Schema(description = "Dati relativi ai finanziamenti")
  public List<FinanziamentoType> getFinanziamenti() {
    return finanziamenti;
  }

  public void setFinanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
  }

  public LottoP4BaseType datiBase(DatiBaseLottoType datiBase) {
    this.datiBase = datiBase;
    return this;
  }

   /**
   * Get datiBase
   * @return datiBase
  **/
  @Schema(required = true, description = "")
  public DatiBaseLottoType getDatiBase() {
    return datiBase;
  }

  public void setDatiBase(DatiBaseLottoType datiBase) {
    this.datiBase = datiBase;
  }

  public LottoP4BaseType datiBaseCPV(DatiBaseCPVType datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
    return this;
  }

   /**
   * Get datiBaseCPV
   * @return datiBaseCPV
  **/
  @Schema(required = true, description = "")
  public DatiBaseCPVType getDatiBaseCPV() {
    return datiBaseCPV;
  }

  public void setDatiBaseCPV(DatiBaseCPVType datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
  }

  public LottoP4BaseType datiBaseContratto(DatiBaseContrattoType datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
    return this;
  }

   /**
   * Get datiBaseContratto
   * @return datiBaseContratto
  **/
  @Schema(description = "")
  public DatiBaseContrattoType getDatiBaseContratto() {
    return datiBaseContratto;
  }

  public void setDatiBaseContratto(DatiBaseContrattoType datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
  }

  public LottoP4BaseType datiBaseAggiudicazione(DatiBaseAggiudicazioneOptionalType datiBaseAggiudicazione) {
    this.datiBaseAggiudicazione = datiBaseAggiudicazione;
    return this;
  }

   /**
   * Get datiBaseAggiudicazione
   * @return datiBaseAggiudicazione
  **/
  @Schema(description = "")
  public DatiBaseAggiudicazioneOptionalType getDatiBaseAggiudicazione() {
    return datiBaseAggiudicazione;
  }

  public void setDatiBaseAggiudicazione(DatiBaseAggiudicazioneOptionalType datiBaseAggiudicazione) {
    this.datiBaseAggiudicazione = datiBaseAggiudicazione;
  }

  public LottoP4BaseType datiBaseAggiuntivi(DatiBaseAggiuntiviType datiBaseAggiuntivi) {
    this.datiBaseAggiuntivi = datiBaseAggiuntivi;
    return this;
  }

   /**
   * Get datiBaseAggiuntivi
   * @return datiBaseAggiuntivi
  **/
  @Schema(description = "")
  public DatiBaseAggiuntiviType getDatiBaseAggiuntivi() {
    return datiBaseAggiuntivi;
  }

  public void setDatiBaseAggiuntivi(DatiBaseAggiuntiviType datiBaseAggiuntivi) {
    this.datiBaseAggiuntivi = datiBaseAggiuntivi;
  }

  public LottoP4BaseType datiBaseTerminiInvio(DatiTerminiInvioType datiBaseTerminiInvio) {
    this.datiBaseTerminiInvio = datiBaseTerminiInvio;
    return this;
  }

   /**
   * Get datiBaseTerminiInvio
   * @return datiBaseTerminiInvio
  **/
  @Schema(required = true, description = "")
  public DatiTerminiInvioType getDatiBaseTerminiInvio() {
    return datiBaseTerminiInvio;
  }

  public void setDatiBaseTerminiInvio(DatiTerminiInvioType datiBaseTerminiInvio) {
    this.datiBaseTerminiInvio = datiBaseTerminiInvio;
  }

  public LottoP4BaseType datiBaseAccessibilita(DatiBaseAccessibilitaType datiBaseAccessibilita) {
    this.datiBaseAccessibilita = datiBaseAccessibilita;
    return this;
  }

   /**
   * Get datiBaseAccessibilita
   * @return datiBaseAccessibilita
  **/
  @Schema(description = "")
  public DatiBaseAccessibilitaType getDatiBaseAccessibilita() {
    return datiBaseAccessibilita;
  }

  public void setDatiBaseAccessibilita(DatiBaseAccessibilitaType datiBaseAccessibilita) {
    this.datiBaseAccessibilita = datiBaseAccessibilita;
  }

  public LottoP4BaseType datiBaseDocumenti(AllOfLottoP4BaseTypeDatiBaseDocumenti datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
    return this;
  }

   /**
   * Get datiBaseDocumenti
   * @return datiBaseDocumenti
  **/
  @Schema(required = true, description = "")
  public AllOfLottoP4BaseTypeDatiBaseDocumenti getDatiBaseDocumenti() {
    return datiBaseDocumenti;
  }

  public void setDatiBaseDocumenti(AllOfLottoP4BaseTypeDatiBaseDocumenti datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoP4BaseType lottoP4BaseType = (LottoP4BaseType) o;
    return Objects.equals(this.servizioPubblicoLocale, lottoP4BaseType.servizioPubblicoLocale) &&
        Objects.equals(this.lotIdentifier, lottoP4BaseType.lotIdentifier) &&
        Objects.equals(this.condizioniNegoziata, lottoP4BaseType.condizioniNegoziata) &&
        Objects.equals(this.codIstat, lottoP4BaseType.codIstat) &&
        Objects.equals(this.contrattiDisposizioniParticolari, lottoP4BaseType.contrattiDisposizioniParticolari) &&
        Objects.equals(this.lavoroOAcquistoPrevistoInProgrammazione, lottoP4BaseType.lavoroOAcquistoPrevistoInProgrammazione) &&
        Objects.equals(this.cui, lottoP4BaseType.cui) &&
        Objects.equals(this.ipotesiCollegamento, lottoP4BaseType.ipotesiCollegamento) &&
        Objects.equals(this.opzioniRinnovi, lottoP4BaseType.opzioniRinnovi) &&
        Objects.equals(this.afferenteInvestimentiPNRR, lottoP4BaseType.afferenteInvestimentiPNRR) &&
        Objects.equals(this.acquisizioneCup, lottoP4BaseType.acquisizioneCup) &&
        Objects.equals(this.cupLotto, lottoP4BaseType.cupLotto) &&
        Objects.equals(this.paritaDiGenereGenerazionale, lottoP4BaseType.paritaDiGenereGenerazionale) &&
        Objects.equals(this.modalitaAcquisizione, lottoP4BaseType.modalitaAcquisizione) &&
        Objects.equals(this.tipologiaLavoro, lottoP4BaseType.tipologiaLavoro) &&
        Objects.equals(this.categoria, lottoP4BaseType.categoria) &&
        Objects.equals(this.categoriaScorporabile, lottoP4BaseType.categoriaScorporabile) &&
        Objects.equals(this.finanziamenti, lottoP4BaseType.finanziamenti) &&
        Objects.equals(this.datiBase, lottoP4BaseType.datiBase) &&
        Objects.equals(this.datiBaseCPV, lottoP4BaseType.datiBaseCPV) &&
        Objects.equals(this.datiBaseContratto, lottoP4BaseType.datiBaseContratto) &&
        Objects.equals(this.datiBaseAggiudicazione, lottoP4BaseType.datiBaseAggiudicazione) &&
        Objects.equals(this.datiBaseAggiuntivi, lottoP4BaseType.datiBaseAggiuntivi) &&
        Objects.equals(this.datiBaseTerminiInvio, lottoP4BaseType.datiBaseTerminiInvio) &&
        Objects.equals(this.datiBaseAccessibilita, lottoP4BaseType.datiBaseAccessibilita) &&
        Objects.equals(this.datiBaseDocumenti, lottoP4BaseType.datiBaseDocumenti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(servizioPubblicoLocale, lotIdentifier, condizioniNegoziata, codIstat, contrattiDisposizioniParticolari, lavoroOAcquistoPrevistoInProgrammazione, cui, ipotesiCollegamento, opzioniRinnovi, afferenteInvestimentiPNRR, acquisizioneCup, cupLotto, paritaDiGenereGenerazionale, modalitaAcquisizione, tipologiaLavoro, categoria, categoriaScorporabile, finanziamenti, datiBase, datiBaseCPV, datiBaseContratto, datiBaseAggiudicazione, datiBaseAggiuntivi, datiBaseTerminiInvio, datiBaseAccessibilita, datiBaseDocumenti);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoP4BaseType {\n");
    
    sb.append("    servizioPubblicoLocale: ").append(toIndentedString(servizioPubblicoLocale)).append("\n");
    sb.append("    lotIdentifier: ").append(toIndentedString(lotIdentifier)).append("\n");
    sb.append("    condizioniNegoziata: ").append(toIndentedString(condizioniNegoziata)).append("\n");
    sb.append("    codIstat: ").append(toIndentedString(codIstat)).append("\n");
    sb.append("    contrattiDisposizioniParticolari: ").append(toIndentedString(contrattiDisposizioniParticolari)).append("\n");
    sb.append("    lavoroOAcquistoPrevistoInProgrammazione: ").append(toIndentedString(lavoroOAcquistoPrevistoInProgrammazione)).append("\n");
    sb.append("    cui: ").append(toIndentedString(cui)).append("\n");
    sb.append("    ipotesiCollegamento: ").append(toIndentedString(ipotesiCollegamento)).append("\n");
    sb.append("    opzioniRinnovi: ").append(toIndentedString(opzioniRinnovi)).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    paritaDiGenereGenerazionale: ").append(toIndentedString(paritaDiGenereGenerazionale)).append("\n");
    sb.append("    modalitaAcquisizione: ").append(toIndentedString(modalitaAcquisizione)).append("\n");
    sb.append("    tipologiaLavoro: ").append(toIndentedString(tipologiaLavoro)).append("\n");
    sb.append("    categoria: ").append(toIndentedString(categoria)).append("\n");
    sb.append("    categoriaScorporabile: ").append(toIndentedString(categoriaScorporabile)).append("\n");
    sb.append("    finanziamenti: ").append(toIndentedString(finanziamenti)).append("\n");
    sb.append("    datiBase: ").append(toIndentedString(datiBase)).append("\n");
    sb.append("    datiBaseCPV: ").append(toIndentedString(datiBaseCPV)).append("\n");
    sb.append("    datiBaseContratto: ").append(toIndentedString(datiBaseContratto)).append("\n");
    sb.append("    datiBaseAggiudicazione: ").append(toIndentedString(datiBaseAggiudicazione)).append("\n");
    sb.append("    datiBaseAggiuntivi: ").append(toIndentedString(datiBaseAggiuntivi)).append("\n");
    sb.append("    datiBaseTerminiInvio: ").append(toIndentedString(datiBaseTerminiInvio)).append("\n");
    sb.append("    datiBaseAccessibilita: ").append(toIndentedString(datiBaseAccessibilita)).append("\n");
    sb.append("    datiBaseDocumenti: ").append(toIndentedString(datiBaseDocumenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
