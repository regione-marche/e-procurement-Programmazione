/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.AnacFormP119Type;
/**
 * Bando di concessione - direttiva sulle concessioni, regime ordinario, PPP. Articolo 31, paragrafo 1, della direttiva 2014/23/UE. Articolo 182 comma 11 primo periodo e comma 12 decreto legislativo 36/2023.
 */
@Schema(description = "Bando di concessione - direttiva sulle concessioni, regime ordinario, PPP. Articolo 31, paragrafo 1, della direttiva 2014/23/UE. Articolo 182 comma 11 primo periodo e comma 12 decreto legislativo 36/2023.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class SchedaP119Type implements OneOfSchedaComunicaAppaltoTypeBody {
  @JsonProperty("anacForm")
  private AnacFormP119Type anacForm = null;

  @JsonProperty("eform")
  private String eform = null;

  @JsonProperty("espd")
  private String espd = null;

  public SchedaP119Type anacForm(AnacFormP119Type anacForm) {
    this.anacForm = anacForm;
    return this;
  }

   /**
   * Get anacForm
   * @return anacForm
  **/
  @Schema(required = true, description = "")
  public AnacFormP119Type getAnacForm() {
    return anacForm;
  }

  public void setAnacForm(AnacFormP119Type anacForm) {
    this.anacForm = anacForm;
  }

  public SchedaP119Type eform(String eform) {
    this.eform = eform;
    return this;
  }

   /**
   * Get eform
   * @return eform
  **/
  @Schema(required = true, description = "")
  public String getEform() {
    return eform;
  }

  public void setEform(String eform) {
    this.eform = eform;
  }

  public SchedaP119Type espd(String espd) {
    this.espd = espd;
    return this;
  }

   /**
   * Get espd
   * @return espd
  **/
  @Schema(required = true, description = "")
  public String getEspd() {
    return espd;
  }

  public void setEspd(String espd) {
    this.espd = espd;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchedaP119Type schedaP119Type = (SchedaP119Type) o;
    return Objects.equals(this.anacForm, schedaP119Type.anacForm) &&
        Objects.equals(this.eform, schedaP119Type.eform) &&
        Objects.equals(this.espd, schedaP119Type.espd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anacForm, eform, espd);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchedaP119Type {\n");
    
    sb.append("    anacForm: ").append(toIndentedString(anacForm)).append("\n");
    sb.append("    eform: ").append(toIndentedString(eform)).append("\n");
    sb.append("    espd: ").append(toIndentedString(espd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
