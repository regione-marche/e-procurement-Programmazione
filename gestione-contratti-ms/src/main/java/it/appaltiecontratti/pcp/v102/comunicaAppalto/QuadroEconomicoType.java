/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Oggetto che riporta tutti i dati del quadro economico standard
 */
@Schema(description = "Oggetto che riporta tutti i dati del quadro economico standard")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class QuadroEconomicoType {
  @JsonProperty("impLavori")
  private Double impLavori = null;

  @JsonProperty("impServizi")
  private Double impServizi = null;

  @JsonProperty("impForniture")
  private Double impForniture = null;

  @JsonProperty("impTotaleSicurezza")
  private Double impTotaleSicurezza = null;

  @JsonProperty("ulterioriSommeNoRibasso")
  private Double ulterioriSommeNoRibasso = null;

  @JsonProperty("impProgettazione")
  private Double impProgettazione = null;

  @JsonProperty("sommeOpzioniRinnovi")
  private Double sommeOpzioniRinnovi = null;

  @JsonProperty("sommeRipetizioni")
  private Double sommeRipetizioni = null;

  @JsonProperty("sommeADisposizione")
  private Double sommeADisposizione = null;

  public QuadroEconomicoType impLavori(Double impLavori) {
    this.impLavori = impLavori;
    return this;
  }

   /**
   * Importo componente lavori in €
   * @return impLavori
  **/
  @Schema(description = "Importo componente lavori in €")
  public Double getImpLavori() {
    return impLavori;
  }

  public void setImpLavori(Double impLavori) {
    this.impLavori = impLavori;
  }

  public QuadroEconomicoType impServizi(Double impServizi) {
    this.impServizi = impServizi;
    return this;
  }

   /**
   * Importo componente servizi in €
   * @return impServizi
  **/
  @Schema(description = "Importo componente servizi in €")
  public Double getImpServizi() {
    return impServizi;
  }

  public void setImpServizi(Double impServizi) {
    this.impServizi = impServizi;
  }

  public QuadroEconomicoType impForniture(Double impForniture) {
    this.impForniture = impForniture;
    return this;
  }

   /**
   * Importo componente forniture in €
   * @return impForniture
  **/
  @Schema(description = "Importo componente forniture in €")
  public Double getImpForniture() {
    return impForniture;
  }

  public void setImpForniture(Double impForniture) {
    this.impForniture = impForniture;
  }

  public QuadroEconomicoType impTotaleSicurezza(Double impTotaleSicurezza) {
    this.impTotaleSicurezza = impTotaleSicurezza;
    return this;
  }

   /**
   * Importo totale per l&#x27;attuazione della sicurezza
   * @return impTotaleSicurezza
  **/
  @Schema(description = "Importo totale per l'attuazione della sicurezza")
  public Double getImpTotaleSicurezza() {
    return impTotaleSicurezza;
  }

  public void setImpTotaleSicurezza(Double impTotaleSicurezza) {
    this.impTotaleSicurezza = impTotaleSicurezza;
  }

  public QuadroEconomicoType ulterioriSommeNoRibasso(Double ulterioriSommeNoRibasso) {
    this.ulterioriSommeNoRibasso = ulterioriSommeNoRibasso;
    return this;
  }

   /**
   * Ulteriori somme non soggette a ribasso
   * @return ulterioriSommeNoRibasso
  **/
  @Schema(description = "Ulteriori somme non soggette a ribasso")
  public Double getUlterioriSommeNoRibasso() {
    return ulterioriSommeNoRibasso;
  }

  public void setUlterioriSommeNoRibasso(Double ulterioriSommeNoRibasso) {
    this.ulterioriSommeNoRibasso = ulterioriSommeNoRibasso;
  }

  public QuadroEconomicoType impProgettazione(Double impProgettazione) {
    this.impProgettazione = impProgettazione;
    return this;
  }

   /**
   * Importo della progettazione in caso di appalto integrato
   * @return impProgettazione
  **/
  @Schema(description = "Importo della progettazione in caso di appalto integrato")
  public Double getImpProgettazione() {
    return impProgettazione;
  }

  public void setImpProgettazione(Double impProgettazione) {
    this.impProgettazione = impProgettazione;
  }

  public QuadroEconomicoType sommeOpzioniRinnovi(Double sommeOpzioniRinnovi) {
    this.sommeOpzioniRinnovi = sommeOpzioniRinnovi;
    return this;
  }

   /**
   * Somme per opzioni/rinnovi
   * @return sommeOpzioniRinnovi
  **/
  @Schema(description = "Somme per opzioni/rinnovi")
  public Double getSommeOpzioniRinnovi() {
    return sommeOpzioniRinnovi;
  }

  public void setSommeOpzioniRinnovi(Double sommeOpzioniRinnovi) {
    this.sommeOpzioniRinnovi = sommeOpzioniRinnovi;
  }

  public QuadroEconomicoType sommeRipetizioni(Double sommeRipetizioni) {
    this.sommeRipetizioni = sommeRipetizioni;
    return this;
  }

   /**
   * Somme per ripetizione servizi/forniture/lavori analoghi e consegne complementari
   * @return sommeRipetizioni
  **/
  @Schema(description = "Somme per ripetizione servizi/forniture/lavori analoghi e consegne complementari")
  public Double getSommeRipetizioni() {
    return sommeRipetizioni;
  }

  public void setSommeRipetizioni(Double sommeRipetizioni) {
    this.sommeRipetizioni = sommeRipetizioni;
  }

  public QuadroEconomicoType sommeADisposizione(Double sommeADisposizione) {
    this.sommeADisposizione = sommeADisposizione;
    return this;
  }

   /**
   * Somme a disposizione - Iva e altre Imposte e tasse
   * @return sommeADisposizione
  **/
  @Schema(required = true, description = "Somme a disposizione - Iva e altre Imposte e tasse")
  public Double getSommeADisposizione() {
    return sommeADisposizione;
  }

  public void setSommeADisposizione(Double sommeADisposizione) {
    this.sommeADisposizione = sommeADisposizione;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuadroEconomicoType quadroEconomicoType = (QuadroEconomicoType) o;
    return Objects.equals(this.impLavori, quadroEconomicoType.impLavori) &&
        Objects.equals(this.impServizi, quadroEconomicoType.impServizi) &&
        Objects.equals(this.impForniture, quadroEconomicoType.impForniture) &&
        Objects.equals(this.impTotaleSicurezza, quadroEconomicoType.impTotaleSicurezza) &&
        Objects.equals(this.ulterioriSommeNoRibasso, quadroEconomicoType.ulterioriSommeNoRibasso) &&
        Objects.equals(this.impProgettazione, quadroEconomicoType.impProgettazione) &&
        Objects.equals(this.sommeOpzioniRinnovi, quadroEconomicoType.sommeOpzioniRinnovi) &&
        Objects.equals(this.sommeRipetizioni, quadroEconomicoType.sommeRipetizioni) &&
        Objects.equals(this.sommeADisposizione, quadroEconomicoType.sommeADisposizione);
  }

  @Override
  public int hashCode() {
    return Objects.hash(impLavori, impServizi, impForniture, impTotaleSicurezza, ulterioriSommeNoRibasso, impProgettazione, sommeOpzioniRinnovi, sommeRipetizioni, sommeADisposizione);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuadroEconomicoType {\n");
    
    sb.append("    impLavori: ").append(toIndentedString(impLavori)).append("\n");
    sb.append("    impServizi: ").append(toIndentedString(impServizi)).append("\n");
    sb.append("    impForniture: ").append(toIndentedString(impForniture)).append("\n");
    sb.append("    impTotaleSicurezza: ").append(toIndentedString(impTotaleSicurezza)).append("\n");
    sb.append("    ulterioriSommeNoRibasso: ").append(toIndentedString(ulterioriSommeNoRibasso)).append("\n");
    sb.append("    impProgettazione: ").append(toIndentedString(impProgettazione)).append("\n");
    sb.append("    sommeOpzioniRinnovi: ").append(toIndentedString(sommeOpzioniRinnovi)).append("\n");
    sb.append("    sommeRipetizioni: ").append(toIndentedString(sommeRipetizioni)).append("\n");
    sb.append("    sommeADisposizione: ").append(toIndentedString(sommeADisposizione)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
