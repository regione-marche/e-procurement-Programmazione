/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.AppaltoBaseType1;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CategorieMerceologicheEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.MotivazioneCIGEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.MotivoUrgenzaEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.StrumentiSvolgimentoProcedureEnum;
import java.util.List;
import java.util.UUID;
/**
 * Oggetto che riporta i dati dell&#x27;appalto all&#x27;interno della fase di pubblicazione sopra soglia e sotto soglia
 */
@Schema(description = "Oggetto che riporta i dati dell'appalto all'interno della fase di pubblicazione sopra soglia e sotto soglia")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class AppaltoP11Type extends AppaltoBaseType1 {
  @JsonProperty("motivoUrgenza")
  private MotivoUrgenzaEnum motivoUrgenza = null;

  @JsonProperty("linkDocumenti")
  private String linkDocumenti = null;

  public AppaltoP11Type motivoUrgenza(MotivoUrgenzaEnum motivoUrgenza) {
    this.motivoUrgenza = motivoUrgenza;
    return this;
  }

   /**
   * Get motivoUrgenza
   * @return motivoUrgenza
  **/
  @Schema(required = true, description = "")
  public MotivoUrgenzaEnum getMotivoUrgenza() {
    return motivoUrgenza;
  }

  public void setMotivoUrgenza(MotivoUrgenzaEnum motivoUrgenza) {
    this.motivoUrgenza = motivoUrgenza;
  }

  public AppaltoP11Type linkDocumenti(String linkDocumenti) {
    this.linkDocumenti = linkDocumenti;
    return this;
  }

   /**
   * Link ai documenti relativi all’affidamento diretto in somma urgenza e protezione civile (co 10, art 140 nuovo codice)
   * @return linkDocumenti
  **/
  @Schema(description = "Link ai documenti relativi all’affidamento diretto in somma urgenza e protezione civile (co 10, art 140 nuovo codice)")
  public String getLinkDocumenti() {
    return linkDocumenti;
  }

  public void setLinkDocumenti(String linkDocumenti) {
    this.linkDocumenti = linkDocumenti;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppaltoP11Type appaltoP11Type = (AppaltoP11Type) o;
    return Objects.equals(this.motivoUrgenza, appaltoP11Type.motivoUrgenza) &&
        Objects.equals(this.linkDocumenti, appaltoP11Type.linkDocumenti) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(motivoUrgenza, linkDocumenti, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppaltoP11Type {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    motivoUrgenza: ").append(toIndentedString(motivoUrgenza)).append("\n");
    sb.append("    linkDocumenti: ").append(toIndentedString(linkDocumenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
