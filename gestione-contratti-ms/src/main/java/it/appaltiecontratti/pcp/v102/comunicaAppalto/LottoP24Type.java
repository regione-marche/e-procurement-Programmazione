/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v102.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.ContrattiDisposizioniParticolariEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.FinanziamentoType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.MotivoEsclusioneOrdinarioSpecialeEnum;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoConcorsiProgettazioneType;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto all&#x27;interno della fase di pubblicazione sopra soglia e sotto soglia
 */
@Schema(description = "Oggetto che riporta i dati del lotto all'interno della fase di pubblicazione sopra soglia e sotto soglia")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-23T10:13:15.678079400+02:00[Europe/Berlin]")

public class LottoP24Type {
  @JsonProperty("lotIdentifier")
  private String lotIdentifier = null;

  @JsonProperty("codIstat")
  private CodIstatEnum codIstat = null;

  @JsonProperty("lavoroOAcquistoPrevistoInProgrammazione")
  private Boolean lavoroOAcquistoPrevistoInProgrammazione = null;

  @JsonProperty("cui")
  private String cui = null;

  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("motivoEsclusioneOrdinarioSpeciale")
  private MotivoEsclusioneOrdinarioSpecialeEnum motivoEsclusioneOrdinarioSpeciale = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("contrattiDisposizioniParticolari")
  private ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari = null;

  @JsonProperty("finanziamenti")
  private List<FinanziamentoType> finanziamenti = null;

  @JsonProperty("quadroEconomicoConcorsiProgettazione")
  private QuadroEconomicoConcorsiProgettazioneType quadroEconomicoConcorsiProgettazione = null;

  public LottoP24Type lotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
    return this;
  }

   /**
   * Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED
   * @return lotIdentifier
  **/
  @Schema(required = true, description = "Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED")
  public String getLotIdentifier() {
    return lotIdentifier;
  }

  public void setLotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
  }

  public LottoP24Type codIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
    return this;
  }

   /**
   * Get codIstat
   * @return codIstat
  **/
  @Schema(required = true, description = "")
  public CodIstatEnum getCodIstat() {
    return codIstat;
  }

  public void setCodIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
  }

  public LottoP24Type lavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
    return this;
  }

   /**
   * Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione
   * @return lavoroOAcquistoPrevistoInProgrammazione
  **/
  @Schema(description = "Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione")
  public Boolean isLavoroOAcquistoPrevistoInProgrammazione() {
    return lavoroOAcquistoPrevistoInProgrammazione;
  }

  public void setLavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
  }

  public LottoP24Type cui(String cui) {
    this.cui = cui;
    return this;
  }

   /**
   * CUI programma triennale lavori pubblici o programma biennale forniture e servizi
   * @return cui
  **/
  @Schema(description = "CUI programma triennale lavori pubblici o programma biennale forniture e servizi")
  public String getCui() {
    return cui;
  }

  public void setCui(String cui) {
    this.cui = cui;
  }

  public LottoP24Type afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

   /**
   * L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
  **/
  @Schema(required = true, description = "L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public LottoP24Type motivoEsclusioneOrdinarioSpeciale(MotivoEsclusioneOrdinarioSpecialeEnum motivoEsclusioneOrdinarioSpeciale) {
    this.motivoEsclusioneOrdinarioSpeciale = motivoEsclusioneOrdinarioSpeciale;
    return this;
  }

   /**
   * Get motivoEsclusioneOrdinarioSpeciale
   * @return motivoEsclusioneOrdinarioSpeciale
  **/
  @Schema(description = "")
  public MotivoEsclusioneOrdinarioSpecialeEnum getMotivoEsclusioneOrdinarioSpeciale() {
    return motivoEsclusioneOrdinarioSpeciale;
  }

  public void setMotivoEsclusioneOrdinarioSpeciale(MotivoEsclusioneOrdinarioSpecialeEnum motivoEsclusioneOrdinarioSpeciale) {
    this.motivoEsclusioneOrdinarioSpeciale = motivoEsclusioneOrdinarioSpeciale;
  }

  public LottoP24Type acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

   /**
   * Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
  **/
  @Schema(required = true, description = "Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public LottoP24Type cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public LottoP24Type addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

   /**
   * Cup associati al lotto
   * @return cupLotto
  **/
  @Schema(description = "Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public LottoP24Type contrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
    return this;
  }

   /**
   * Get contrattiDisposizioniParticolari
   * @return contrattiDisposizioniParticolari
  **/
  @Schema(required = true, description = "")
  public ContrattiDisposizioniParticolariEnum getContrattiDisposizioniParticolari() {
    return contrattiDisposizioniParticolari;
  }

  public void setContrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
  }

  public LottoP24Type finanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
    return this;
  }

  public LottoP24Type addFinanziamentiItem(FinanziamentoType finanziamentiItem) {
    if (this.finanziamenti == null) {
      this.finanziamenti = new ArrayList<>();
    }
    this.finanziamenti.add(finanziamentiItem);
    return this;
  }

   /**
   * Dati relativi ai finanziamenti
   * @return finanziamenti
  **/
  @Schema(description = "Dati relativi ai finanziamenti")
  public List<FinanziamentoType> getFinanziamenti() {
    return finanziamenti;
  }

  public void setFinanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
  }

  public LottoP24Type quadroEconomicoConcorsiProgettazione(QuadroEconomicoConcorsiProgettazioneType quadroEconomicoConcorsiProgettazione) {
    this.quadroEconomicoConcorsiProgettazione = quadroEconomicoConcorsiProgettazione;
    return this;
  }

   /**
   * Get quadroEconomicoConcorsiProgettazione
   * @return quadroEconomicoConcorsiProgettazione
  **/
  @Schema(description = "")
  public QuadroEconomicoConcorsiProgettazioneType getQuadroEconomicoConcorsiProgettazione() {
    return quadroEconomicoConcorsiProgettazione;
  }

  public void setQuadroEconomicoConcorsiProgettazione(QuadroEconomicoConcorsiProgettazioneType quadroEconomicoConcorsiProgettazione) {
    this.quadroEconomicoConcorsiProgettazione = quadroEconomicoConcorsiProgettazione;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoP24Type lottoP24Type = (LottoP24Type) o;
    return Objects.equals(this.lotIdentifier, lottoP24Type.lotIdentifier) &&
        Objects.equals(this.codIstat, lottoP24Type.codIstat) &&
        Objects.equals(this.lavoroOAcquistoPrevistoInProgrammazione, lottoP24Type.lavoroOAcquistoPrevistoInProgrammazione) &&
        Objects.equals(this.cui, lottoP24Type.cui) &&
        Objects.equals(this.afferenteInvestimentiPNRR, lottoP24Type.afferenteInvestimentiPNRR) &&
        Objects.equals(this.motivoEsclusioneOrdinarioSpeciale, lottoP24Type.motivoEsclusioneOrdinarioSpeciale) &&
        Objects.equals(this.acquisizioneCup, lottoP24Type.acquisizioneCup) &&
        Objects.equals(this.cupLotto, lottoP24Type.cupLotto) &&
        Objects.equals(this.contrattiDisposizioniParticolari, lottoP24Type.contrattiDisposizioniParticolari) &&
        Objects.equals(this.finanziamenti, lottoP24Type.finanziamenti) &&
        Objects.equals(this.quadroEconomicoConcorsiProgettazione, lottoP24Type.quadroEconomicoConcorsiProgettazione);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotIdentifier, codIstat, lavoroOAcquistoPrevistoInProgrammazione, cui, afferenteInvestimentiPNRR, motivoEsclusioneOrdinarioSpeciale, acquisizioneCup, cupLotto, contrattiDisposizioniParticolari, finanziamenti, quadroEconomicoConcorsiProgettazione);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoP24Type {\n");
    
    sb.append("    lotIdentifier: ").append(toIndentedString(lotIdentifier)).append("\n");
    sb.append("    codIstat: ").append(toIndentedString(codIstat)).append("\n");
    sb.append("    lavoroOAcquistoPrevistoInProgrammazione: ").append(toIndentedString(lavoroOAcquistoPrevistoInProgrammazione)).append("\n");
    sb.append("    cui: ").append(toIndentedString(cui)).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    motivoEsclusioneOrdinarioSpeciale: ").append(toIndentedString(motivoEsclusioneOrdinarioSpeciale)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    contrattiDisposizioniParticolari: ").append(toIndentedString(contrattiDisposizioniParticolari)).append("\n");
    sb.append("    finanziamenti: ").append(toIndentedString(finanziamenti)).append("\n");
    sb.append("    quadroEconomicoConcorsiProgettazione: ").append(toIndentedString(quadroEconomicoConcorsiProgettazione)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
