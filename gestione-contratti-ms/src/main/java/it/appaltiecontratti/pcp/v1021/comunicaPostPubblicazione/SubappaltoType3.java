/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.2
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione.MotivoMancataEsecuzioneSubappaltoEnum;
import java.time.OffsetDateTime;
/**
 * Dati relativi ai subappalti
 */
@Schema(description = "Dati relativi ai subappalti")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-02-25T11:43:52.162087800+01:00[Europe/Rome]")

public class SubappaltoType3 {
  @JsonProperty("importoEffettivo")
  private Double importoEffettivo = null;

  @JsonProperty("dataUltimazione")
  private OffsetDateTime dataUltimazione = null;

  @JsonProperty("motivoMancataEsecuzioneSubappalto")
  private MotivoMancataEsecuzioneSubappaltoEnum motivoMancataEsecuzioneSubappalto = null;

  public SubappaltoType3 importoEffettivo(Double importoEffettivo) {
    this.importoEffettivo = importoEffettivo;
    return this;
  }

   /**
   * Importo effettivo Lavoro/ Servizio/Fornitura, subappalto
   * @return importoEffettivo
  **/
  @Schema(required = true, description = "Importo effettivo Lavoro/ Servizio/Fornitura, subappalto")
  public Double getImportoEffettivo() {
    return importoEffettivo;
  }

  public void setImportoEffettivo(Double importoEffettivo) {
    this.importoEffettivo = importoEffettivo;
  }

  public SubappaltoType3 dataUltimazione(OffsetDateTime dataUltimazione) {
    this.dataUltimazione = dataUltimazione;
    return this;
  }

   /**
   * Termine di ultimazione della prestazione di subappalto
   * @return dataUltimazione
  **/
  @Schema(required = true, description = "Termine di ultimazione della prestazione di subappalto")
  public OffsetDateTime getDataUltimazione() {
    return dataUltimazione;
  }

  public void setDataUltimazione(OffsetDateTime dataUltimazione) {
    this.dataUltimazione = dataUltimazione;
  }

  public SubappaltoType3 motivoMancataEsecuzioneSubappalto(MotivoMancataEsecuzioneSubappaltoEnum motivoMancataEsecuzioneSubappalto) {
    this.motivoMancataEsecuzioneSubappalto = motivoMancataEsecuzioneSubappalto;
    return this;
  }

   /**
   * Get motivoMancataEsecuzioneSubappalto
   * @return motivoMancataEsecuzioneSubappalto
  **/
  @Schema(description = "")
  public MotivoMancataEsecuzioneSubappaltoEnum getMotivoMancataEsecuzioneSubappalto() {
    return motivoMancataEsecuzioneSubappalto;
  }

  public void setMotivoMancataEsecuzioneSubappalto(MotivoMancataEsecuzioneSubappaltoEnum motivoMancataEsecuzioneSubappalto) {
    this.motivoMancataEsecuzioneSubappalto = motivoMancataEsecuzioneSubappalto;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubappaltoType3 subappaltoType3 = (SubappaltoType3) o;
    return Objects.equals(this.importoEffettivo, subappaltoType3.importoEffettivo) &&
        Objects.equals(this.dataUltimazione, subappaltoType3.dataUltimazione) &&
        Objects.equals(this.motivoMancataEsecuzioneSubappalto, subappaltoType3.motivoMancataEsecuzioneSubappalto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importoEffettivo, dataUltimazione, motivoMancataEsecuzioneSubappalto);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubappaltoType3 {\n");
    
    sb.append("    importoEffettivo: ").append(toIndentedString(importoEffettivo)).append("\n");
    sb.append("    dataUltimazione: ").append(toIndentedString(dataUltimazione)).append("\n");
    sb.append("    motivoMancataEsecuzioneSubappalto: ").append(toIndentedString(motivoMancataEsecuzioneSubappalto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
