/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.FinanziamentoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ModalitaAcquisizioneEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.TipologiaLavoroEnum;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto
 */
@Schema(description = "Oggetto che riporta i dati del lotto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-25T10:09:50.369647700+02:00[Europe/Rome]")

public class LottoP3BaseType {
  @JsonProperty("lotIdentifier")
  private String lotIdentifier = null;

  @JsonProperty("codIstat")
  private CodIstatEnum codIstat = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("modalitaAcquisizione")
  private ModalitaAcquisizioneEnum modalitaAcquisizione = null;

  @JsonProperty("tipologiaLavoro")
  private List<TipologiaLavoroEnum> tipologiaLavoro = null;

  @JsonProperty("paritaDiGenereGenerazionale")
  private ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale = null;

  @JsonProperty("finanziamenti")
  private List<FinanziamentoType> finanziamenti = new ArrayList<>();

  public LottoP3BaseType lotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
    return this;
  }

   /**
   * Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED
   * @return lotIdentifier
  **/
  @Schema(required = true, description = "Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED")
  public String getLotIdentifier() {
    return lotIdentifier;
  }

  public void setLotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
  }

  public LottoP3BaseType codIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
    return this;
  }

   /**
   * Get codIstat
   * @return codIstat
  **/
  @Schema(required = true, description = "")
  public CodIstatEnum getCodIstat() {
    return codIstat;
  }

  public void setCodIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
  }

  public LottoP3BaseType acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

   /**
   * Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
  **/
  @Schema(description = "Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public LottoP3BaseType cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public LottoP3BaseType addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

   /**
   * Cup associati al lotto
   * @return cupLotto
  **/
  @Schema(description = "Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public LottoP3BaseType modalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
    return this;
  }

   /**
   * Get modalitaAcquisizione
   * @return modalitaAcquisizione
  **/
  @Schema(description = "")
  public ModalitaAcquisizioneEnum getModalitaAcquisizione() {
    return modalitaAcquisizione;
  }

  public void setModalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
  }

  public LottoP3BaseType tipologiaLavoro(List<TipologiaLavoroEnum> tipologiaLavoro) {
    this.tipologiaLavoro = tipologiaLavoro;
    return this;
  }

  public LottoP3BaseType addTipologiaLavoroItem(TipologiaLavoroEnum tipologiaLavoroItem) {
    if (this.tipologiaLavoro == null) {
      this.tipologiaLavoro = new ArrayList<>();
    }
    this.tipologiaLavoro.add(tipologiaLavoroItem);
    return this;
  }

   /**
   * Get tipologiaLavoro
   * @return tipologiaLavoro
  **/
  @Schema(description = "")
  public List<TipologiaLavoroEnum> getTipologiaLavoro() {
    return tipologiaLavoro;
  }

  public void setTipologiaLavoro(List<TipologiaLavoroEnum> tipologiaLavoro) {
    this.tipologiaLavoro = tipologiaLavoro;
  }

  public LottoP3BaseType paritaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
    return this;
  }

   /**
   * Get paritaDiGenereGenerazionale
   * @return paritaDiGenereGenerazionale
  **/
  @Schema(description = "")
  public ParitaDiGenereGenerazionaleType getParitaDiGenereGenerazionale() {
    return paritaDiGenereGenerazionale;
  }

  public void setParitaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
  }

  public LottoP3BaseType finanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
    return this;
  }

  public LottoP3BaseType addFinanziamentiItem(FinanziamentoType finanziamentiItem) {
    this.finanziamenti.add(finanziamentiItem);
    return this;
  }

   /**
   * Dati relativi ai finanziamenti
   * @return finanziamenti
  **/
  @Schema(required = true, description = "Dati relativi ai finanziamenti")
  public List<FinanziamentoType> getFinanziamenti() {
    return finanziamenti;
  }

  public void setFinanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoP3BaseType lottoP3BaseType = (LottoP3BaseType) o;
    return Objects.equals(this.lotIdentifier, lottoP3BaseType.lotIdentifier) &&
        Objects.equals(this.codIstat, lottoP3BaseType.codIstat) &&
        Objects.equals(this.acquisizioneCup, lottoP3BaseType.acquisizioneCup) &&
        Objects.equals(this.cupLotto, lottoP3BaseType.cupLotto) &&
        Objects.equals(this.modalitaAcquisizione, lottoP3BaseType.modalitaAcquisizione) &&
        Objects.equals(this.tipologiaLavoro, lottoP3BaseType.tipologiaLavoro) &&
        Objects.equals(this.paritaDiGenereGenerazionale, lottoP3BaseType.paritaDiGenereGenerazionale) &&
        Objects.equals(this.finanziamenti, lottoP3BaseType.finanziamenti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotIdentifier, codIstat, acquisizioneCup, cupLotto, modalitaAcquisizione, tipologiaLavoro, paritaDiGenereGenerazionale, finanziamenti);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoP3BaseType {\n");
    
    sb.append("    lotIdentifier: ").append(toIndentedString(lotIdentifier)).append("\n");
    sb.append("    codIstat: ").append(toIndentedString(codIstat)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    modalitaAcquisizione: ").append(toIndentedString(modalitaAcquisizione)).append("\n");
    sb.append("    tipologiaLavoro: ").append(toIndentedString(tipologiaLavoro)).append("\n");
    sb.append("    paritaDiGenereGenerazionale: ").append(toIndentedString(paritaDiGenereGenerazionale)).append("\n");
    sb.append("    finanziamenti: ").append(toIndentedString(finanziamenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
