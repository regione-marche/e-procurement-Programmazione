/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CategorieMerceologicheEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CondizioniNegoziataEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ContrattiDisposizioniParticolariEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.FinanziamentoType;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto all&#x27;interno della fase di pubblicazione
 */
@Schema(description = "Oggetto che riporta i dati del lotto all'interno della fase di pubblicazione")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-25T10:09:50.369647700+02:00[Europe/Rome]")

public class LottoBaseType {
  @JsonProperty("lotIdentifier")
  private String lotIdentifier = null;

  @JsonProperty("categorieMerceologiche")
  private List<CategorieMerceologicheEnum> categorieMerceologiche = new ArrayList<>();

  @JsonProperty("condizioniNegoziata")
  private List<CondizioniNegoziataEnum> condizioniNegoziata = null;

  @JsonProperty("contrattiDisposizioniParticolari")
  private ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari = null;

  @JsonProperty("codIstat")
  private CodIstatEnum codIstat = null;

  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("finanziamenti")
  private List<FinanziamentoType> finanziamenti = new ArrayList<>();

  public LottoBaseType lotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
    return this;
  }

   /**
   * Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED
   * @return lotIdentifier
  **/
  @Schema(required = true, description = "Id univoco del lotto generato dalla stazione appaltante - nei casi in cui la scheda preveda un eform, corrisponde al campo bt-137 - Purpose Lot Identifier del TED")
  public String getLotIdentifier() {
    return lotIdentifier;
  }

  public void setLotIdentifier(String lotIdentifier) {
    this.lotIdentifier = lotIdentifier;
  }

  public LottoBaseType categorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
    return this;
  }

  public LottoBaseType addCategorieMerceologicheItem(CategorieMerceologicheEnum categorieMerceologicheItem) {
    this.categorieMerceologiche.add(categorieMerceologicheItem);
    return this;
  }

   /**
   * Get categorieMerceologiche
   * @return categorieMerceologiche
  **/
  @Schema(required = true, description = "")
  public List<CategorieMerceologicheEnum> getCategorieMerceologiche() {
    return categorieMerceologiche;
  }

  public void setCategorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
  }

  public LottoBaseType condizioniNegoziata(List<CondizioniNegoziataEnum> condizioniNegoziata) {
    this.condizioniNegoziata = condizioniNegoziata;
    return this;
  }

  public LottoBaseType addCondizioniNegoziataItem(CondizioniNegoziataEnum condizioniNegoziataItem) {
    if (this.condizioniNegoziata == null) {
      this.condizioniNegoziata = new ArrayList<>();
    }
    this.condizioniNegoziata.add(condizioniNegoziataItem);
    return this;
  }

   /**
   * Get condizioniNegoziata
   * @return condizioniNegoziata
  **/
  @Schema(description = "")
  public List<CondizioniNegoziataEnum> getCondizioniNegoziata() {
    return condizioniNegoziata;
  }

  public void setCondizioniNegoziata(List<CondizioniNegoziataEnum> condizioniNegoziata) {
    this.condizioniNegoziata = condizioniNegoziata;
  }

  public LottoBaseType contrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
    return this;
  }

   /**
   * Get contrattiDisposizioniParticolari
   * @return contrattiDisposizioniParticolari
  **/
  @Schema(required = true, description = "")
  public ContrattiDisposizioniParticolariEnum getContrattiDisposizioniParticolari() {
    return contrattiDisposizioniParticolari;
  }

  public void setContrattiDisposizioniParticolari(ContrattiDisposizioniParticolariEnum contrattiDisposizioniParticolari) {
    this.contrattiDisposizioniParticolari = contrattiDisposizioniParticolari;
  }

  public LottoBaseType codIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
    return this;
  }

   /**
   * Get codIstat
   * @return codIstat
  **/
  @Schema(required = true, description = "")
  public CodIstatEnum getCodIstat() {
    return codIstat;
  }

  public void setCodIstat(CodIstatEnum codIstat) {
    this.codIstat = codIstat;
  }

  public LottoBaseType afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

   /**
   * L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
  **/
  @Schema(required = true, description = "L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public LottoBaseType acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

   /**
   * Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
  **/
  @Schema(description = "Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public LottoBaseType cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public LottoBaseType addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

   /**
   * Cup associati al lotto
   * @return cupLotto
  **/
  @Schema(description = "Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public LottoBaseType finanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
    return this;
  }

  public LottoBaseType addFinanziamentiItem(FinanziamentoType finanziamentiItem) {
    this.finanziamenti.add(finanziamentiItem);
    return this;
  }

   /**
   * Dati relativi ai finanziamenti
   * @return finanziamenti
  **/
  @Schema(required = true, description = "Dati relativi ai finanziamenti")
  public List<FinanziamentoType> getFinanziamenti() {
    return finanziamenti;
  }

  public void setFinanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoBaseType lottoBaseType = (LottoBaseType) o;
    return Objects.equals(this.lotIdentifier, lottoBaseType.lotIdentifier) &&
        Objects.equals(this.categorieMerceologiche, lottoBaseType.categorieMerceologiche) &&
        Objects.equals(this.condizioniNegoziata, lottoBaseType.condizioniNegoziata) &&
        Objects.equals(this.contrattiDisposizioniParticolari, lottoBaseType.contrattiDisposizioniParticolari) &&
        Objects.equals(this.codIstat, lottoBaseType.codIstat) &&
        Objects.equals(this.afferenteInvestimentiPNRR, lottoBaseType.afferenteInvestimentiPNRR) &&
        Objects.equals(this.acquisizioneCup, lottoBaseType.acquisizioneCup) &&
        Objects.equals(this.cupLotto, lottoBaseType.cupLotto) &&
        Objects.equals(this.finanziamenti, lottoBaseType.finanziamenti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotIdentifier, categorieMerceologiche, condizioniNegoziata, contrattiDisposizioniParticolari, codIstat, afferenteInvestimentiPNRR, acquisizioneCup, cupLotto, finanziamenti);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoBaseType {\n");
    
    sb.append("    lotIdentifier: ").append(toIndentedString(lotIdentifier)).append("\n");
    sb.append("    categorieMerceologiche: ").append(toIndentedString(categorieMerceologiche)).append("\n");
    sb.append("    condizioniNegoziata: ").append(toIndentedString(condizioniNegoziata)).append("\n");
    sb.append("    contrattiDisposizioniParticolari: ").append(toIndentedString(contrattiDisposizioniParticolari)).append("\n");
    sb.append("    codIstat: ").append(toIndentedString(codIstat)).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    finanziamenti: ").append(toIndentedString(finanziamenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
