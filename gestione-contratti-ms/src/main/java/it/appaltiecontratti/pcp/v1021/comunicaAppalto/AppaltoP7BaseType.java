/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CategorieMerceologicheEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseAppaltoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseProceduraType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseStrumentiProceduraP7Type;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.MotivazioneCIGEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.MotivoUrgenzaEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.StrumentiSvolgimentoProcedureEnum;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
/**
 * Oggetto che riporta i dati dell&#x27;appalto
 */
@Schema(description = "Oggetto che riporta i dati dell'appalto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-25T10:09:50.369647700+02:00[Europe/Rome]")

public class AppaltoP7BaseType {
  @JsonProperty("codiceAppalto")
  private String codiceAppalto = null;

  @JsonProperty("idPianificazione")
  private UUID idPianificazione = null;

  @JsonProperty("termineRidottoAvvisoPreinformazione")
  private Boolean termineRidottoAvvisoPreinformazione = null;

  @JsonProperty("categorieMerceologiche")
  private List<CategorieMerceologicheEnum> categorieMerceologiche = new ArrayList<>();

  @JsonProperty("motivazioneCIG")
  private MotivazioneCIGEnum motivazioneCIG = null;

  @JsonProperty("strumentiSvolgimentoProcedure")
  private StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure = null;

  @JsonProperty("motivoUrgenza")
  private MotivoUrgenzaEnum motivoUrgenza = null;

  @JsonProperty("linkDocumenti")
  private String linkDocumenti = null;

  @JsonProperty("datiBase")
  private DatiBaseAppaltoType datiBase = null;

  @JsonProperty("datiBaseProcedura")
  private DatiBaseProceduraType datiBaseProcedura = null;

  @JsonProperty("datiBaseStrumentiProcedura")
  private DatiBaseStrumentiProceduraP7Type datiBaseStrumentiProcedura = null;

  public AppaltoP7BaseType codiceAppalto(String codiceAppalto) {
    this.codiceAppalto = codiceAppalto;
    return this;
  }

   /**
   * Identificativo univoco dell&#x27;appalto definito dalla Stazione Appaltante
   * @return codiceAppalto
  **/
  @Schema(required = true, description = "Identificativo univoco dell'appalto definito dalla Stazione Appaltante")
  public String getCodiceAppalto() {
    return codiceAppalto;
  }

  public void setCodiceAppalto(String codiceAppalto) {
    this.codiceAppalto = codiceAppalto;
  }

  public AppaltoP7BaseType idPianificazione(UUID idPianificazione) {
    this.idPianificazione = idPianificazione;
    return this;
  }

   /**
   * ID pianificazione
   * @return idPianificazione
  **/
  @Schema(description = "ID pianificazione")
  public UUID getIdPianificazione() {
    return idPianificazione;
  }

  public void setIdPianificazione(UUID idPianificazione) {
    this.idPianificazione = idPianificazione;
  }

  public AppaltoP7BaseType termineRidottoAvvisoPreinformazione(Boolean termineRidottoAvvisoPreinformazione) {
    this.termineRidottoAvvisoPreinformazione = termineRidottoAvvisoPreinformazione;
    return this;
  }

   /**
   * E&#x27; stato utilizzato un termine ridotto con avviso di preinformazione?
   * @return termineRidottoAvvisoPreinformazione
  **/
  @Schema(description = "E' stato utilizzato un termine ridotto con avviso di preinformazione?")
  public Boolean isTermineRidottoAvvisoPreinformazione() {
    return termineRidottoAvvisoPreinformazione;
  }

  public void setTermineRidottoAvvisoPreinformazione(Boolean termineRidottoAvvisoPreinformazione) {
    this.termineRidottoAvvisoPreinformazione = termineRidottoAvvisoPreinformazione;
  }

  public AppaltoP7BaseType categorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
    return this;
  }

  public AppaltoP7BaseType addCategorieMerceologicheItem(CategorieMerceologicheEnum categorieMerceologicheItem) {
    this.categorieMerceologiche.add(categorieMerceologicheItem);
    return this;
  }

   /**
   * Get categorieMerceologiche
   * @return categorieMerceologiche
  **/
  @Schema(required = true, description = "")
  public List<CategorieMerceologicheEnum> getCategorieMerceologiche() {
    return categorieMerceologiche;
  }

  public void setCategorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
  }

  public AppaltoP7BaseType motivazioneCIG(MotivazioneCIGEnum motivazioneCIG) {
    this.motivazioneCIG = motivazioneCIG;
    return this;
  }

   /**
   * Get motivazioneCIG
   * @return motivazioneCIG
  **/
  @Schema(description = "")
  public MotivazioneCIGEnum getMotivazioneCIG() {
    return motivazioneCIG;
  }

  public void setMotivazioneCIG(MotivazioneCIGEnum motivazioneCIG) {
    this.motivazioneCIG = motivazioneCIG;
  }

  public AppaltoP7BaseType strumentiSvolgimentoProcedure(StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure) {
    this.strumentiSvolgimentoProcedure = strumentiSvolgimentoProcedure;
    return this;
  }

   /**
   * Get strumentiSvolgimentoProcedure
   * @return strumentiSvolgimentoProcedure
  **/
  @Schema(required = true, description = "")
  public StrumentiSvolgimentoProcedureEnum getStrumentiSvolgimentoProcedure() {
    return strumentiSvolgimentoProcedure;
  }

  public void setStrumentiSvolgimentoProcedure(StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure) {
    this.strumentiSvolgimentoProcedure = strumentiSvolgimentoProcedure;
  }

  public AppaltoP7BaseType motivoUrgenza(MotivoUrgenzaEnum motivoUrgenza) {
    this.motivoUrgenza = motivoUrgenza;
    return this;
  }

   /**
   * Get motivoUrgenza
   * @return motivoUrgenza
  **/
  @Schema(description = "")
  public MotivoUrgenzaEnum getMotivoUrgenza() {
    return motivoUrgenza;
  }

  public void setMotivoUrgenza(MotivoUrgenzaEnum motivoUrgenza) {
    this.motivoUrgenza = motivoUrgenza;
  }

  public AppaltoP7BaseType linkDocumenti(String linkDocumenti) {
    this.linkDocumenti = linkDocumenti;
    return this;
  }

   /**
   * Link ai documenti relativi all’affidamento diretto in somma urgenza e protezione civile (co 10, art 140 nuovo codice)
   * @return linkDocumenti
  **/
  @Schema(description = "Link ai documenti relativi all’affidamento diretto in somma urgenza e protezione civile (co 10, art 140 nuovo codice)")
  public String getLinkDocumenti() {
    return linkDocumenti;
  }

  public void setLinkDocumenti(String linkDocumenti) {
    this.linkDocumenti = linkDocumenti;
  }

  public AppaltoP7BaseType datiBase(DatiBaseAppaltoType datiBase) {
    this.datiBase = datiBase;
    return this;
  }

   /**
   * Get datiBase
   * @return datiBase
  **/
  @Schema(required = true, description = "")
  public DatiBaseAppaltoType getDatiBase() {
    return datiBase;
  }

  public void setDatiBase(DatiBaseAppaltoType datiBase) {
    this.datiBase = datiBase;
  }

  public AppaltoP7BaseType datiBaseProcedura(DatiBaseProceduraType datiBaseProcedura) {
    this.datiBaseProcedura = datiBaseProcedura;
    return this;
  }

   /**
   * Get datiBaseProcedura
   * @return datiBaseProcedura
  **/
  @Schema(required = true, description = "")
  public DatiBaseProceduraType getDatiBaseProcedura() {
    return datiBaseProcedura;
  }

  public void setDatiBaseProcedura(DatiBaseProceduraType datiBaseProcedura) {
    this.datiBaseProcedura = datiBaseProcedura;
  }

  public AppaltoP7BaseType datiBaseStrumentiProcedura(DatiBaseStrumentiProceduraP7Type datiBaseStrumentiProcedura) {
    this.datiBaseStrumentiProcedura = datiBaseStrumentiProcedura;
    return this;
  }

   /**
   * Get datiBaseStrumentiProcedura
   * @return datiBaseStrumentiProcedura
  **/
  @Schema(required = true, description = "")
  public DatiBaseStrumentiProceduraP7Type getDatiBaseStrumentiProcedura() {
    return datiBaseStrumentiProcedura;
  }

  public void setDatiBaseStrumentiProcedura(DatiBaseStrumentiProceduraP7Type datiBaseStrumentiProcedura) {
    this.datiBaseStrumentiProcedura = datiBaseStrumentiProcedura;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppaltoP7BaseType appaltoP7BaseType = (AppaltoP7BaseType) o;
    return Objects.equals(this.codiceAppalto, appaltoP7BaseType.codiceAppalto) &&
        Objects.equals(this.idPianificazione, appaltoP7BaseType.idPianificazione) &&
        Objects.equals(this.termineRidottoAvvisoPreinformazione, appaltoP7BaseType.termineRidottoAvvisoPreinformazione) &&
        Objects.equals(this.categorieMerceologiche, appaltoP7BaseType.categorieMerceologiche) &&
        Objects.equals(this.motivazioneCIG, appaltoP7BaseType.motivazioneCIG) &&
        Objects.equals(this.strumentiSvolgimentoProcedure, appaltoP7BaseType.strumentiSvolgimentoProcedure) &&
        Objects.equals(this.motivoUrgenza, appaltoP7BaseType.motivoUrgenza) &&
        Objects.equals(this.linkDocumenti, appaltoP7BaseType.linkDocumenti) &&
        Objects.equals(this.datiBase, appaltoP7BaseType.datiBase) &&
        Objects.equals(this.datiBaseProcedura, appaltoP7BaseType.datiBaseProcedura) &&
        Objects.equals(this.datiBaseStrumentiProcedura, appaltoP7BaseType.datiBaseStrumentiProcedura);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codiceAppalto, idPianificazione, termineRidottoAvvisoPreinformazione, categorieMerceologiche, motivazioneCIG, strumentiSvolgimentoProcedure, motivoUrgenza, linkDocumenti, datiBase, datiBaseProcedura, datiBaseStrumentiProcedura);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppaltoP7BaseType {\n");
    
    sb.append("    codiceAppalto: ").append(toIndentedString(codiceAppalto)).append("\n");
    sb.append("    idPianificazione: ").append(toIndentedString(idPianificazione)).append("\n");
    sb.append("    termineRidottoAvvisoPreinformazione: ").append(toIndentedString(termineRidottoAvvisoPreinformazione)).append("\n");
    sb.append("    categorieMerceologiche: ").append(toIndentedString(categorieMerceologiche)).append("\n");
    sb.append("    motivazioneCIG: ").append(toIndentedString(motivazioneCIG)).append("\n");
    sb.append("    strumentiSvolgimentoProcedure: ").append(toIndentedString(strumentiSvolgimentoProcedure)).append("\n");
    sb.append("    motivoUrgenza: ").append(toIndentedString(motivoUrgenza)).append("\n");
    sb.append("    linkDocumenti: ").append(toIndentedString(linkDocumenti)).append("\n");
    sb.append("    datiBase: ").append(toIndentedString(datiBase)).append("\n");
    sb.append("    datiBaseProcedura: ").append(toIndentedString(datiBaseProcedura)).append("\n");
    sb.append("    datiBaseStrumentiProcedura: ").append(toIndentedString(datiBaseStrumentiProcedura)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
