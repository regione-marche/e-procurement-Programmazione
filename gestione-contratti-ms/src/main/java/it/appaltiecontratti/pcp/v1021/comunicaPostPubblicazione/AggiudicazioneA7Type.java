/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.2
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione;

import java.math.BigDecimal;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione.FinanziamentoType;
import it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione.PartecipanteADType;
import it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione.QuadroEconomicoConcessioniType;
import it.appaltiecontratti.pcp.v1021.comunicaPostPubblicazione.QuadroEconomicoType;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati di aggiudicazione per procedura negoziata senza bando pari o sopra soglia.
 */
@Schema(description = "Oggetto che riporta i dati di aggiudicazione per procedura negoziata senza bando pari o sopra soglia.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-27T12:48:45.158438100+01:00[Europe/Rome]")

public class AggiudicazioneA7Type extends AggiudicazioneCompletaType {
  @JsonProperty("numeroOfferteAmmesse")
  private BigDecimal numeroOfferteAmmesse = null;

  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("acquisizioneCup")
  private Boolean acquisizioneCup = null;

  @JsonProperty("cupLotto")
  private List<String> cupLotto = null;

  @JsonProperty("paritaDiGenereGenerazionale")
  private ParitaDiGenereGenerazionaleA7Type paritaDiGenereGenerazionale = null;

  @JsonProperty("quadroEconomicoStandard")
  private QuadroEconomicoType quadroEconomicoStandard = null;

  @JsonProperty("quadroEconomicoConcessioni")
  private QuadroEconomicoConcessioniType quadroEconomicoConcessioni = null;

  @JsonProperty("partecipanti")
  private List<PartecipanteADType> partecipanti = null;

  @JsonProperty("finanziamenti")
  private List<FinanziamentoType> finanziamenti = null;

  public AggiudicazioneA7Type numeroOfferteAmmesse(BigDecimal numeroOfferteAmmesse) {
    this.numeroOfferteAmmesse = numeroOfferteAmmesse;
    return this;
  }

  /**
   * numero di offerte ammesse
   * @return numeroOfferteAmmesse
   **/
  @Schema(required = true, description = "numero di offerte ammesse")
  public BigDecimal getNumeroOfferteAmmesse() {
    return numeroOfferteAmmesse;
  }

  public void setNumeroOfferteAmmesse(BigDecimal numeroOfferteAmmesse) {
    this.numeroOfferteAmmesse = numeroOfferteAmmesse;
  }

  public AggiudicazioneA7Type afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

  /**
   * Deprecato. L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
   **/
  @Schema(description = "Deprecato. L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public AggiudicazioneA7Type acquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
    return this;
  }

  /**
   * Deprecato. Il contratto è finalizzato alla realizzazione di progetti d&#x27;investimento pubblico per i quali è prevista l&#x27;acquisizione del codice CUP ai sensi dell&#x27;art. 11 L. 3/2003 e ss.mm.? (E&#x27; necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)
   * @return acquisizioneCup
   **/
  @Schema(description = "Deprecato. Il contratto è finalizzato alla realizzazione di progetti d'investimento pubblico per i quali è prevista l'acquisizione del codice CUP ai sensi dell'art. 11 L. 3/2003 e ss.mm.? (E' necessario acquisire e comunicare il CUP per interventi finanziati, anche in parte, con risorse Comunitarie) (Si/No)")
  public Boolean isAcquisizioneCup() {
    return acquisizioneCup;
  }

  public void setAcquisizioneCup(Boolean acquisizioneCup) {
    this.acquisizioneCup = acquisizioneCup;
  }

  public AggiudicazioneA7Type cupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
    return this;
  }

  public AggiudicazioneA7Type addCupLottoItem(String cupLottoItem) {
    if (this.cupLotto == null) {
      this.cupLotto = new ArrayList<>();
    }
    this.cupLotto.add(cupLottoItem);
    return this;
  }

  /**
   * Deprecato. Cup associati al lotto
   * @return cupLotto
   **/
  @Schema(description = "Deprecato. Cup associati al lotto")
  public List<String> getCupLotto() {
    return cupLotto;
  }

  public void setCupLotto(List<String> cupLotto) {
    this.cupLotto = cupLotto;
  }

  public AggiudicazioneA7Type paritaDiGenereGenerazionale(ParitaDiGenereGenerazionaleA7Type paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
    return this;
  }

  /**
   * Get paritaDiGenereGenerazionale
   * @return paritaDiGenereGenerazionale
   **/
  @Schema(description = "")
  public ParitaDiGenereGenerazionaleA7Type getParitaDiGenereGenerazionale() {
    return paritaDiGenereGenerazionale;
  }

  public void setParitaDiGenereGenerazionale(ParitaDiGenereGenerazionaleA7Type paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
  }

  public AggiudicazioneA7Type quadroEconomicoStandard(QuadroEconomicoType quadroEconomicoStandard) {
    this.quadroEconomicoStandard = quadroEconomicoStandard;
    return this;
  }

  /**
   * Get quadroEconomicoStandard
   * @return quadroEconomicoStandard
   **/
  @Schema(description = "")
  public QuadroEconomicoType getQuadroEconomicoStandard() {
    return quadroEconomicoStandard;
  }

  public void setQuadroEconomicoStandard(QuadroEconomicoType quadroEconomicoStandard) {
    this.quadroEconomicoStandard = quadroEconomicoStandard;
  }

  public AggiudicazioneA7Type quadroEconomicoConcessioni(QuadroEconomicoConcessioniType quadroEconomicoConcessioni) {
    this.quadroEconomicoConcessioni = quadroEconomicoConcessioni;
    return this;
  }

  /**
   * Get quadroEconomicoConcessioni
   * @return quadroEconomicoConcessioni
   **/
  @Schema(description = "")
  public QuadroEconomicoConcessioniType getQuadroEconomicoConcessioni() {
    return quadroEconomicoConcessioni;
  }

  public void setQuadroEconomicoConcessioni(QuadroEconomicoConcessioniType quadroEconomicoConcessioni) {
    this.quadroEconomicoConcessioni = quadroEconomicoConcessioni;
  }

  public AggiudicazioneA7Type partecipanti(List<PartecipanteADType> partecipanti) {
    this.partecipanti = partecipanti;
    return this;
  }

  public AggiudicazioneA7Type addPartecipantiItem(PartecipanteADType partecipantiItem) {
    if (this.partecipanti == null) {
      this.partecipanti = new ArrayList<>();
    }
    this.partecipanti.add(partecipantiItem);
    return this;
  }

  /**
   * Deprecato
   * @return partecipanti
   **/
  @Schema(description = "Deprecato")
  public List<PartecipanteADType> getPartecipanti() {
    return partecipanti;
  }

  public void setPartecipanti(List<PartecipanteADType> partecipanti) {
    this.partecipanti = partecipanti;
  }

  public AggiudicazioneA7Type finanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
    return this;
  }

  public AggiudicazioneA7Type addFinanziamentiItem(FinanziamentoType finanziamentiItem) {
    if (this.finanziamenti == null) {
      this.finanziamenti = new ArrayList<>();
    }
    this.finanziamenti.add(finanziamentiItem);
    return this;
  }

  /**
   * Deprecato. Dati relativi ai finanziamenti
   * @return finanziamenti
   **/
  @Schema(description = "Deprecato. Dati relativi ai finanziamenti")
  public List<FinanziamentoType> getFinanziamenti() {
    return finanziamenti;
  }

  public void setFinanziamenti(List<FinanziamentoType> finanziamenti) {
    this.finanziamenti = finanziamenti;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggiudicazioneA7Type aggiudicazioneA7Type = (AggiudicazioneA7Type) o;
    return Objects.equals(this.numeroOfferteAmmesse, aggiudicazioneA7Type.numeroOfferteAmmesse) &&
            Objects.equals(this.afferenteInvestimentiPNRR, aggiudicazioneA7Type.afferenteInvestimentiPNRR) &&
            Objects.equals(this.acquisizioneCup, aggiudicazioneA7Type.acquisizioneCup) &&
            Objects.equals(this.cupLotto, aggiudicazioneA7Type.cupLotto) &&
            Objects.equals(this.paritaDiGenereGenerazionale, aggiudicazioneA7Type.paritaDiGenereGenerazionale) &&
            Objects.equals(this.quadroEconomicoStandard, aggiudicazioneA7Type.quadroEconomicoStandard) &&
            Objects.equals(this.quadroEconomicoConcessioni, aggiudicazioneA7Type.quadroEconomicoConcessioni) &&
            Objects.equals(this.partecipanti, aggiudicazioneA7Type.partecipanti) &&
            Objects.equals(this.finanziamenti, aggiudicazioneA7Type.finanziamenti) &&
            super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numeroOfferteAmmesse, afferenteInvestimentiPNRR, acquisizioneCup, cupLotto, paritaDiGenereGenerazionale, quadroEconomicoStandard, quadroEconomicoConcessioni, partecipanti, finanziamenti, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggiudicazioneA7Type {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    numeroOfferteAmmesse: ").append(toIndentedString(numeroOfferteAmmesse)).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    acquisizioneCup: ").append(toIndentedString(acquisizioneCup)).append("\n");
    sb.append("    cupLotto: ").append(toIndentedString(cupLotto)).append("\n");
    sb.append("    paritaDiGenereGenerazionale: ").append(toIndentedString(paritaDiGenereGenerazionale)).append("\n");
    sb.append("    quadroEconomicoStandard: ").append(toIndentedString(quadroEconomicoStandard)).append("\n");
    sb.append("    quadroEconomicoConcessioni: ").append(toIndentedString(quadroEconomicoConcessioni)).append("\n");
    sb.append("    partecipanti: ").append(toIndentedString(partecipanti)).append("\n");
    sb.append("    finanziamenti: ").append(toIndentedString(finanziamenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
