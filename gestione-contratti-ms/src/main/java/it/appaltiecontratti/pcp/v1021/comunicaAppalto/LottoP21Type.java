/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CategoriaEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CategorieMerceologicheEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CondizioniNegoziataEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ContrattiDisposizioniParticolariEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.FinanziamentoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.IpotesiCollegamentoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.LottoBaseType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ModalitaAcquisizioneEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.QuadroEconomicoType;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto all&#x27;interno della fase di pubblicazione sopra soglia e sotto soglia
 */
@Schema(description = "Oggetto che riporta i dati del lotto all'interno della fase di pubblicazione sopra soglia e sotto soglia")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-25T10:09:50.369647700+02:00[Europe/Rome]")

public class LottoP21Type extends LottoBaseType {
  @JsonProperty("servizioPubblicoLocale")
  private Boolean servizioPubblicoLocale = null;

  @JsonProperty("ripetizioniEConsegneComplementari")
  private Boolean ripetizioniEConsegneComplementari = null;

  @JsonProperty("lavoroOAcquistoPrevistoInProgrammazione")
  private Boolean lavoroOAcquistoPrevistoInProgrammazione = null;

  @JsonProperty("cui")
  private String cui = null;

  @JsonProperty("opzioniRinnovi")
  private Boolean opzioniRinnovi = null;

  @JsonProperty("ccnl")
  private String ccnl = null;

  @JsonProperty("ipotesiCollegamento")
  private IpotesiCollegamentoType ipotesiCollegamento = null;

  @JsonProperty("categoria")
  private CategoriaEnum categoria = null;

  @JsonProperty("categoriaScorporabile")
  private List<CategoriaEnum> categoriaScorporabile = null;

  @JsonProperty("modalitaAcquisizione")
  private ModalitaAcquisizioneEnum modalitaAcquisizione = null;

  @JsonProperty("paritaDiGenereGenerazionale")
  private ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale = null;

  @JsonProperty("quadroEconomicoStandard")
  private QuadroEconomicoType quadroEconomicoStandard = null;

  public LottoP21Type servizioPubblicoLocale(Boolean servizioPubblicoLocale) {
    this.servizioPubblicoLocale = servizioPubblicoLocale;
    return this;
  }

   /**
   * Flag servizio pubblico locale
   * @return servizioPubblicoLocale
  **/
  @Schema(required = true, description = "Flag servizio pubblico locale")
  public Boolean isServizioPubblicoLocale() {
    return servizioPubblicoLocale;
  }

  public void setServizioPubblicoLocale(Boolean servizioPubblicoLocale) {
    this.servizioPubblicoLocale = servizioPubblicoLocale;
  }

  public LottoP21Type ripetizioniEConsegneComplementari(Boolean ripetizioniEConsegneComplementari) {
    this.ripetizioniEConsegneComplementari = ripetizioniEConsegneComplementari;
    return this;
  }

   /**
   * L’appalto prevede ripetizioni di servizi/forniture/lavori analoghi e consegne complementari?
   * @return ripetizioniEConsegneComplementari
  **/
  @Schema(required = true, description = "L’appalto prevede ripetizioni di servizi/forniture/lavori analoghi e consegne complementari?")
  public Boolean isRipetizioniEConsegneComplementari() {
    return ripetizioniEConsegneComplementari;
  }

  public void setRipetizioniEConsegneComplementari(Boolean ripetizioniEConsegneComplementari) {
    this.ripetizioniEConsegneComplementari = ripetizioniEConsegneComplementari;
  }

  public LottoP21Type lavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
    return this;
  }

   /**
   * Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione
   * @return lavoroOAcquistoPrevistoInProgrammazione
  **/
  @Schema(required = true, description = "Il lavoro o l’acquisto di bene o servizio è stato previsto all’interno della programmazione")
  public Boolean isLavoroOAcquistoPrevistoInProgrammazione() {
    return lavoroOAcquistoPrevistoInProgrammazione;
  }

  public void setLavoroOAcquistoPrevistoInProgrammazione(Boolean lavoroOAcquistoPrevistoInProgrammazione) {
    this.lavoroOAcquistoPrevistoInProgrammazione = lavoroOAcquistoPrevistoInProgrammazione;
  }

  public LottoP21Type cui(String cui) {
    this.cui = cui;
    return this;
  }

   /**
   * CUI programma triennale lavori pubblici o programma biennale forniture e servizi
   * @return cui
  **/
  @Schema(description = "CUI programma triennale lavori pubblici o programma biennale forniture e servizi")
  public String getCui() {
    return cui;
  }

  public void setCui(String cui) {
    this.cui = cui;
  }

  public LottoP21Type opzioniRinnovi(Boolean opzioniRinnovi) {
    this.opzioniRinnovi = opzioniRinnovi;
    return this;
  }

   /**
   * L’appalto prevede opzioni/rinnovi?
   * @return opzioniRinnovi
  **/
  @Schema(required = true, description = "L’appalto prevede opzioni/rinnovi?")
  public Boolean isOpzioniRinnovi() {
    return opzioniRinnovi;
  }

  public void setOpzioniRinnovi(Boolean opzioniRinnovi) {
    this.opzioniRinnovi = opzioniRinnovi;
  }

  public LottoP21Type ccnl(String ccnl) {
    this.ccnl = ccnl;
    return this;
  }

   /**
   * indicare il codice CNEL o non applicabile
   * @return ccnl
  **/
  @Schema(required = true, description = "indicare il codice CNEL o non applicabile")
  public String getCcnl() {
    return ccnl;
  }

  public void setCcnl(String ccnl) {
    this.ccnl = ccnl;
  }

  public LottoP21Type ipotesiCollegamento(IpotesiCollegamentoType ipotesiCollegamento) {
    this.ipotesiCollegamento = ipotesiCollegamento;
    return this;
  }

   /**
   * Get ipotesiCollegamento
   * @return ipotesiCollegamento
  **/
  @Schema(required = true, description = "")
  public IpotesiCollegamentoType getIpotesiCollegamento() {
    return ipotesiCollegamento;
  }

  public void setIpotesiCollegamento(IpotesiCollegamentoType ipotesiCollegamento) {
    this.ipotesiCollegamento = ipotesiCollegamento;
  }

  public LottoP21Type categoria(CategoriaEnum categoria) {
    this.categoria = categoria;
    return this;
  }

   /**
   * Get categoria
   * @return categoria
  **/
  @Schema(required = true, description = "")
  public CategoriaEnum getCategoria() {
    return categoria;
  }

  public void setCategoria(CategoriaEnum categoria) {
    this.categoria = categoria;
  }

  public LottoP21Type categoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
    return this;
  }

  public LottoP21Type addCategoriaScorporabileItem(CategoriaEnum categoriaScorporabileItem) {
    if (this.categoriaScorporabile == null) {
      this.categoriaScorporabile = new ArrayList<>();
    }
    this.categoriaScorporabile.add(categoriaScorporabileItem);
    return this;
  }

   /**
   * Get categoriaScorporabile
   * @return categoriaScorporabile
  **/
  @Schema(description = "")
  public List<CategoriaEnum> getCategoriaScorporabile() {
    return categoriaScorporabile;
  }

  public void setCategoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
  }

  public LottoP21Type modalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
    return this;
  }

   /**
   * Get modalitaAcquisizione
   * @return modalitaAcquisizione
  **/
  @Schema(description = "")
  public ModalitaAcquisizioneEnum getModalitaAcquisizione() {
    return modalitaAcquisizione;
  }

  public void setModalitaAcquisizione(ModalitaAcquisizioneEnum modalitaAcquisizione) {
    this.modalitaAcquisizione = modalitaAcquisizione;
  }

  public LottoP21Type paritaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
    return this;
  }

   /**
   * Get paritaDiGenereGenerazionale
   * @return paritaDiGenereGenerazionale
  **/
  @Schema(description = "")
  public ParitaDiGenereGenerazionaleType getParitaDiGenereGenerazionale() {
    return paritaDiGenereGenerazionale;
  }

  public void setParitaDiGenereGenerazionale(ParitaDiGenereGenerazionaleType paritaDiGenereGenerazionale) {
    this.paritaDiGenereGenerazionale = paritaDiGenereGenerazionale;
  }

  public LottoP21Type quadroEconomicoStandard(QuadroEconomicoType quadroEconomicoStandard) {
    this.quadroEconomicoStandard = quadroEconomicoStandard;
    return this;
  }

   /**
   * Get quadroEconomicoStandard
   * @return quadroEconomicoStandard
  **/
  @Schema(required = true, description = "")
  public QuadroEconomicoType getQuadroEconomicoStandard() {
    return quadroEconomicoStandard;
  }

  public void setQuadroEconomicoStandard(QuadroEconomicoType quadroEconomicoStandard) {
    this.quadroEconomicoStandard = quadroEconomicoStandard;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoP21Type lottoP21Type = (LottoP21Type) o;
    return Objects.equals(this.servizioPubblicoLocale, lottoP21Type.servizioPubblicoLocale) &&
        Objects.equals(this.ripetizioniEConsegneComplementari, lottoP21Type.ripetizioniEConsegneComplementari) &&
        Objects.equals(this.lavoroOAcquistoPrevistoInProgrammazione, lottoP21Type.lavoroOAcquistoPrevistoInProgrammazione) &&
        Objects.equals(this.cui, lottoP21Type.cui) &&
        Objects.equals(this.opzioniRinnovi, lottoP21Type.opzioniRinnovi) &&
        Objects.equals(this.ccnl, lottoP21Type.ccnl) &&
        Objects.equals(this.ipotesiCollegamento, lottoP21Type.ipotesiCollegamento) &&
        Objects.equals(this.categoria, lottoP21Type.categoria) &&
        Objects.equals(this.categoriaScorporabile, lottoP21Type.categoriaScorporabile) &&
        Objects.equals(this.modalitaAcquisizione, lottoP21Type.modalitaAcquisizione) &&
        Objects.equals(this.paritaDiGenereGenerazionale, lottoP21Type.paritaDiGenereGenerazionale) &&
        Objects.equals(this.quadroEconomicoStandard, lottoP21Type.quadroEconomicoStandard) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(servizioPubblicoLocale, ripetizioniEConsegneComplementari, lavoroOAcquistoPrevistoInProgrammazione, cui, opzioniRinnovi, ccnl, ipotesiCollegamento, categoria, categoriaScorporabile, modalitaAcquisizione, paritaDiGenereGenerazionale, quadroEconomicoStandard, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoP21Type {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    servizioPubblicoLocale: ").append(toIndentedString(servizioPubblicoLocale)).append("\n");
    sb.append("    ripetizioniEConsegneComplementari: ").append(toIndentedString(ripetizioniEConsegneComplementari)).append("\n");
    sb.append("    lavoroOAcquistoPrevistoInProgrammazione: ").append(toIndentedString(lavoroOAcquistoPrevistoInProgrammazione)).append("\n");
    sb.append("    cui: ").append(toIndentedString(cui)).append("\n");
    sb.append("    opzioniRinnovi: ").append(toIndentedString(opzioniRinnovi)).append("\n");
    sb.append("    ccnl: ").append(toIndentedString(ccnl)).append("\n");
    sb.append("    ipotesiCollegamento: ").append(toIndentedString(ipotesiCollegamento)).append("\n");
    sb.append("    categoria: ").append(toIndentedString(categoria)).append("\n");
    sb.append("    categoriaScorporabile: ").append(toIndentedString(categoriaScorporabile)).append("\n");
    sb.append("    modalitaAcquisizione: ").append(toIndentedString(modalitaAcquisizione)).append("\n");
    sb.append("    paritaDiGenereGenerazionale: ").append(toIndentedString(paritaDiGenereGenerazionale)).append("\n");
    sb.append("    quadroEconomicoStandard: ").append(toIndentedString(quadroEconomicoStandard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
