/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CategoriaEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CodIstatEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseAggiuntiviType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseCPVType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseContrattoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseDocumentiOptionalType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiBaseLottoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.DatiTerminiInvioType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.FinanziamentoType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.LottoP3BaseType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ModalitaAcquisizioneEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.MotivoEsclusioneConcessioneEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.ParitaDiGenereGenerazionaleType;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.TipologiaLavoroEnum;
import java.util.ArrayList;
import java.util.List;
/**
 * Oggetto che riporta i dati del lotto
 */
@Schema(description = "Oggetto che riporta i dati del lotto")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-25T10:09:50.369647700+02:00[Europe/Rome]")

public class LottoP32Type extends LottoP3BaseType {
  @JsonProperty("afferenteInvestimentiPNRR")
  private Boolean afferenteInvestimentiPNRR = null;

  @JsonProperty("ccnl")
  private String ccnl = null;

  @JsonProperty("categoria")
  private CategoriaEnum categoria = null;

  @JsonProperty("categoriaScorporabile")
  private List<CategoriaEnum> categoriaScorporabile = null;

  @JsonProperty("motivoEsclusioneConcessione")
  private MotivoEsclusioneConcessioneEnum motivoEsclusioneConcessione = null;

  @JsonProperty("datiBase")
  private DatiBaseLottoType datiBase = null;

  @JsonProperty("datiBaseCPV")
  private DatiBaseCPVType datiBaseCPV = null;

  @JsonProperty("datiBaseContratto")
  private DatiBaseContrattoType datiBaseContratto = null;

  @JsonProperty("datiBaseAggiudicazione")
  private AllOfLottoP32TypeDatiBaseAggiudicazione datiBaseAggiudicazione = null;

  @JsonProperty("datiBaseAggiuntivi")
  private DatiBaseAggiuntiviType datiBaseAggiuntivi = null;

  @JsonProperty("datiBaseTerminiInvio")
  private DatiTerminiInvioType datiBaseTerminiInvio = null;

  @JsonProperty("datiBaseDocumenti")
  private DatiBaseDocumentiOptionalType datiBaseDocumenti = null;

  public LottoP32Type afferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
    return this;
  }

   /**
   * L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?
   * @return afferenteInvestimentiPNRR
  **/
  @Schema(required = true, description = "L’appalto o concessione è afferente gli investimenti pubblici finanziati, in tutto o in parte, con le risorse previste dal PNRR (Piano Nazionale di Ripresa e Resilienza) e/o dal PNC (Piano nazionale per gli investimenti complementari)?")
  public Boolean isAfferenteInvestimentiPNRR() {
    return afferenteInvestimentiPNRR;
  }

  public void setAfferenteInvestimentiPNRR(Boolean afferenteInvestimentiPNRR) {
    this.afferenteInvestimentiPNRR = afferenteInvestimentiPNRR;
  }

  public LottoP32Type ccnl(String ccnl) {
    this.ccnl = ccnl;
    return this;
  }

   /**
   * indicare il codice CNEL o non applicabile
   * @return ccnl
  **/
  @Schema(required = true, description = "indicare il codice CNEL o non applicabile")
  public String getCcnl() {
    return ccnl;
  }

  public void setCcnl(String ccnl) {
    this.ccnl = ccnl;
  }

  public LottoP32Type categoria(CategoriaEnum categoria) {
    this.categoria = categoria;
    return this;
  }

   /**
   * Get categoria
   * @return categoria
  **/
  @Schema(description = "")
  public CategoriaEnum getCategoria() {
    return categoria;
  }

  public void setCategoria(CategoriaEnum categoria) {
    this.categoria = categoria;
  }

  public LottoP32Type categoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
    return this;
  }

  public LottoP32Type addCategoriaScorporabileItem(CategoriaEnum categoriaScorporabileItem) {
    if (this.categoriaScorporabile == null) {
      this.categoriaScorporabile = new ArrayList<>();
    }
    this.categoriaScorporabile.add(categoriaScorporabileItem);
    return this;
  }

   /**
   * Get categoriaScorporabile
   * @return categoriaScorporabile
  **/
  @Schema(description = "")
  public List<CategoriaEnum> getCategoriaScorporabile() {
    return categoriaScorporabile;
  }

  public void setCategoriaScorporabile(List<CategoriaEnum> categoriaScorporabile) {
    this.categoriaScorporabile = categoriaScorporabile;
  }

  public LottoP32Type motivoEsclusioneConcessione(MotivoEsclusioneConcessioneEnum motivoEsclusioneConcessione) {
    this.motivoEsclusioneConcessione = motivoEsclusioneConcessione;
    return this;
  }

   /**
   * Get motivoEsclusioneConcessione
   * @return motivoEsclusioneConcessione
  **/
  @Schema(required = true, description = "")
  public MotivoEsclusioneConcessioneEnum getMotivoEsclusioneConcessione() {
    return motivoEsclusioneConcessione;
  }

  public void setMotivoEsclusioneConcessione(MotivoEsclusioneConcessioneEnum motivoEsclusioneConcessione) {
    this.motivoEsclusioneConcessione = motivoEsclusioneConcessione;
  }

  public LottoP32Type datiBase(DatiBaseLottoType datiBase) {
    this.datiBase = datiBase;
    return this;
  }

   /**
   * Get datiBase
   * @return datiBase
  **/
  @Schema(required = true, description = "")
  public DatiBaseLottoType getDatiBase() {
    return datiBase;
  }

  public void setDatiBase(DatiBaseLottoType datiBase) {
    this.datiBase = datiBase;
  }

  public LottoP32Type datiBaseCPV(DatiBaseCPVType datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
    return this;
  }

   /**
   * Get datiBaseCPV
   * @return datiBaseCPV
  **/
  @Schema(required = true, description = "")
  public DatiBaseCPVType getDatiBaseCPV() {
    return datiBaseCPV;
  }

  public void setDatiBaseCPV(DatiBaseCPVType datiBaseCPV) {
    this.datiBaseCPV = datiBaseCPV;
  }

  public LottoP32Type datiBaseContratto(DatiBaseContrattoType datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
    return this;
  }

   /**
   * Get datiBaseContratto
   * @return datiBaseContratto
  **/
  @Schema(description = "")
  public DatiBaseContrattoType getDatiBaseContratto() {
    return datiBaseContratto;
  }

  public void setDatiBaseContratto(DatiBaseContrattoType datiBaseContratto) {
    this.datiBaseContratto = datiBaseContratto;
  }

  public LottoP32Type datiBaseAggiudicazione(AllOfLottoP32TypeDatiBaseAggiudicazione datiBaseAggiudicazione) {
    this.datiBaseAggiudicazione = datiBaseAggiudicazione;
    return this;
  }

   /**
   * Get datiBaseAggiudicazione
   * @return datiBaseAggiudicazione
  **/
  @Schema(required = true, description = "")
  public AllOfLottoP32TypeDatiBaseAggiudicazione getDatiBaseAggiudicazione() {
    return datiBaseAggiudicazione;
  }

  public void setDatiBaseAggiudicazione(AllOfLottoP32TypeDatiBaseAggiudicazione datiBaseAggiudicazione) {
    this.datiBaseAggiudicazione = datiBaseAggiudicazione;
  }

  public LottoP32Type datiBaseAggiuntivi(DatiBaseAggiuntiviType datiBaseAggiuntivi) {
    this.datiBaseAggiuntivi = datiBaseAggiuntivi;
    return this;
  }

   /**
   * Get datiBaseAggiuntivi
   * @return datiBaseAggiuntivi
  **/
  @Schema(required = true, description = "")
  public DatiBaseAggiuntiviType getDatiBaseAggiuntivi() {
    return datiBaseAggiuntivi;
  }

  public void setDatiBaseAggiuntivi(DatiBaseAggiuntiviType datiBaseAggiuntivi) {
    this.datiBaseAggiuntivi = datiBaseAggiuntivi;
  }

  public LottoP32Type datiBaseTerminiInvio(DatiTerminiInvioType datiBaseTerminiInvio) {
    this.datiBaseTerminiInvio = datiBaseTerminiInvio;
    return this;
  }

   /**
   * Get datiBaseTerminiInvio
   * @return datiBaseTerminiInvio
  **/
  @Schema(description = "")
  public DatiTerminiInvioType getDatiBaseTerminiInvio() {
    return datiBaseTerminiInvio;
  }

  public void setDatiBaseTerminiInvio(DatiTerminiInvioType datiBaseTerminiInvio) {
    this.datiBaseTerminiInvio = datiBaseTerminiInvio;
  }

  public LottoP32Type datiBaseDocumenti(DatiBaseDocumentiOptionalType datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
    return this;
  }

   /**
   * Get datiBaseDocumenti
   * @return datiBaseDocumenti
  **/
  @Schema(description = "")
  public DatiBaseDocumentiOptionalType getDatiBaseDocumenti() {
    return datiBaseDocumenti;
  }

  public void setDatiBaseDocumenti(DatiBaseDocumentiOptionalType datiBaseDocumenti) {
    this.datiBaseDocumenti = datiBaseDocumenti;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LottoP32Type lottoP32Type = (LottoP32Type) o;
    return Objects.equals(this.afferenteInvestimentiPNRR, lottoP32Type.afferenteInvestimentiPNRR) &&
        Objects.equals(this.ccnl, lottoP32Type.ccnl) &&
        Objects.equals(this.categoria, lottoP32Type.categoria) &&
        Objects.equals(this.categoriaScorporabile, lottoP32Type.categoriaScorporabile) &&
        Objects.equals(this.motivoEsclusioneConcessione, lottoP32Type.motivoEsclusioneConcessione) &&
        Objects.equals(this.datiBase, lottoP32Type.datiBase) &&
        Objects.equals(this.datiBaseCPV, lottoP32Type.datiBaseCPV) &&
        Objects.equals(this.datiBaseContratto, lottoP32Type.datiBaseContratto) &&
        Objects.equals(this.datiBaseAggiudicazione, lottoP32Type.datiBaseAggiudicazione) &&
        Objects.equals(this.datiBaseAggiuntivi, lottoP32Type.datiBaseAggiuntivi) &&
        Objects.equals(this.datiBaseTerminiInvio, lottoP32Type.datiBaseTerminiInvio) &&
        Objects.equals(this.datiBaseDocumenti, lottoP32Type.datiBaseDocumenti) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afferenteInvestimentiPNRR, ccnl, categoria, categoriaScorporabile, motivoEsclusioneConcessione, datiBase, datiBaseCPV, datiBaseContratto, datiBaseAggiudicazione, datiBaseAggiuntivi, datiBaseTerminiInvio, datiBaseDocumenti, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LottoP32Type {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    afferenteInvestimentiPNRR: ").append(toIndentedString(afferenteInvestimentiPNRR)).append("\n");
    sb.append("    ccnl: ").append(toIndentedString(ccnl)).append("\n");
    sb.append("    categoria: ").append(toIndentedString(categoria)).append("\n");
    sb.append("    categoriaScorporabile: ").append(toIndentedString(categoriaScorporabile)).append("\n");
    sb.append("    motivoEsclusioneConcessione: ").append(toIndentedString(motivoEsclusioneConcessione)).append("\n");
    sb.append("    datiBase: ").append(toIndentedString(datiBase)).append("\n");
    sb.append("    datiBaseCPV: ").append(toIndentedString(datiBaseCPV)).append("\n");
    sb.append("    datiBaseContratto: ").append(toIndentedString(datiBaseContratto)).append("\n");
    sb.append("    datiBaseAggiudicazione: ").append(toIndentedString(datiBaseAggiudicazione)).append("\n");
    sb.append("    datiBaseAggiuntivi: ").append(toIndentedString(datiBaseAggiuntivi)).append("\n");
    sb.append("    datiBaseTerminiInvio: ").append(toIndentedString(datiBaseTerminiInvio)).append("\n");
    sb.append("    datiBaseDocumenti: ").append(toIndentedString(datiBaseDocumenti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
