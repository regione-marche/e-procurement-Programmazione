/*
 * Specifiche Servizi Appalto - OpenAPI 3.0
 * Sono descritte le Specifiche dei servizi esposti dalla Piattaforma Contratti Pubblici (PCP), richiamabili dalle Stazioni Appaltanti, per la gestione e la raccolta delle informazioni rilevanti nei processi che compongono l’intero ciclo di vita degli appalti.    #### Documentazione   La documentazione a supporto delle specifiche di interfaccia con i sistemi che interoperano con il nuovo sistema di digitalizzazione è redatta con il linguaggio di markup Markdown ed è presente al segunete url:     [documento-specifiche-servizi-npa](https://github.com/anticorruzione/npa/blob/main/docs/specifiche-interfacce/documento-specifiche-servizi-npa.md) ```
 *
 * OpenAPI spec version: 1.0.3
 * Contact: ufficio.uscp@anticorruzione.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.appaltiecontratti.pcp.v1021.comunicaAppalto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.CategorieMerceologicheEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.MotivazioneCIGEnum;
import it.appaltiecontratti.pcp.v1021.comunicaAppalto.StrumentiSvolgimentoProcedureEnum;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
/**
 * Oggetto che riporta i dati dell&#x27;appalto all&#x27;interno della fase di pubblicazione
 */
@Schema(description = "Oggetto che riporta i dati dell'appalto all'interno della fase di pubblicazione")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-25T10:09:50.369647700+02:00[Europe/Rome]")

public class AppaltoBaseType1 {
  @JsonProperty("codiceAppalto")
  private String codiceAppalto = null;

  @JsonProperty("categorieMerceologiche")
  private List<CategorieMerceologicheEnum> categorieMerceologiche = new ArrayList<>();

  @JsonProperty("motivazioneCIG")
  private MotivazioneCIGEnum motivazioneCIG = null;

  @JsonProperty("strumentiSvolgimentoProcedure")
  private StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure = null;

  @JsonProperty("idPianificazione")
  private UUID idPianificazione = null;

  @JsonProperty("termineRidottoAvvisoPreinformazione")
  private Boolean termineRidottoAvvisoPreinformazione = null;

  public AppaltoBaseType1 codiceAppalto(String codiceAppalto) {
    this.codiceAppalto = codiceAppalto;
    return this;
  }

   /**
   * Identificativo univoco dell&#x27;appalto definito dalla Stazione Appaltante
   * @return codiceAppalto
  **/
  @Schema(required = true, description = "Identificativo univoco dell'appalto definito dalla Stazione Appaltante")
  public String getCodiceAppalto() {
    return codiceAppalto;
  }

  public void setCodiceAppalto(String codiceAppalto) {
    this.codiceAppalto = codiceAppalto;
  }

  public AppaltoBaseType1 categorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
    return this;
  }

  public AppaltoBaseType1 addCategorieMerceologicheItem(CategorieMerceologicheEnum categorieMerceologicheItem) {
    this.categorieMerceologiche.add(categorieMerceologicheItem);
    return this;
  }

   /**
   * Get categorieMerceologiche
   * @return categorieMerceologiche
  **/
  @Schema(required = true, description = "")
  public List<CategorieMerceologicheEnum> getCategorieMerceologiche() {
    return categorieMerceologiche;
  }

  public void setCategorieMerceologiche(List<CategorieMerceologicheEnum> categorieMerceologiche) {
    this.categorieMerceologiche = categorieMerceologiche;
  }

  public AppaltoBaseType1 motivazioneCIG(MotivazioneCIGEnum motivazioneCIG) {
    this.motivazioneCIG = motivazioneCIG;
    return this;
  }

   /**
   * Get motivazioneCIG
   * @return motivazioneCIG
  **/
  @Schema(description = "")
  public MotivazioneCIGEnum getMotivazioneCIG() {
    return motivazioneCIG;
  }

  public void setMotivazioneCIG(MotivazioneCIGEnum motivazioneCIG) {
    this.motivazioneCIG = motivazioneCIG;
  }

  public AppaltoBaseType1 strumentiSvolgimentoProcedure(StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure) {
    this.strumentiSvolgimentoProcedure = strumentiSvolgimentoProcedure;
    return this;
  }

   /**
   * Get strumentiSvolgimentoProcedure
   * @return strumentiSvolgimentoProcedure
  **/
  @Schema(description = "")
  public StrumentiSvolgimentoProcedureEnum getStrumentiSvolgimentoProcedure() {
    return strumentiSvolgimentoProcedure;
  }

  public void setStrumentiSvolgimentoProcedure(StrumentiSvolgimentoProcedureEnum strumentiSvolgimentoProcedure) {
    this.strumentiSvolgimentoProcedure = strumentiSvolgimentoProcedure;
  }

  public AppaltoBaseType1 idPianificazione(UUID idPianificazione) {
    this.idPianificazione = idPianificazione;
    return this;
  }

   /**
   * ID pianificazione
   * @return idPianificazione
  **/
  @Schema(description = "ID pianificazione")
  public UUID getIdPianificazione() {
    return idPianificazione;
  }

  public void setIdPianificazione(UUID idPianificazione) {
    this.idPianificazione = idPianificazione;
  }

  public AppaltoBaseType1 termineRidottoAvvisoPreinformazione(Boolean termineRidottoAvvisoPreinformazione) {
    this.termineRidottoAvvisoPreinformazione = termineRidottoAvvisoPreinformazione;
    return this;
  }

   /**
   * E&#x27; stato utilizzato un termine ridotto con avviso di preinformazione?
   * @return termineRidottoAvvisoPreinformazione
  **/
  @Schema(description = "E' stato utilizzato un termine ridotto con avviso di preinformazione?")
  public Boolean isTermineRidottoAvvisoPreinformazione() {
    return termineRidottoAvvisoPreinformazione;
  }

  public void setTermineRidottoAvvisoPreinformazione(Boolean termineRidottoAvvisoPreinformazione) {
    this.termineRidottoAvvisoPreinformazione = termineRidottoAvvisoPreinformazione;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppaltoBaseType1 appaltoBaseType1 = (AppaltoBaseType1) o;
    return Objects.equals(this.codiceAppalto, appaltoBaseType1.codiceAppalto) &&
        Objects.equals(this.categorieMerceologiche, appaltoBaseType1.categorieMerceologiche) &&
        Objects.equals(this.motivazioneCIG, appaltoBaseType1.motivazioneCIG) &&
        Objects.equals(this.strumentiSvolgimentoProcedure, appaltoBaseType1.strumentiSvolgimentoProcedure) &&
        Objects.equals(this.idPianificazione, appaltoBaseType1.idPianificazione) &&
        Objects.equals(this.termineRidottoAvvisoPreinformazione, appaltoBaseType1.termineRidottoAvvisoPreinformazione);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codiceAppalto, categorieMerceologiche, motivazioneCIG, strumentiSvolgimentoProcedure, idPianificazione, termineRidottoAvvisoPreinformazione);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppaltoBaseType1 {\n");
    
    sb.append("    codiceAppalto: ").append(toIndentedString(codiceAppalto)).append("\n");
    sb.append("    categorieMerceologiche: ").append(toIndentedString(categorieMerceologiche)).append("\n");
    sb.append("    motivazioneCIG: ").append(toIndentedString(motivazioneCIG)).append("\n");
    sb.append("    strumentiSvolgimentoProcedure: ").append(toIndentedString(strumentiSvolgimentoProcedure)).append("\n");
    sb.append("    idPianificazione: ").append(toIndentedString(idPianificazione)).append("\n");
    sb.append("    termineRidottoAvvisoPreinformazione: ").append(toIndentedString(termineRidottoAvvisoPreinformazione)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
