package it.appaltiecontratti.monitoraggiocontratti.contratti.bl.v102;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import eu.europa.data.p27.eforms_ubl_extension_aggregate_components._1.LotResultType;
import eu.europa.data.p27.eforms_ubl_extension_aggregate_components._1.SettledContractType;
import it.appaltiecontratti.monitoraggiocontratti.avvisi.mapper.SqlMapper;
import it.appaltiecontratti.monitoraggiocontratti.contratti.bl.AbstractManager;
import it.appaltiecontratti.monitoraggiocontratti.contratti.bl.FasiManager;
import it.appaltiecontratti.monitoraggiocontratti.contratti.bl.WGenChiaviManager;
import it.appaltiecontratti.monitoraggiocontratti.contratti.entity.entries.*;
import it.appaltiecontratti.monitoraggiocontratti.contratti.entity.exceptions.*;
import it.appaltiecontratti.monitoraggiocontratti.contratti.entity.forms.*;
import it.appaltiecontratti.monitoraggiocontratti.contratti.entity.responses.*;
import it.appaltiecontratti.monitoraggiocontratti.contratti.entity.responses.BaseResponse;
import it.appaltiecontratti.monitoraggiocontratti.contratti.mapper.ContrattiMapper;
import it.appaltiecontratti.monitoraggiocontratti.contratti.utils.Constants;
import it.appaltiecontratti.monitoraggiocontratti.contratti.utils.FasiPcp;
import it.appaltiecontratti.monitoraggiocontratti.contratti.utils.SchedePcpUtils;
import it.appaltiecontratti.monitoraggiocontratti.simog.responses.ResponseAppaltoPcp;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.*;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.PartecipanteADType;
import it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoConcessioniType;

import it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoType;
import it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.SchedaPostPubblicazioneType;
import it.appaltiecontratti.pcp.v102.gestioneUtenti.SoggettoType;
import oasis.names.specification.ubl.schema.xsd.commonextensioncomponents_2.UBLExtensionType;
import oasis.names.specification.ubl.schema.xsd.contractawardnotice_2.ContractAwardNoticeType;
import oasis.names.specification.ubl.schema.xsd.contractnotice_2.ContractNoticeType;
import oasis.names.specification.ubl.schema.xsd.contractnotice_2.ObjectFactory;
import oasis.names.specification.ubl.schema.xsd.priorinformationnotice_2.PriorInformationNoticeType;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.time.OffsetDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Component(value = "ElaborateAppaltiManagerV102")
public class ElaborateAppaltiManagerV102 extends AbstractManager {

    /** Logger di classe. */
    private static final Logger logger = LogManager.getLogger(ElaborateAppaltiManagerV102.class);

    @Autowired
    private ContrattiMapper contrattiMapper;

    @Autowired
    private SqlMapper sqlMapper;

    @Autowired
    protected WGenChiaviManager wgcManager;

    @Autowired
    protected FasiManager fasiManager;

    @Autowired
    private SchedePcpUtils schedePcpUtils;

    private static ObjectMapper objectMapper;

    private static final Map<String, String> mapOggettoContratto;

    private static final Map<String, String> mapCriteriAggiudicazione;

    private static final Map<String, String> mapSchedaEformType;

    private static final Map<String, String> mapTipoOe;

    private static final Map<String, String> flagRitardoImportMap;

    private static final Map<String, String> motiviModificaImportMap;

    private String idPartecipante = null;

    private static final String DATE_PATTERN = "yyyy-MM-dd";

    private static final String LOG_EVENTI_SCHEDA_PCP_COD_EVENTO = "SCHEDA_PCP";
    private static final String LOG_EVENTI_APPALTO_PCP_COD_EVENTO = "APPALTO_PCP";

    private Long numIncarico = null;

    private Long idIncarico = null;

    static {

        objectMapper = new ObjectMapper();
        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        objectMapper.registerModule(new JavaTimeModule());
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        Map<String, String> oggMap = new HashMap<String, String>();
        oggMap.put("works","L");
        oggMap.put("supplies","F");
        oggMap.put("services","S");
        mapOggettoContratto = Collections.unmodifiableMap(oggMap);

        Map<String, String> criAggMap = new HashMap<String, String>();
        criAggMap.put("quality","5");
        criAggMap.put("cost","3");
        criAggMap.put("price","4");
        mapCriteriAggiudicazione = Collections.unmodifiableMap(criAggMap);

        Map<String, String> esMap = new HashMap<String, String>();
        esMap.put(FasiPcp.SCHEDAP110, "PIN");
        esMap.put(FasiPcp.SCHEDAP111, "PIN");
        esMap.put(FasiPcp.SCHEDAP112, "PIN");
        esMap.put(FasiPcp.SCHEDAP113, "PIN");
        esMap.put(FasiPcp.SCHEDAP114, "PIN");
        esMap.put(FasiPcp.SCHEDAP1152, "CN");
        esMap.put(FasiPcp.SCHEDAP116, "CN");
        esMap.put(FasiPcp.SCHEDAP117, "CN");
        esMap.put(FasiPcp.SCHEDAP118, "CN");
        esMap.put(FasiPcp.SCHEDAP119, "CN");
        esMap.put(FasiPcp.SCHEDAP120, "CN");
        esMap.put(FasiPcp.SCHEDAP121, "CN");
        esMap.put(FasiPcp.SCHEDAP123, "CN");
        esMap.put(FasiPcp.SCHEDAP124, "CN");
        esMap.put(FasiPcp.SCHEDAAD125, "CAN");
        esMap.put(FasiPcp.SCHEDAAD126, "CAN");
        esMap.put(FasiPcp.SCHEDAAD127, "CAN");
        esMap.put(FasiPcp.SCHEDAAD128, "CAN");

        mapSchedaEformType = Collections.unmodifiableMap(esMap);


        Map<String, String> rMap = new HashMap<String, String>();
        rMap.put("1","3");
        rMap.put("2","2");
        rMap.put("3","2");
        rMap.put("4","1");
        rMap.put("5","2");
        rMap.put("6","1");
        rMap.put("7","4");
        mapTipoOe = Collections.unmodifiableMap(rMap);



        Map<String, String> aIMap = new HashMap<String, String>();
        aIMap.put("9","P");
        aIMap.put("10","A");
        aIMap.put("11","R");
        flagRitardoImportMap = Collections.unmodifiableMap(aIMap);



        Map<String, String> mIMap = new HashMap<String, String>();
        mIMap.put("add-wss","31");
        mIMap.put("mod-cir","32");
        mIMap.put("mod-minv","33");
        mIMap.put("mod-nons","34");
        mIMap.put("mod-repl","35");
        mIMap.put("mod-rev","36");
        mIMap.put("other","37");
        motiviModificaImportMap = Collections.unmodifiableMap(mIMap);

    }


    public ResponseElaborateAppaltoPcp elaborateSchedaA36Type(SchedaA36Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, String idScheda, Long codgara, Date dataCreazione) throws Exception {

        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));


                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneA36Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneA36Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }

                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            // TODO controllare correttezza somma per importo totale
                            Double importo = 0D;
//							for (AggiudicatarioAD5Type p : l.getPartecipanti()) {
//								if(p != null && p.getImporto() != null) {
//									importo = importo + p.getImporto();
//								}
//							}

                            importo = l.getPartecipanti().stream()
                                    .filter(Objects::nonNull)
                                    .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                    .map(AggiudicatarioAD5Type::getImporto)
                                    .findFirst().orElse(0d);

//							if(importo == 0D) {
//								importo = importo2;
//							}
                            lotto.setImportoTotale(importo);
                            lotto.setImportoNetto(importo - lotto.getImportoSicurezza());

                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }

                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd5(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {
                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);

                                Double ribasso = 0D;
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto,null, null, null, null, importo, ribasso, null, null, lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaA36Type");
            throw e;
        }

        return res;

    }



    public ResponseElaborateAppaltoPcp elaborateSchedaAD125Type(SchedaAD125Type scheda, String codein, String codiceScheda,
                                                                Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, String idScheda, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP bt-765 - Framework agreement*/
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                } else if(eFormType.equals("CAN")) {
                    ContractAwardNoticeType eform  = unmarshalContractAwardNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCAN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);


                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdentificativoGara(idAppalto);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }


                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }
                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }



                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD125Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {

                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }

                                }
                            }

                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0).trim() : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {
                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }

                                Double ribasso = 0D;
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),null, null, null, importo, ribasso, null, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD125Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaAD126Type(SchedaAD126Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                                String idAppalto, Long syscon, String idScheda, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP bt-765 - Framework agreement*/
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                } else if(eFormType.equals("CAN")) {
                    ContractAwardNoticeType eform  = unmarshalContractAwardNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCAN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);

                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";

                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }

                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }
                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD126Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {

                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }

                                Double ribasso = 0D;
                                Double offAumento = null;



                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD126Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD127Type(SchedaAD127Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap,
                                                                List<Map<String, Object>> soggetti, String idAppalto, Long syscon, String idScheda, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP bt-765 - Framework agreement*/
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                } else if(eFormType.equals("CAN")) {
                    ContractAwardNoticeType eform  = unmarshalContractAwardNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCAN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);

                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }
                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD127Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {

                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }

                            lotto.setDaExport("2");
                            lotto.setEsenteCup("1");
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {

                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD127Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD128Type(SchedaAD128Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto,
                                                                Long syscon, String idScheda, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP bt-765 - Framework agreement*/
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                } else if(eFormType.equals("CAN")) {
                    ContractAwardNoticeType eform  = unmarshalContractAwardNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCAN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);

                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }
                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD128Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {

                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }
            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD128Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD225Type(SchedaAD225Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto,
                                                                Long syscon, String idScheda, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD225Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD225Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD225Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {

                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD225Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD226Type(SchedaAD226Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon,
                                                                String idScheda, Long codgara, Date dataCreazione)throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD226Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD226Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD226Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }


                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD226Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD227Type(SchedaAD227Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon,
                                                                String idScheda, Long codgara, Date dataCreazione)throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD227Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD227Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD227Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setEsenteCup("1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD227Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD228Type(SchedaAD228Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon,
                                                                String idScheda, Long codgara, Date dataCreazione)throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD228Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD228Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD228Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }


                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }
                this.contrattiMapper.updateImportoGaraDaLotti(codgara);

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD228Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD3Type(SchedaAD3Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto,
                                                              Long syscon, String idScheda, Long codgara, Date dataCreazione)throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD3Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD3Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD3Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);

                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), null));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());


                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = l.getDatiBaseAggiudicazioneAppalto() != null &&  l.getDatiBaseAggiudicazioneAppalto().getDataAggiudicazione() != null ? Date.from(l.getDatiBaseAggiudicazioneAppalto().getDataAggiudicazione().toInstant()) : null;

                                Double importo = l.getPartecipanti().stream()
                                        .filter(Objects::nonNull)
                                        .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                        .map(PartecipanteADType::getImporto)
                                        .findFirst().orElse(0d);

                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, null, lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD3Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD4Type(SchedaAD4Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto,
                                                              Long syscon, String idScheda, Long codgara, Date dataCreazione)throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD4Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD4Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD4Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            } if(l.getQuadroEconomicoConcessioni() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoConcessioni().getImpTotaleSicurezza() : 0D);
                            }
                            lotto.setImportoTotale(this.getImportoLottoFromQuadroEconomico(l.getQuadroEconomicoStandard(), l.getQuadroEconomicoConcessioni()));
                            lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());


                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }

                            Double importo = l.getPartecipanti().stream()
                                    .filter(Objects::nonNull)
                                    .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                    .map(PartecipanteADType::getImporto)
                                    .findFirst().orElse(0d);

                            if(lotto.getImportoTotale() == null || lotto.getImportoTotale() == 0D) {
                                lotto.setImportoTotale(importo);
                                lotto.setImportoNetto(importo - lotto.getImportoSicurezza());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));

                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd(l.getPartecipanti(), codGara, codLotto, codein);
                            if(inseritoW9aggi) {

                                Double valoreSogliaAnomalia = null;
                                Long numeroOfferteAmmesse = null;
                                Date dataAggiudicazione  = l.getDatiBaseAggiudicazioneAppalto() != null && l.getDatiBaseAggiudicazioneAppalto().getDataAggiudicazione() != null ? schedePcpUtils.offsetDateTimeToDate(l.getDatiBaseAggiudicazioneAppalto().getDataAggiudicazione()) : null;


                                if(importo == null || importo == 0D) {
                                    importo = lotto.getImportoTotale() != null ? lotto.getImportoTotale() : null;
                                }
                                Double ribasso = 0D;
                                Double offAumento = null;

                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, l.getQuadroEconomicoStandard(),valoreSogliaAnomalia, numeroOfferteAmmesse, dataAggiudicazione, importo, ribasso, offAumento, l.getQuadroEconomicoConcessioni(), lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            }
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD4Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaAD5Type(SchedaAD5Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto,
                                                              Long syscon, String idScheda, Long codgara, Date dataCreazione)throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getAggiudicazioni().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    for (AggiudicazioneAD5Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }
                }



                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getAggiudicazioni().stream()
                            .map(AggiudicazioneAD5Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getAggiudicazioni() != null && scheda.getAnacForm().getAggiudicazioni().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (AggiudicazioneAD5Type l : scheda.getAnacForm().getAggiudicazioni()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
//								if(l.getDatiBase().getImporto() != null) {
//									lotto.setImportoTotale(l.getDatiBase().getImporto());
//									lotto.setImportoNetto(l.getDatiBase().getImporto());
//								}
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCup() != null && StringUtils.isNotBlank(l.getCup()) ? l.getCup() : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            Double importo = 0D;
                            for (AggiudicatarioAD5Type p : l.getPartecipanti()) {
                                if(p != null && p.getImporto() != null) {
                                    importo = importo + p.getImporto();
                                }
                            }
                            Double importo2 = l.getPartecipanti().stream()
                                    .filter(Objects::nonNull)
                                    .filter(e -> e.getImporto() != null && e.getImporto() > 0d)
                                    .map(AggiudicatarioAD5Type::getImporto)
                                    .findFirst().orElse(0d);
                            if(importo == 0D) {
                                importo = importo2;
                            }
                            lotto.setImportoTotale(importo);
                            lotto.setImportoNetto(importo);
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }

                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCup() != null && l.getCup().length() <= 15) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, 1L, l.getCup(), null);
                            }
                            boolean inseritoW9aggi = inserisciPartecipantiAd5(l.getPartecipanti(), codGara, codLotto, codein);
                            //scommentato if a casua di una situaizone in cui il partecipante aveva cf vuoto e la w9aggi non veniva inseirta, così permettiamo l'inserimento della w9appa
                            //if(inseritoW9aggi) {
                                schedePcpUtils.inserisciAggiudicazioneW9fasi(codGara, codLotto, idScheda);

                                Double ribasso = 0D;
                                inserisciAggiudicazioneW9AppaAD(codGara, codLotto, null,null, null, null, importo, ribasso, null, null, lotto.getTipologia());
                                this.schedePcpUtils.inserisciW9flussi(codGara, codLotto,codein, syscon, 1L,3L, dataCreazione);
                            //}
                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaAD5Type");
            throw e;
        }

        return res;
    }

    private boolean inserisciPartecipantiAd(List<PartecipanteADType> partecipanti, Long codGara, Long codLotto,
                                            String codein) throws Exception {
        boolean inseritoW9aggi = false;
        try {


            Long tipoRaggruppamento = 0L;


            Map<String, List<PartecipanteADType>> listaPerPartecipante = partecipanti.stream()
                    .filter(Objects::nonNull)
                    .filter(e->StringUtils.isNotBlank(e.getCodiceFiscale()))
                    .collect(Collectors.groupingBy(e-> e.getIdPartecipante().toString(), Collectors.toList()));

            Long numAggi = 1L;
            for (Map.Entry<String, List<PartecipanteADType>> p : listaPerPartecipante.entrySet()) {
                if(p.getValue().size()>1) {

                    tipoRaggruppamento++;
                }

                for (PartecipanteADType part : p.getValue()) {

                    if(part != null) {
                        String CodFisc = part.getCodiceFiscale() != null ? part.getCodiceFiscale().toUpperCase().trim() : "";
                        if(StringUtils.isNotBlank(CodFisc) && CodFisc.length() > 30) {
                            CodFisc = StringUtils.truncate(CodFisc, 30);
                        }
                        List<String> codImpList = this.contrattiMapper.esisteImpresaCfList(CodFisc, codein);
                        String codImp = codImpList != null && !codImpList.isEmpty() ? codImpList.get(0) : null;
                        if(codImp == null) {
                            ImpresaEntry imp = new ImpresaEntry();
                            codImp = this.calcolaCodificaAutomatica("IMPR", "CODIMP");
                            imp.setCodiceImpresa(codImp);
                            imp.setCodiceFiscale(CodFisc);
                            imp.setStazioneAppaltante(codein);
                            imp.setRagioneSociale(part.getDenominazione());
                            this.contrattiMapper.insertImpresa(imp);

                            this.contrattiMapper.insertTeim(codImp, "", "", CodFisc);
                            Long maxId = wgcManager.getNextId("IMPLEG");
                            this.contrattiMapper.insertImpleg(maxId, codImp, "");
                        }

                        Double importo = part.getImporto() != null ? part.getImporto() : 0D;

                        Long tipo = part.getTipoOE() != null && part.getTipoOE().getCodice() != null ? Long.valueOf(mapTipoOe.get(part.getTipoOE().getCodice())) : null;
                        Long ruolo = part.getRuoloOE() != null && part.getRuoloOE().getCodice() != null ? Long.valueOf(part.getRuoloOE().getCodice()) : null;
                        if(ruolo != null && ruolo != 4) {
                            if(ruolo != 1 && ruolo != 2) {
                                ruolo = null;
                            }
                            if(p.getValue().size() > 1) {
                                schedePcpUtils.inserisciAggiudicazioneW9Aggi(codGara, codLotto, part.getIdPartecipante().toString(), codImp, tipoRaggruppamento, tipo, ruolo, importo, null, null, numAggi);
                                numAggi++;
                            } else {
                                schedePcpUtils.inserisciAggiudicazioneW9Aggi(codGara, codLotto, part.getIdPartecipante().toString(), codImp , null, tipo, ruolo, importo, null, null, numAggi);
                                numAggi++;
                            }
                            inseritoW9aggi = true;
                        }

                    }
                }
            }



        }catch (Exception e) {
            logger.error("Errore in fase di importazione fase pcp: inserisciPartecipantiAd");
            throw e;
        }


        return inseritoW9aggi;

    }

    private boolean inserisciPartecipantiAdPostPubb(List<it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.PartecipanteADType> partecipanti, Long codGara, Long codLotto,
                                                    String codein) throws Exception {
        boolean inseritoW9aggi = false;
        try {


            Long tipoRaggruppamento = 0L;

            if(partecipanti != null){
                Map<String, List<it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.PartecipanteADType>> listaPerPartecipante = partecipanti.stream()
                        .filter(Objects::nonNull)
                        .filter(e->StringUtils.isNotBlank(e.getCodiceFiscale()))
                        .collect(Collectors.groupingBy(e-> e.getIdPartecipante().toString(), Collectors.toList()));

                Long numAggi = 1L;
                for (Map.Entry<String, List<it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.PartecipanteADType>> p : listaPerPartecipante.entrySet()) {
                    if(p.getValue().size()>1) {

                        tipoRaggruppamento++;
                    }

                    for (it.appaltiecontratti.pcp.v102.comunicaPostPubblicazione.PartecipanteADType part : p.getValue()) {

                        if(part != null) {
                            String CodFisc = part.getCodiceFiscale() != null ? part.getCodiceFiscale().toUpperCase().trim() : "";
                            if(StringUtils.isNotBlank(CodFisc) && CodFisc.length() > 30) {
                                CodFisc = StringUtils.truncate(CodFisc, 30);
                            }
                            List<String> codImpList = this.contrattiMapper.esisteImpresaCfList(CodFisc, codein);
                            String codImp = codImpList != null && !codImpList.isEmpty() ? codImpList.get(0) : null;
                            if(codImp == null) {
                                ImpresaEntry imp = new ImpresaEntry();
                                codImp = this.calcolaCodificaAutomatica("IMPR", "CODIMP");
                                imp.setCodiceImpresa(codImp);
                                imp.setCodiceFiscale(CodFisc);
                                imp.setStazioneAppaltante(codein);
                                imp.setRagioneSociale(part.getDenominazione());
                                this.contrattiMapper.insertImpresa(imp);

                                this.contrattiMapper.insertTeim(codImp, "", "", CodFisc);
                                Long maxId = wgcManager.getNextId("IMPLEG");
                                this.contrattiMapper.insertImpleg(maxId, codImp, "");
                            }

                            Double importo = part.getImporto() != null ? part.getImporto() : 0D;

                            Long tipo = part.getTipoOE() != null && part.getTipoOE().getCodice() != null ? Long.valueOf(mapTipoOe.get(part.getTipoOE().getCodice())) : null;
                            Long ruolo = part.getRuoloOE() != null && part.getRuoloOE().getCodice() != null ? Long.valueOf(part.getRuoloOE().getCodice()) : null;
                            if(ruolo != null && ruolo != 4) {
                                if(ruolo != 1 && ruolo != 2) {
                                    ruolo = null;
                                }
                                if(p.getValue().size() > 1) {
                                    schedePcpUtils.inserisciAggiudicazioneW9Aggi(codGara, codLotto, part.getIdPartecipante().toString(), codImp, tipoRaggruppamento, tipo, ruolo, importo, null, null, numAggi);
                                    numAggi++;
                                } else {
                                    schedePcpUtils.inserisciAggiudicazioneW9Aggi(codGara, codLotto, part.getIdPartecipante().toString(), codImp , null, tipo, ruolo, importo, null, null, numAggi);
                                    numAggi++;
                                }
                                inseritoW9aggi = true;
                            }

                        }
                    }
                }
            }
            



        }catch (Exception e) {
            logger.error("Errore in fase di importazione fase pcp: inserisciPartecipantiAd");
            throw e;
        }


        return inseritoW9aggi;

    }

    private boolean inserisciPartecipantiAd5(List<AggiudicatarioAD5Type> partecipanti, Long codGara, Long codLotto,
                                             String codein) throws Exception {
        boolean inseritoW9aggi = false;
        try {


            Long tipoRaggruppamento = 0L;


            Map<String, List<AggiudicatarioAD5Type>> listaPerPartecipante = partecipanti.stream()
                    .filter(Objects::nonNull)
                    .filter(e->StringUtils.isNotBlank(e.getCodiceFiscale()))
                    .collect(Collectors.groupingBy(e-> e.getIdPartecipante().toString(), Collectors.toList()));

            Long numAggi = 1L;
            for (Map.Entry<String, List<AggiudicatarioAD5Type>> p : listaPerPartecipante.entrySet()) {
                if(p.getValue().size()>1) {

                    tipoRaggruppamento++;
                }

                for (AggiudicatarioAD5Type part : p.getValue()) {
                    if(part != null) {
                        String CodFisc = part.getCodiceFiscale() != null ? part.getCodiceFiscale().toUpperCase().trim() : "";
                        if(StringUtils.isNotBlank(CodFisc) && CodFisc.length() > 30) {
                            CodFisc = StringUtils.truncate(CodFisc, 30);
                        }
                        List<String> codImpList = this.contrattiMapper.esisteImpresaCfList(CodFisc, codein);
                        String codImp = codImpList != null && !codImpList.isEmpty() ? codImpList.get(0) : null;
                        if(codImp == null) {
                            ImpresaEntry imp = new ImpresaEntry();
                            codImp = this.calcolaCodificaAutomatica("IMPR", "CODIMP");
                            imp.setCodiceImpresa(codImp);
                            imp.setCodiceFiscale(CodFisc);
                            imp.setStazioneAppaltante(codein);
                            imp.setRagioneSociale(part.getDenominazione());
                            this.contrattiMapper.insertImpresa(imp);

                            this.contrattiMapper.insertTeim(codImp, "", "", CodFisc);
                            Long maxId = wgcManager.getNextId("IMPLEG");
                            this.contrattiMapper.insertImpleg(maxId, codImp, "");
                        }

                        Double importo = part.getImporto() != null ? part.getImporto() : 0D;

                        if(p.getValue().size() > 1) {
                            schedePcpUtils.inserisciAggiudicazioneW9Aggi(codGara, codLotto, part.getIdPartecipante().toString(), codImp, tipoRaggruppamento, null,  null, importo, null, null, numAggi);
                            numAggi++;
                        } else {
                            schedePcpUtils.inserisciAggiudicazioneW9Aggi(codGara, codLotto, part.getIdPartecipante().toString(), codImp , null, null, null, importo, null, null, numAggi);
                            numAggi++;
                        }
                        inseritoW9aggi = true;
                    }
                }
            }



        }catch (Exception e) {
            logger.error("Errore in fase di importazione fase pcp: inserisciPartecipantiAd5");
            throw e;
        }


        return inseritoW9aggi;

    }


    public ResponseElaborateAppaltoPcp elaboratSchedaP110Type(SchedaP110Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                              String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP bt-765 - Framework agreement*/
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);

                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }
                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP10Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            lotto.setLuogoIstat(l.getCodIstat().getCodice());
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }
                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                            lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                        }
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice())));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP110Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaboratSchedaP111Type(SchedaP111Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                              String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);

                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP11Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            lotto.setLuogoIstat(l.getCodIstat().getCodice());
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                            lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                        }
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP111Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP112Type(SchedaP112Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP12Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP112Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP113Type(SchedaP113Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP13Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP113Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborattSchedaP114Type(SchedaP114Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {

        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP14Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        lotto.setImportoSicurezza(0D);
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            lotto.setLuogoIstat(l.getCodIstat().getCodice());
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP114Type",e);
            throw e;
        }
        return res;

    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP1152Type(SchedaP1152Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                                String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP15Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                            lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP1152Type",e);
            throw e;
        }
        return res;
    }


    private JAXBContext jaxbContext;

    public ContractNoticeType unmarshalContractNoticeType(String xmlString) throws Exception {
        try {
            jaxbContext = JAXBContext.newInstance(ObjectFactory.class);
            // Unmarshallers are not thread-safe.  Create a new one every time.
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            StringReader reader = new StringReader(xmlString);
            JAXBElement<ContractNoticeType> a =  (JAXBElement<ContractNoticeType>)unmarshaller.unmarshal(reader);
            return a.getValue();
        } catch (Exception e) {
            throw new Exception(e);
        }
    }

    public ContractAwardNoticeType unmarshalContractAwardNoticeType(String xmlString) throws Exception {
        try {
            jaxbContext = JAXBContext.newInstance(oasis.names.specification.ubl.schema.xsd.contractawardnotice_2.ObjectFactory.class);
            // Unmarshallers are not thread-safe.  Create a new one every time.
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            StringReader reader = new StringReader(xmlString);
            JAXBElement<ContractAwardNoticeType> a =  (JAXBElement<ContractAwardNoticeType>)unmarshaller.unmarshal(reader);
            return a.getValue();
        } catch (Exception e) {
            throw new Exception(e);
        }
    }

    public PriorInformationNoticeType unmarshalPriorInformationNoticeType(String xmlString) throws Exception {
        try {
            jaxbContext = JAXBContext.newInstance(oasis.names.specification.ubl.schema.xsd.priorinformationnotice_2.ObjectFactory.class);
            // Unmarshallers are not thread-safe.  Create a new one every time.
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            StringReader reader = new StringReader(xmlString);
            JAXBElement<PriorInformationNoticeType> a =  (JAXBElement<PriorInformationNoticeType>)unmarshaller.unmarshal(reader);
            return a.getValue();
        } catch (Exception e) {
            throw new Exception(e);
        }
    }

    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
    public ResponseElaborateAppaltoPcp elaborateSchedaP116Type(SchedaP116Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }
                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP16Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                            lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                        }
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP116Type",e);
            throw e;
        }
        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP117Type(SchedaP117Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP17Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                            lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                        }
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP117Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP118Type(SchedaP118Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP18Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        lotto.setImportoSicurezza(0D);
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//						if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
//							if(l.getCodIstat().getCodice().length() >= 6) {
//								List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
//								if(cod != null && cod.size() > 0) {
//									lotto.setLuogoIstat(cod.get(0));
//								}
//							}
//						}

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP118Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP119Type(SchedaP119Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {


        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP19Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        lotto.setImportoSicurezza(0D);
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP119Type",e);
            throw e;
        }
        return res;


    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP120Type(SchedaP120Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP20Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP120Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP121Type(SchedaP121Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP21Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);
                        lotto.setImportoSicurezza(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        if(l.getQuadroEconomicoStandard() != null) {
                            lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                        }
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")) - lotto.getImportoSicurezza());
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                            lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                        }
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP121Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP123Type(SchedaP123Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP23Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        lotto.setImportoSicurezza(0D);
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP123Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP124Type(SchedaP124Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try {
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * OGGETTO bt-24 - Description
             * CIG_ACCQUADRO
             * TIPO_APP */
            Map<String,Map<String,String>> datiEform = null;
            if(scheda.getEform() != null) {
                String eFormType = mapSchedaEformType.get(codiceScheda);
                if(eFormType.equals("PIN")) {
                    PriorInformationNoticeType eform = unmarshalPriorInformationNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformPIN(eform);
                } else if(eFormType.equals("CN")) {
                    ContractNoticeType eform = unmarshalContractNoticeType(new String(Base64.decodeBase64(scheda.getEform().getBytes()), StandardCharsets.UTF_8));
                    datiEform = prelevaDatiEformCN(eform);
                }
            }



            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("tipoProcedura")))) {
                    tipoProcedura = datiEform.get("gara").get("tipoProcedura");
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String codAusa = null;
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("oggetto")))) {
                    gara.setOggetto(datiEform.get("gara").get("oggetto"));
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("dataScadenzaOfferta")))) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");;
                    gara.setDataScadPresentazioneOfferta(sdf.parse(datiEform.get("gara").get("dataScadenzaOfferta")));
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(datiEform != null) {
                    for (Map.Entry<String,Map<String,String>> entry : datiEform.entrySet()) {
                        if(entry != null && entry.getKey() != null && entry.getValue() != null && datiEform.get(entry.getKey()).get("tipoContratto") != null) {
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, datiEform.get(entry.getKey()).get("tipoContratto"));
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }
                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(datiEform != null && (datiEform.get("gara") != null && StringUtils.isNotBlank(datiEform.get("gara").get("urlDocumentazione")))) {
                    gara.setUrlDocumentazione(datiEform.get("gara").get("urlDocumentazione"));
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP24Type l : scheda.getAnacForm().getLotti()) {
                        lotto = new LottoInsertForm();
                        /*
                         * W9LOTT mancano:
                         * OGGETTO  bt-24 - Description
                         * IMPORTO_TOT  bt-27 - Estimated Value
                         * IMPORTO_LOTTO  bt-27 - Estimated Value
                         * TIPO_CONTRATTO  bt-23 - Main Nature
                         * ID_MODO_GARA  bt-539 - Award Criterion Type
                         * LUOGO_NUTS  bt-5071 - Place Performance Country Subdivision
                         * */
                        lotto.setImportoTotale(0D);
                        lotto.setImportoNetto(0D);

                        lotto.setCodGara(codGara);
                        lotto.setCodLotto(codLotto);
                        lotto.setImportoSicurezza(0D);
                        lotto.setNumLotto(codLotto);

                        lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                        if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                            if(l.getCodIstat().getCodice().length() >= 6) {
                                List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                if(cod != null && cod.size() > 0) {
                                    lotto.setLuogoIstat(cod.get(0));
                                }
                            }
                        }

                        if(gara.getCodiceTecnico() != null) {
                            lotto.setRup(gara.getCodiceTecnico());
                        }

                        lotto.setDataConsultaGara(new Date());
                        if(StringUtils.isNotBlank(l.getLotIdentifier())) {


                            if(datiEform != null && datiEform.get(l.getLotIdentifier()) != null) {
                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("oggetto"))) {
                                    lotto.setOggetto(datiEform.get(l.getLotIdentifier()).get("oggetto"));
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("tipoContratto"))) {
                                    lotto.setTipologia(datiEform.get(l.getLotIdentifier()).get("tipoContratto"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("importo"))) {
                                    lotto.setImportoTotale(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                    lotto.setImportoNetto(Double.valueOf(datiEform.get(l.getLotIdentifier()).get("importo")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione"))) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(datiEform.get(l.getLotIdentifier()).get("criteriAggiudicazione")));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("luogoNuts"))) {
                                    lotto.setLuogoNuts(datiEform.get(l.getLotIdentifier()).get("luogoNuts"));
                                }

                                if(StringUtils.isNotBlank(datiEform.get(l.getLotIdentifier()).get("cpv"))) {
                                    lotto.setCpv(datiEform.get(l.getLotIdentifier()).get("cpv"));
                                }

                            }



                            lotto.setLotIdentifier(l.getLotIdentifier());
                            if(lotIdCigMap != null) {
                                String cig = lotIdCigMap.get(l.getLotIdentifier());
                                if(StringUtils.isNotBlank(cig)) {
                                    lotto.setCig(cig);
                                    cigCodLotMap.put(cig, codLotto);
                                    cigLotIdMap.put(cig, l.getLotIdentifier());
                                    if(codgara != null) {
                                        codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                        lotto.setCodLotto(codLotto);
                                    }
                                }
                            }
                        }
                        lotto.setDaExport("2");
                        lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                        if(codgara != null) {
                            Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                            Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                            boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                            boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                            if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                            }
                        }
                        lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                        lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                        if(codgara != null) {
                            this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                            this.contrattiMapper.updateLottoPcp(lotto);
                        } else {
                            this.contrattiMapper.insertLotto(lotto);
                        }
                        if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                            Long prog = 1L;
                            for (String cup : l.getCupLotto()) {
                                this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                prog++;
                            }
                        }

                        codLotto++;
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }

        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP124Type",e);
            throw e;
        }
        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP210Type(SchedaP210Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP210Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP210Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP210Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);

                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP210Type");
            throw e;
        }

        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP211Type(SchedaP211Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP211Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP211Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP211Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP211Type");
            throw e;
        }

        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP212Type(SchedaP212Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP212Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP212Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP212Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP212Type");
            throw e;
        }

        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP213Type(SchedaP213Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }



                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP213Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP213Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP213Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP213Type");
            throw e;
        }

        return res;
    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP214Type(SchedaP214Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {

        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP214Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP214Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP214Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP214Type");
            throw e;
        }

        return res;


    }


    public ResponseElaborateAppaltoPcp elaborateSchedaP216Type(SchedaP216Type scheda, String codein, String codiceScheda, Map<String,String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto,
                                                               Long syscon, Long codgara, Date dataCreazione) throws Exception,UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }

                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP216Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP216Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP216Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP216Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP217Type(SchedaP217Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP217Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP217Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP217Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP217Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP218Type(SchedaP218Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP218Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP218Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP218Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));

//							if(l.getCodIstat().getCodice().length() >= 6) {
//								List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
//								if(cod != null && cod.size() > 0) {
//									lotto.setLuogoIstat(cod.get(0));
//								}
//							}

                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP218Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP219Type(SchedaP219Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {

        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP219Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP219Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP219Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP219Type");
            throw e;
        }

        return res;


    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP220Type(SchedaP220Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione)  throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP220Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }


                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP220Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP220Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP220Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP221Type(SchedaP221Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP221Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP221Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP221Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP221Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP223Type(SchedaP223Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP223Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP223Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP223Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP223Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP224Type(SchedaP224Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                               String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP224Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP224Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {


                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP224Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP224Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP31Type(SchedaP31Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                              String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP31Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP31Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP31Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP31Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP32Type(SchedaP32Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP32Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP32Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP32Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP32Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP33Type(SchedaP33Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti,
                                                              String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException,SottoSogliaLottoException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP33Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP33Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP33Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }

                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP33Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP34Type(SchedaP34Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP34Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP34Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP34Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP34Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP35Type(SchedaP35Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP35Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP35Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP35Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP35Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP41Type(SchedaP41Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP41Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP41Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP41Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP41Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP42Type(SchedaP42Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP42Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP42Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP42Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP42Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP43Type(SchedaP43Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP43Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP43Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP43Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP43Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP44Type(SchedaP44Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP44Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP44Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP44Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP44Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP45Type(SchedaP45Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP45Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP45Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP45Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP45Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP46Type(SchedaP46Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP4BaseType l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP4BaseType::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP4BaseType l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP46Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP5Type(SchedaP5Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP5Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null && l.getDatiBase() != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP5Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);

                            if(l.getDatiBase() != null && StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                lotto.setOggetto(l.getDatiBase().getOggetto());
                                String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                lotto.setOggetto(oggetto);
                            }
                            if(l.getDatiBase() != null && l.getDatiBase().getImporto() != null) {
                                lotto.setImportoTotale(l.getDatiBase().getImporto());
                                lotto.setImportoNetto(l.getDatiBase().getImporto());
                            }
                            if( l.getDatiBase() != null && l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                            }


//							if(l.getDatiBaseAggiudicazione() != null) {
//								if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
//									lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
//								}
//							}

//							if(l.getDatiBaseContratto() != null) {
//								if(l.getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
//									lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
//								}
//							}

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//							if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
//								if(l.getCodIstat().getCodice().length() >= 6) {
//									List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
//									if(cod != null && cod.size() > 0) {
//										lotto.setLuogoIstat(cod.get(0));
//									}
//								}
//							}
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setEsenteCup("1");
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP5Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP61Type(SchedaP61Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP61Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP61Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP61Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto());
                                    lotto.setImportoNetto(l.getDatiBase().getImporto());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setImportoSicurezza(0D);
                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP61Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP62Type(SchedaP62Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
//				if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
//					gara.setSommaUrgenza((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())));
//				}

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP62Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP62Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP62Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP62Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP711Type(SchedaP711Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP711Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP711Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP711Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP711Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP712Type(SchedaP712Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP712Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP712Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP712Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP712Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP713Type(SchedaP713Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);

                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }


                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");
							
							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP713Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP713Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP713Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP713Type");
            throw e;
        }

        return res;
    }

    public ResponseElaborateAppaltoPcp elaborateSchedaP72Type(SchedaP72Type scheda, String codein, String codiceScheda, Map<String, String> lotIdCigMap, List<Map<String, Object>> soggetti, String idAppalto, Long syscon, Long codgara, Date dataCreazione) throws Exception, UnauthorizedSAException {
        ResponseElaborateAppaltoPcp res = new ResponseElaborateAppaltoPcp();
        Map<String,Long> cigCodLotMap = new HashMap<String,Long>();
        Map<String,String> cigLotIdMap = new HashMap<String,String>();
        try{
            GaraInsertForm gara = new GaraInsertForm();
            /*
             * W9GARA mancano:
             * CIG_ACCQUADRO
             * TIPO_APP*/
            if(scheda != null && scheda.getAnacForm() != null) {
                String tipoProcedura = null;
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura() != null && scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura() != null) {
                    tipoProcedura = scheda.getAnacForm().getAppalto().getDatiBaseProcedura().getTipoProcedura().getCodice();
                }
                String cfSa = this.contrattiMapper.getCFSAByCode(codein);
                String funzioniSvolte = null;
                String nomeSaTitolare = "";
                String cfSaTitolare = "";
                Boolean thereIsSA = false;
                for (StazioneAppaltanteType sa : scheda.getAnacForm().getStazioniAppaltanti()) {
                    if(sa.getCodiceFiscale().equals(cfSa)) {
                        thereIsSA = true;
                        if(sa.isSaTitolare() != null && sa.isSaTitolare()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale())) {
                                nomeSaTitolare = this.contrattiMapper.getNominativoSaByCf(sa.getCodiceFiscale());
                                cfSaTitolare = sa.getCodiceFiscale();
                            }
                            Long idCentroCosto = this.inserisciCentroCosto(sa.getCodiceCentroCosto(),codein);
                            gara.setIdCentroDiCosto(idCentroCosto);
                        }
                        if(sa.getFunzioniSvolte() != null && sa.getFunzioniSvolte().size() > 0 && StringUtils.isNotBlank(sa.getFunzioniSvolte().get(0).getCodice())) {
                            funzioniSvolte = sa.getFunzioniSvolte().get(0).getCodice();
                        }

                    }
                }
                if(!thereIsSA && codein != null) {
                    throw new UnauthorizedSAException("Stazione appaltante non abilitata");
                }
                gara.setFlagSaAgente(!scheda.getAnacForm().getStazioniAppaltanti().isEmpty() && scheda.getAnacForm().getStazioniAppaltanti().size() > 1 ? 1L : 2L);
                if(gara.getFlagSaAgente() == 1L) {
                    gara.setCfAgenteStazioneAppaltante(cfSaTitolare);
                    gara.setDenomSoggStazioneAppaltante(nomeSaTitolare);
                }

                Long codGara = codgara != null ? codgara : this.wgcManager.getNextId("W9GARA");;
                gara.setCodgara(codGara);
                res.setCodGara(codGara);
                gara.setIdAppalto(idAppalto);
                gara.setIdentificativoGara(idAppalto);

                gara.setSyscon(syscon);
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    gara.setNumLotti(Long.valueOf(scheda.getAnacForm().getLotti().size()));
                } else {
                    gara.setNumLotti(0L);
                }
                if(scheda.getAnacForm().getAppalto() != null && scheda.getAnacForm().getAppalto().getDatiBase() != null &&  StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto())) {
                    gara.setOggetto(scheda.getAnacForm().getAppalto().getDatiBase().getOggetto());
                    String oggetto = gara.getOggetto().substring(0, Math.min(1024, gara.getOggetto().length()));
                    gara.setOggetto(oggetto);
                }
                gara.setCodiceStazioneAppaltante(codein);
                gara.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                if(scheda.getAnacForm().getAppalto().getMotivoUrgenza() != null && StringUtils.isNotBlank(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) {
                    if((Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != null && (Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice())) != 7) {
                        gara.setSommaUrgenza(1L);
                    } else {
                        gara.setSommaUrgenza(2L);
                    }
                    gara.setMotivoSommaUrgenza(Long.valueOf(scheda.getAnacForm().getAppalto().getMotivoUrgenza().getCodice()));
                }

                if(StringUtils.isNotBlank(funzioniSvolte)) {
                    gara.setIdFDelegate(Long.valueOf(funzioniSvolte));
                }
                gara.setProvenienzaDato(5L);
                gara.setVersioneSimog(9L);
                gara.setSituazione(1L);
                if(soggetti != null && soggetti.size() > 0) {
                    for (Map<String, Object> soggetto : soggetti) {
                        if(soggetto != null && soggetto.get("codiceFiscale") != null) {
                            List<RupEntry> tecList = this.contrattiMapper.getTecnicoByCfAndSaList((String)soggetto.get("codiceFiscale"), codein);
                            RupEntry tec = tecList != null && !tecList.isEmpty() ? tecList.get(0) : null;
                            if(tec == null) {
                                tec = new RupEntry();
                                String codtec = this.calcolaCodificaAutomatica("TECNI", "CODTEC");
                                tec.setCodice(codtec);
                                tec.setNome("-");
                                tec.setCognome("-");
                                tec.setNominativo("-");
                                tec.setCf((String)soggetto.get("codiceFiscale"));
                                tec.setStazioneAppaltante(codein);
                                this.contrattiMapper.insertRUP(tec);
                            }

                            							Map<String, Object> ruolo = (Map<String, Object>) soggetto.get("ruolo");
							String codiceRuolo = (String) ruolo.get("codice");

							if(codiceRuolo != null && StringUtils.isNotBlank(codiceRuolo)) {
                                if(codiceRuolo.equals("RP")) {
                                    gara.setCodiceTecnico(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP3")) {
                                    gara.setDrp(tec.getCodice());
                                } else if(codiceRuolo.equals("DRP2") && StringUtils.isBlank(gara.getDrp())) {
                                    gara.setDrp(tec.getCodice());
                                }
                            }
                        }
                    }
                }

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    for (LottoP72Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            String tipologia = mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice());
                            Long tipoApp = schedePcpUtils.calculateTipoApp(codiceScheda, tipologia);
                            gara.setTipoApp(tipoApp);
                            break;
                        }
                    }

                }
                OffsetDateTime dataScadPresentazioneOfferta = scheda.getAnacForm().getLotti().stream()
                        .map(lotto -> {
                            if (lotto == null || lotto.getDatiBaseTerminiInvio() == null) {
                                return null;
                            }
                            return lotto.getDatiBaseTerminiInvio().getOraScadenzaPresentazioneOfferte();
                        })
                        .filter(oraScadenza -> oraScadenza != null)
                        .findFirst()
                        .orElse(null);
                gara.setDataScadPresentazioneOfferta(SchedePcpUtils.offsetDateTimeToDate(dataScadPresentazioneOfferta));

                Double importoGara = 0D;
                gara.setImportoGara(importoGara);

                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    List<String> urlDocumentazioni = scheda.getAnacForm().getLotti().stream()
                            .map(LottoP72Type::getDatiBaseDocumenti)
                            .filter(Objects::nonNull)
                            .map(DatiBaseDocumentiOptionalType::getUrl)
                            .filter(url -> url != null && !url.isEmpty())
                            .collect(Collectors.toList());
                    String primoUrlDocumentazione = urlDocumentazioni.isEmpty() ? null : urlDocumentazioni.get(0);
                    gara.setUrlDocumentazione(primoUrlDocumentazione);
                }
                if(codgara != null) {
                    this.contrattiMapper.updateGaraPcp(gara);
                } else {
                    this.contrattiMapper.insertGara(gara);
                }
                if(scheda.getAnacForm().getLotti() != null && scheda.getAnacForm().getLotti().size() > 0) {
                    Long codLotto = 1L;
                    LottoInsertForm lotto = new LottoInsertForm();
                    for (LottoP72Type l : scheda.getAnacForm().getLotti()) {
                        if(l != null) {
                            lotto = new LottoInsertForm();
                            lotto.setCodGara(codGara);
                            lotto.setCodLotto(codLotto);
                            lotto.setImportoTotale(0D);
                            lotto.setImportoNetto(0D);
                            lotto.setImportoSicurezza(0D);
                            if(l.getQuadroEconomicoStandard() != null) {
                                lotto.setImportoSicurezza(l.getQuadroEconomicoStandard().getImpTotaleSicurezza() != null ? l.getQuadroEconomicoStandard().getImpTotaleSicurezza() : 0D);
                            }
                            if(l.getDatiBase() != null) {
                                if(StringUtils.isNotBlank(l.getDatiBase().getOggetto())) {
                                    lotto.setOggetto(l.getDatiBase().getOggetto());
                                    String oggetto = lotto.getOggetto().substring(0, Math.min(1024, lotto.getOggetto().length()));
                                    lotto.setOggetto(oggetto);
                                }
                                if(l.getDatiBase().getImporto() != null) {
                                    lotto.setImportoTotale(l.getDatiBase().getImporto() != null ? l.getDatiBase().getImporto() : 0D);
                                    lotto.setImportoNetto(lotto.getImportoTotale() - lotto.getImportoSicurezza());
                                }
                                if(l.getDatiBase().getOggettoContratto() != null && StringUtils.isNotBlank(l.getDatiBase().getOggettoContratto().getCodice())) {
                                    lotto.setTipologia(mapOggettoContratto.get(l.getDatiBase().getOggettoContratto().getCodice()));
                                }
                            }

                            if(l.getDatiBaseAggiudicazione() != null) {
                                if(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione() != null && StringUtils.isNotBlank(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())) {
                                    lotto.setCriteriAggiudicazione(Long.valueOf(mapCriteriAggiudicazione.get(l.getDatiBaseAggiudicazione().getCriteriAggiudicazione().getCodice())));
                                }
                            }

                            if(l.getDatiBaseContratto() != null) {
                                if(l.getDatiBaseContratto().getCodNUTS() != null && StringUtils.isNotBlank(l.getDatiBaseContratto() .getCodNUTS().getCodice())) {
                                    lotto.setLuogoNuts(l.getDatiBaseContratto() .getCodNUTS().getCodice());
                                }
                            }

                            if(gara.getCodiceTecnico() != null) {
                                lotto.setRup(gara.getCodiceTecnico());
                            }

                            lotto.setNumLotto(codLotto);
                            lotto.setTipoSettore(schedePcpUtils.calculateFlagEnteSpeciale(codiceScheda));
                            if(l.getCodIstat() != null && StringUtils.isNotBlank(l.getCodIstat().getCodice())) {
                                if(l.getCodIstat().getCodice().length() >= 6) {
                                    List<String> cod = this.contrattiMapper.getCodistatlikeCodistat(l.getCodIstat().getCodice());
                                    if(cod != null && cod.size() > 0) {
                                        lotto.setLuogoIstat(cod.get(0));
                                    }
                                }
                            }
                            lotto.setDataConsultaGara(new Date());
                            if(StringUtils.isNotBlank(l.getLotIdentifier())) {
                                lotto.setLotIdentifier(l.getLotIdentifier());
                                if(lotIdCigMap != null) {
                                    String cig = lotIdCigMap.get(l.getLotIdentifier());
                                    if(StringUtils.isNotBlank(cig)) {
                                        lotto.setCig(cig);
                                        cigCodLotMap.put(cig, codLotto);
                                        cigLotIdMap.put(cig, l.getLotIdentifier());
                                        if(codgara != null) {
                                            codLotto = this.contrattiMapper.getCodLottByCig(cig, codgara);
                                            lotto.setCodLotto(codLotto);
                                        }
                                    }
                                }
                            }
                            lotto.setDaExport("2");
                            lotto.setCup(l.getCupLotto() != null && !l.getCupLotto().isEmpty() ? l.getCupLotto().get(0) : null);
                            if(lotto.getCup() != null && lotto.getCup().length() > 15) {
                                lotto.setCup(null);
                            }
                            lotto.setEsenteCup(lotto.getCup() != null ? "2" : "1");
                            if(l.getDatiBaseCPV() != null && l.getDatiBaseCPV().getCpvPrevalente() != null && StringUtils.isNotBlank(l.getDatiBaseCPV().getCpvPrevalente().getCodice())) {
                                lotto.setCpv(l.getDatiBaseCPV().getCpvPrevalente().getCodice());
                            }
                            lotto.setExsottosoglia(codiceScheda.equals(FasiPcp.SCHEDAAD5) ? "1" : "2");
                            if(codgara != null) {
                                Boolean aaqPcp = gara.getTipoApp() != null && (11L == gara.getTipoApp() || 21 == gara.getTipoApp());
                                Boolean s4Pcp = (lotto.getExsottosoglia() == null || "2".equals(lotto.getExsottosoglia()))  || aaqPcp;
                                boolean sc1Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 13L) > 0L ? true : false;
                                boolean co2Present = this.contrattiMapper.getFase(codGara, Long.valueOf(lotto.getCodLotto()), 19L) > 0L ? true : false;

                                if((s4Pcp && co2Present) || (!s4Pcp && sc1Present)) {
                                    throw new SottoSogliaLottoException(BaseResponse.ERROR_RIALLINEA_ANAC_S4);
                                }
                            }
                            lotto.setSceltaContraente(calculateIdSceltaContr(codiceScheda,tipoProcedura));
                            lotto.setClasseCategoriaPrev(calculateClasseCatPrev(lotto.getImportoTotale()));
                            if(l.getPrestazioniComprese() != null && l.getPrestazioniComprese().getCodice() != null) {
                                lotto.setPrestazioneComprese(Long.valueOf(l.getPrestazioniComprese().getCodice()));
                            }
                            if(l.getCategorieMerceologiche() != null && !l.getCategorieMerceologiche().isEmpty() && l.getCategorieMerceologiche().get(0).getCodice() != null) {
                                lotto.setCategoriaMerceologica(Long.valueOf(l.getCategorieMerceologiche().get(0).getCodice()));
                            }
                            if(codgara != null) {
                                this.contrattiMapper.deleteW9LottoCup(codGara, codLotto);
                                this.contrattiMapper.updateLottoPcp(lotto);
                            } else {
                                this.contrattiMapper.insertLotto(lotto);
                            }
                            if(l.getCupLotto() != null && l.getCupLotto().size() > 0) {
                                Long prog = 1L;
                                for (String cup : l.getCupLotto()) {
                                    if(cup != null && cup.length() <= 15) {
                                        this.contrattiMapper.insertW9lottcup(codGara, codLotto, prog, cup, null);
                                        prog++;
                                    }
                                }
                            }

                            codLotto++;
                        }
                    }
                    res.setCigCodLotMap(cigCodLotMap);
                    res.setCigLotIdMap(cigLotIdMap);
                }

            }
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: elaborateSchedaP72Type");
            throw e;
        }

        return res;
    }

    private Map<String, Map<String, String>> prelevaDatiEformPIN(PriorInformationNoticeType eform) {
        Map<String, Map<String, String>> result = new HashMap<String, Map<String, String>>();

        Map<String, String> datiLotto = new HashMap<String, String>();

        try {
            if(eform != null) {
                Map<String, String> datiGara = new HashMap<String, String>();
                if(eform.getProcurementProject() != null) {
                    if(eform.getProcurementProject().getDescription() != null && eform.getProcurementProject().getDescription().size() > 0) {
                        if(eform.getProcurementProject().getDescription().get(0) != null &&
                                StringUtils.isNotBlank(eform.getProcurementProject().getDescription().get(0).getValue())) {
                            datiGara.put("oggetto", eform.getProcurementProject().getDescription().get(0).getValue());
                        }
                    }
                    if(eform.getProcurementProject().getRequestedTenderTotal() != null &&
                            eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount() != null &&
                            eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue() != null) {
                        datiGara.put("importo", eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue().toString());
                    }
                }
                if(eform.getTenderingProcess() != null) {
                    if(eform.getTenderingProcess().getProcedureCode() != null && eform.getTenderingProcess().getProcedureCode().getValue() != null) {
                        datiGara.put("tipoProcedura", eform.getTenderingProcess().getProcedureCode().getValue().toString());
                    }
                }

                if(eform.getProcurementProjectLot() != null) {

                    for (oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.ProcurementProjectLotType procurementProjectLot : eform.getProcurementProjectLot()) {
                        datiLotto = new HashMap<String, String>();

                        if(procurementProjectLot.getProcurementProject() != null) {

                            if(procurementProjectLot.getProcurementProject().getProcurementTypeCode() != null && StringUtils.isNotBlank(procurementProjectLot.getProcurementProject().getProcurementTypeCode().getValue())) {
                                datiLotto.put("tipoContratto", mapOggettoContratto.get(procurementProjectLot.getProcurementProject().getProcurementTypeCode().getValue()));
                            }

                            if(procurementProjectLot.getProcurementProject().getDescription() != null && StringUtils.isNotBlank(procurementProjectLot.getProcurementProject().getDescription().get(0).getValue())) {
                                datiLotto.put("oggetto", procurementProjectLot.getProcurementProject().getDescription().get(0).getValue());
                            }

                            if(procurementProjectLot.getProcurementProject().getRequestedTenderTotal() != null && procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount() != null && procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue() != null) {
                                datiLotto.put("importo", procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue().toString());
                            }

                            if(procurementProjectLot.getProcurementProject().getRealizedLocation() != null &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().size() > 0 &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().get(0) != null &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress() != null) {
                                if(procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode() != null &&
                                        procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getListName() != null &&
                                        procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getListName().equals("nuts"))
                                    datiLotto.put("luogoNuts",procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getValue());
                            }

                            List<String> awardType = new ArrayList<String>();
                            if(procurementProjectLot.getTenderingTerms() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms() != null  &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().size() > 0 &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0) != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion().size() > 0) {
                                for (oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.AwardingCriterionType subAward : procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion()) {
                                    if(subAward.getAwardingCriterionTypeCode() != null && subAward.getAwardingCriterionTypeCode().getListName() != null && subAward.getAwardingCriterionTypeCode().getListName().equals("award-criterion-type")) {
                                        awardType.add(subAward.getAwardingCriterionTypeCode().getValue());
                                    }
                                }
                            }
                            if(awardType.size() > 0) {
                                if(awardType.contains("cost") || (awardType.contains("price") && awardType.contains("quality"))) {
                                    datiLotto.put("criteriAggiudicazione","3");
                                } else if(awardType.contains("price")) {
                                    datiLotto.put("criteriAggiudicazione","4");
                                } else if(awardType.contains("quality")) {
                                    datiLotto.put("criteriAggiudicazione","5");
                                }
                            }


                            if(procurementProjectLot.getProcurementProject().getMainCommodityClassification() != null &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().size() > 0 &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0) != null &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0).getItemClassificationCode() != null &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0).getItemClassificationCode().getValue() != null)  {
                                datiLotto.put("cpv",procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0).getItemClassificationCode().getValue());
                            }
                        }

                        if(datiGara.get("dataScadenzaOfferta") != null && procurementProjectLot.getTenderingProcess() != null &&
                                procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod() != null &&
                                procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod().getEndDate() != null){
                            datiGara.put("dataScadenzaOfferta", procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod().getEndDate().getValue().toString());
                        }

                        if(datiGara.get("urlDocumentazione") != null && procurementProjectLot.getTenderingTerms() != null &&
                                procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference() != null &&
                                !procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().isEmpty() &&
                                procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment() != null &&
                                procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference() != null &&
                                procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference().getURI() != null){
                            datiGara.put("urlDocumentazione",procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference().getURI().getValue());
                        }

                        result.put(procurementProjectLot.getID().getValue(), datiLotto);
                    }
                }
                result.put("gara", datiGara);
            }

        }catch (Exception e) {
            logger.error("Errore in fase di lettura eform: prelevaDatiEformPIN");
            throw e;
        }



        return result;
    }


    private Map<String, Map<String, String>> prelevaDatiEformCN(ContractNoticeType eform) {
        Map<String, Map<String, String>> result = new HashMap<String, Map<String, String>>();

        Map<String, String> datiLotto = new HashMap<String, String>();

        try {
            if(eform != null) {
                Map<String, String> datiGara = new HashMap<String, String>();
                if(eform.getProcurementProject() != null) {
                    if(eform.getProcurementProject().getDescription() != null && eform.getProcurementProject().getDescription().size() > 0) {
                        if(eform.getProcurementProject().getDescription().get(0) != null &&
                                StringUtils.isNotBlank(eform.getProcurementProject().getDescription().get(0).getValue())) {
                            datiGara.put("oggetto", eform.getProcurementProject().getDescription().get(0).getValue());
                        }
                    }
                    if(eform.getProcurementProject().getRequestedTenderTotal() != null &&
                            eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount() != null &&
                            eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue() != null) {
                        datiGara.put("importo", eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue().toString());
                    }
                }
                if(eform.getTenderingProcess() != null) {
                    if(eform.getTenderingProcess().getProcedureCode() != null && eform.getTenderingProcess().getProcedureCode().getValue() != null) {
                        datiGara.put("tipoProcedura", eform.getTenderingProcess().getProcedureCode().getValue().toString());
                    }
                }

                if(eform.getProcurementProjectLot() != null) {

                    for (oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.ProcurementProjectLotType procurementProjectLot : eform.getProcurementProjectLot()) {
                        datiLotto = new HashMap<String, String>();

                        if(procurementProjectLot.getProcurementProject() != null) {

                            if(procurementProjectLot.getProcurementProject().getProcurementTypeCode() != null && StringUtils.isNotBlank(procurementProjectLot.getProcurementProject().getProcurementTypeCode().getValue())) {
                                datiLotto.put("tipoContratto", mapOggettoContratto.get(procurementProjectLot.getProcurementProject().getProcurementTypeCode().getValue()));
                            }

                            if(procurementProjectLot.getProcurementProject().getDescription() != null && StringUtils.isNotBlank(procurementProjectLot.getProcurementProject().getDescription().get(0).getValue())) {
                                datiLotto.put("oggetto", procurementProjectLot.getProcurementProject().getDescription().get(0).getValue());
                            }

                            if(procurementProjectLot.getProcurementProject().getRequestedTenderTotal() != null && procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount() != null && procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue() != null) {
                                datiLotto.put("importo", procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue().toString());
                            }

                            if(procurementProjectLot.getProcurementProject().getRealizedLocation() != null &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().size() > 0 &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().get(0) != null &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress() != null) {
                                if(procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode() != null &&
                                        procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getListName() != null &&
                                        procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getListName().equals("nuts"))
                                    datiLotto.put("luogoNuts",procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getValue());
                            }

                            List<String> awardType = new ArrayList<String>();
                            if(procurementProjectLot.getTenderingTerms() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms() != null  &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().size() > 0 &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0) != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion().size() > 0) {
                                for (oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.AwardingCriterionType subAward : procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion()) {
                                    if(subAward.getAwardingCriterionTypeCode() != null && subAward.getAwardingCriterionTypeCode().getListName() != null && subAward.getAwardingCriterionTypeCode().getListName().equals("award-criterion-type")) {
                                        awardType.add(subAward.getAwardingCriterionTypeCode().getValue());
                                    }
                                }
                            }
                            if(awardType.size() > 0) {
                                if(awardType.contains("cost") || (awardType.contains("price") && awardType.contains("quality"))) {
                                    datiLotto.put("criteriAggiudicazione","3");
                                } else if(awardType.contains("price")) {
                                    datiLotto.put("criteriAggiudicazione","4");
                                } else if(awardType.contains("quality")) {
                                    datiLotto.put("criteriAggiudicazione","5");
                                }
                            }

                            if(procurementProjectLot.getProcurementProject().getMainCommodityClassification() != null &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().size() > 0 &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0) != null &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0).getItemClassificationCode() != null &&
                                    procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0).getItemClassificationCode().getValue() != null)  {
                                datiLotto.put("cpv",procurementProjectLot.getProcurementProject().getMainCommodityClassification().get(0).getItemClassificationCode().getValue());
                            }

                            if(datiGara.get("dataScadenzaOfferta") != null && procurementProjectLot.getTenderingProcess() != null &&
                                    procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod() != null &&
                                    procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod().getEndDate() != null){
                                datiGara.put("dataScadenzaOfferta", procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod().getEndDate().getValue().toString());
                            }

                            if(datiGara.get("urlDocumentazione") != null && procurementProjectLot.getTenderingTerms() != null &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference() != null &&
                                    !procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().isEmpty() &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment() != null &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference() != null &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference().getURI() != null){
                                datiGara.put("urlDocumentazione",procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference().getURI().getValue());
                            }
                        }
                        result.put(procurementProjectLot.getID().getValue(), datiLotto);
                    }
                }
                result.put("gara", datiGara);
            }
        }catch (Exception e) {
            logger.error("Errore in fase di lettura eform: prelevaDatiEformCN");
            throw e;
        }



        return result;
    }


    private Map<String, Map<String, String>> prelevaDatiEformCAN(ContractAwardNoticeType eform) {
        Map<String, Map<String, String>> result = new HashMap<String, Map<String, String>>();

        Map<String, String> datiLotto = new HashMap<String, String>();

        try {
            if(eform != null) {
                Map<String, String> datiGara = new HashMap<String, String>();
                if(eform.getProcurementProject() != null) {
                    if(eform.getProcurementProject().getDescription() != null && eform.getProcurementProject().getDescription().size() > 0) {
                        if(eform.getProcurementProject().getDescription().get(0) != null &&
                                StringUtils.isNotBlank(eform.getProcurementProject().getDescription().get(0).getValue())) {
                            datiGara.put("oggetto", eform.getProcurementProject().getDescription().get(0).getValue());
                        }
                    }
                    if(eform.getProcurementProject().getRequestedTenderTotal() != null &&
                            eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount() != null &&
                            eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue() != null) {
                        datiGara.put("importo", eform.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue().toString());
                    }
                }
                if(eform.getTenderingProcess() != null) {
                    if(eform.getTenderingProcess().getProcedureCode() != null && eform.getTenderingProcess().getProcedureCode().getValue() != null) {
                        datiGara.put("tipoProcedura", eform.getTenderingProcess().getProcedureCode().getValue().toString());
                    }
                }

                if(eform.getProcurementProjectLot() != null) {

                    for (oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.ProcurementProjectLotType procurementProjectLot : eform.getProcurementProjectLot()) {
                        datiLotto = new HashMap<String, String>();

                        if(procurementProjectLot.getProcurementProject() != null) {

                            if(procurementProjectLot.getProcurementProject().getProcurementTypeCode() != null && StringUtils.isNotBlank(procurementProjectLot.getProcurementProject().getProcurementTypeCode().getValue())) {
                                datiLotto.put("tipoContratto", mapOggettoContratto.get(procurementProjectLot.getProcurementProject().getProcurementTypeCode().getValue()));
                            }

                            if(procurementProjectLot.getProcurementProject().getDescription() != null && StringUtils.isNotBlank(procurementProjectLot.getProcurementProject().getDescription().get(0).getValue())) {
                                datiLotto.put("oggetto", procurementProjectLot.getProcurementProject().getDescription().get(0).getValue());
                            }

                            if(procurementProjectLot.getProcurementProject().getRequestedTenderTotal() != null && procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount() != null && procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue() != null) {
                                datiLotto.put("importo", procurementProjectLot.getProcurementProject().getRequestedTenderTotal().getEstimatedOverallContractAmount().getValue().toString());
                            }

                            if(procurementProjectLot.getProcurementProject().getRealizedLocation() != null &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().size() > 0 &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().get(0) != null &&
                                    procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress() != null) {
                                if(procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode() != null &&
                                        procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getListName() != null &&
                                        procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getListName().equals("nuts"))
                                    datiLotto.put("luogoNuts",procurementProjectLot.getProcurementProject().getRealizedLocation().get(0).getAddress().getCountrySubentityCode().getValue());
                            }

                            List<String> awardType = new ArrayList<String>();
                            if(procurementProjectLot.getTenderingTerms() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms() != null  &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().size() > 0 &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0) != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion() != null &&
                                    procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion().size() > 0) {
                                for (oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.AwardingCriterionType subAward : procurementProjectLot.getTenderingTerms().getAwardingTerms().getAwardingCriterion().get(0).getSubordinateAwardingCriterion()) {
                                    if(subAward.getAwardingCriterionTypeCode() != null && subAward.getAwardingCriterionTypeCode().getListName() != null && subAward.getAwardingCriterionTypeCode().getListName().equals("award-criterion-type")) {
                                        awardType.add(subAward.getAwardingCriterionTypeCode().getValue());
                                    }
                                }
                            }
                            if(awardType.size() > 0) {
                                if(awardType.contains("cost") || (awardType.contains("price") && awardType.contains("quality"))) {
                                    datiLotto.put("criteriAggiudicazione","3");
                                } else if(awardType.contains("price")) {
                                    datiLotto.put("criteriAggiudicazione","4");
                                } else if(awardType.contains("quality")) {
                                    datiLotto.put("criteriAggiudicazione","5");
                                }
                            }

                            if(datiGara.get("dataScadenzaOfferta") != null && procurementProjectLot.getTenderingProcess() != null &&
                                    procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod() != null &&
                                    procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod().getEndDate() != null){
                                datiGara.put("dataScadenzaOfferta", procurementProjectLot.getTenderingProcess().getTenderSubmissionDeadlinePeriod().getEndDate().getValue().toString());
                            }

                            if(datiGara.get("urlDocumentazione") != null && procurementProjectLot.getTenderingTerms() != null &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference() != null &&
                                    !procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().isEmpty() &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment() != null &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference() != null &&
                                    procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference().getURI() != null){
                                datiGara.put("urlDocumentazione",procurementProjectLot.getTenderingTerms().getCallForTendersDocumentReference().get(0).getAttachment().getExternalReference().getURI().getValue());
                            }

                        }

                        result.put(procurementProjectLot.getID().getValue(), datiLotto);
                    }
                }
                result.put("gara", datiGara);
            }
        }catch (Exception e) {
            logger.error("Errore in fase di lettura eform: prelevaDatiEformCAN");
            throw e;
        }



        return result;
    }

    private Map<String, Map<String, String>> prelevaDatiEformAggiudicazioneCAN(ContractAwardNoticeType eform) {
        Map<String, Map<String, String>> result = new HashMap<String, Map<String, String>>();
        //dataAggiudicazione (bt-1451)
        //offertaMassimoRibasso (bt-710 e bt-711)

        Map<String, String> datiAgg = new HashMap<String, String>();

        try {
            if(eform != null) {
                if(eform.getUBLExtensions() != null) {
                    if(eform.getUBLExtensions().getUBLExtension() != null &&
                            eform.getUBLExtensions().getUBLExtension().size() > 0 &&
                            eform.getUBLExtensions().getUBLExtension().get(0) != null) {
                        UBLExtensionType ext = eform.getUBLExtensions().getUBLExtension().get(0);
                        if(ext.getExtensionContent() != null &&
                                ext.getExtensionContent().getEformsExtension() != null &&
                                ext.getExtensionContent().getEformsExtension().getNoticeResult() != null) {

                            if(ext.getExtensionContent().getEformsExtension().getNoticeResult().getLotResult() != null &&
                                    ext.getExtensionContent().getEformsExtension().getNoticeResult().getLotResult().size() > 0) {
                                for (LotResultType lot : ext.getExtensionContent().getEformsExtension().getNoticeResult().getLotResult()) {
                                    if(lot != null) {
                                        if(lot.getLowerTenderAmount() != null && lot.getLowerTenderAmount().getValue() != null) {
                                            datiAgg.put("offertaMinimo" ,lot.getLowerTenderAmount().getValue().toString());
                                        }
                                        if(lot.getHigherTenderAmount() != null && lot.getHigherTenderAmount().getValue() != null) {
                                            datiAgg.put("offertaMassimo" ,lot.getHigherTenderAmount().getValue().toString());
                                        }

                                        if(lot.getSettledContract() != null && lot.getSettledContract().size() > 0 && lot.getSettledContract().get(0) != null
                                                && lot.getSettledContract().get(0).getID() != null && lot.getSettledContract().get(0).getID().getValue() != null) {
                                            String settledContract = lot.getSettledContract().get(0).getID().getValue();
                                            if(ext.getExtensionContent().getEformsExtension().getNoticeResult().getSettledContract() != null &&
                                                    ext.getExtensionContent().getEformsExtension().getNoticeResult().getSettledContract().size() > 0) {
                                                for (SettledContractType sc : ext.getExtensionContent().getEformsExtension().getNoticeResult().getSettledContract()) {
                                                    if(sc != null && sc.getAwardDate() != null) {
                                                        if(sc.getID() != null && sc.getID().getValue() != null && settledContract.equals(sc.getID().getValue())) {
                                                            XMLGregorianCalendar xmlGregorianCalendar = sc.getAwardDate().getValue();
                                                            Date dataAggiudicazione = schedePcpUtils.convertXMLGregorianCalendarToDate(xmlGregorianCalendar);
                                                            datiAgg.put("dataAggiudicazione" ,dataAggiudicazione.toString());
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        if(lot.getTenderLot() != null && lot.getTenderLot().getID() != null && lot.getTenderLot().getID().getSchemeName() != null && lot.getTenderLot().getID().getSchemeName().toLowerCase().equals("lot")) {
                                            result.put(lot.getTenderLot().getID().toString(), datiAgg);
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }catch (Exception e) {
            logger.error("Errore in fase di lettura eform: prelevaDatiEformCAN");
            throw e;
        }

        return result;
    }

    private Long inserisciCentroCosto(String codiceCentroCosto, String codein) {
        try {
            Long countCdc = this.contrattiMapper.getCountcdc(codiceCentroCosto.toUpperCase(),codein);
            if(countCdc == 0) {
                CentroDiCostoInsertForm form = new CentroDiCostoInsertForm();
                Long idCentroCosto = this.contrattiMapper.getMaxIdCentroCosto();
                if (idCentroCosto == null) {
                    idCentroCosto = 1L;
                } else {
                    idCentroCosto = idCentroCosto + 1;
                }
                form.setId(idCentroCosto);
                form.setStazioneAppaltante(codein);
                form.setCodiceCentro(codiceCentroCosto);
                form.setDenominazione(codiceCentroCosto);
                this.contrattiMapper.insertCdc(form);
                return idCentroCosto;
            } else {
                logger.debug("Centro di costo {} - codein {} già presente",codiceCentroCosto,codein);
            }

        }catch (Exception e) {
            logger.error("Errore in fase di inserimento centro di costo, metodo: inserisciCentroCosto", e);
            throw e;
        }
        return null;
    }







    public Boolean getCfSaPcp(SchedaComunicaAppaltoType scheda, String cfSa) {
        ResponseElaborateAppaltoPcp res = null;
        try {
            switch (scheda.getCodice().getCodice()) {
                case FasiPcp.SCHEDAA36:
                    SchedaA36Type schedaA36Type = objectMapper.convertValue(scheda.getBody(), SchedaA36Type.class);
                    if(schedaA36Type.getAnacForm() != null &&
                            schedaA36Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaA36Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaA36Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD125:
                    SchedaAD125Type schedaAD125Type = objectMapper.convertValue(scheda.getBody(), SchedaAD125Type.class);
                    if(schedaAD125Type.getAnacForm() != null &&
                            schedaAD125Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD125Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD125Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD126:
                    SchedaAD126Type schedaAD126Type = objectMapper.convertValue(scheda.getBody(), SchedaAD126Type.class);
                    if(schedaAD126Type.getAnacForm() != null &&
                            schedaAD126Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD126Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD126Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD127:
                    SchedaAD127Type schedaAD127Type = objectMapper.convertValue(scheda.getBody(), SchedaAD127Type.class);
                    if(schedaAD127Type.getAnacForm() != null &&
                            schedaAD127Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD127Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD127Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD128:
                    SchedaAD128Type schedaAD128Type = objectMapper.convertValue(scheda.getBody(), SchedaAD128Type.class);
                    if(schedaAD128Type.getAnacForm() != null &&
                            schedaAD128Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD128Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD128Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD225:
                    SchedaAD225Type schedaAD225Type = objectMapper.convertValue(scheda.getBody(), SchedaAD225Type.class);
                    if(schedaAD225Type.getAnacForm() != null &&
                            schedaAD225Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD225Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD225Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD226:
                    SchedaAD226Type schedaAD226Type = objectMapper.convertValue(scheda.getBody(), SchedaAD226Type.class);
                    if(schedaAD226Type.getAnacForm() != null &&
                            schedaAD226Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD226Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD226Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD227:
                    SchedaAD227Type schedaAD227Type = objectMapper.convertValue(scheda.getBody(), SchedaAD227Type.class);
                    if(schedaAD227Type.getAnacForm() != null &&
                            schedaAD227Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD227Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD227Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD228:
                    SchedaAD228Type schedaAD228Type = objectMapper.convertValue(scheda.getBody(), SchedaAD228Type.class);
                    if(schedaAD228Type.getAnacForm() != null &&
                            schedaAD228Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD228Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD228Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD3:
                    SchedaAD3Type schedaAD3Type = objectMapper.convertValue(scheda.getBody(), SchedaAD3Type.class);
                    if(schedaAD3Type.getAnacForm() != null &&
                            schedaAD3Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD3Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD3Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD4:
                    SchedaAD4Type schedaAD4Type = objectMapper.convertValue(scheda.getBody(), SchedaAD4Type.class);
                    if(schedaAD4Type.getAnacForm() != null &&
                            schedaAD4Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD4Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD4Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAAD5:
                    SchedaAD5Type schedaAD5Type = objectMapper.convertValue(scheda.getBody(), SchedaAD5Type.class);
                    if(schedaAD5Type.getAnacForm() != null &&
                            schedaAD5Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaAD5Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaAD5Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP110:
                    SchedaP110Type schedaP110Type = objectMapper.convertValue(scheda.getBody(), SchedaP110Type.class);
                    if(schedaP110Type.getAnacForm() != null &&
                            schedaP110Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP110Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP110Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP111:
                    SchedaP111Type schedaP111Type = objectMapper.convertValue(scheda.getBody(), SchedaP111Type.class);
                    if(schedaP111Type.getAnacForm() != null &&
                            schedaP111Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP111Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP111Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP112:
                    SchedaP112Type schedaP112Type = objectMapper.convertValue(scheda.getBody(), SchedaP112Type.class);
                    if(schedaP112Type.getAnacForm() != null &&
                            schedaP112Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP112Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP112Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP113:
                    SchedaP113Type schedaP113Type = objectMapper.convertValue(scheda.getBody(), SchedaP113Type.class);
                    if(schedaP113Type.getAnacForm() != null &&
                            schedaP113Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP113Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP113Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP114:
                    SchedaP114Type schedaP114Type = objectMapper.convertValue(scheda.getBody(), SchedaP114Type.class);
                    if(schedaP114Type.getAnacForm() != null &&
                            schedaP114Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP114Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP114Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP1152:
                    SchedaP1152Type schedaP1152Type = objectMapper.convertValue(scheda.getBody(), SchedaP1152Type.class);
                    if(schedaP1152Type.getAnacForm() != null &&
                            schedaP1152Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP1152Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP1152Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP116:
                    SchedaP116Type schedaP116Type = objectMapper.convertValue(scheda.getBody(), SchedaP116Type.class);
                    if(schedaP116Type.getAnacForm() != null &&
                            schedaP116Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP116Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP116Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP117:
                    SchedaP117Type schedaP117Type = objectMapper.convertValue(scheda.getBody(), SchedaP117Type.class);
                    if(schedaP117Type.getAnacForm() != null &&
                            schedaP117Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP117Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP117Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP118:
                    SchedaP118Type schedaP118Type = objectMapper.convertValue(scheda.getBody(), SchedaP118Type.class);
                    if(schedaP118Type.getAnacForm() != null &&
                            schedaP118Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP118Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP118Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP119:
                    SchedaP119Type schedaP119Type = objectMapper.convertValue(scheda.getBody(), SchedaP119Type.class);
                    if(schedaP119Type.getAnacForm() != null &&
                            schedaP119Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP119Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP119Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP120:
                    SchedaP120Type schedaP120Type = objectMapper.convertValue(scheda.getBody(), SchedaP120Type.class);
                    if(schedaP120Type.getAnacForm() != null &&
                            schedaP120Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP120Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP120Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP121:
                    SchedaP121Type schedaP121Type = objectMapper.convertValue(scheda.getBody(), SchedaP121Type.class);
                    if(schedaP121Type.getAnacForm() != null &&
                            schedaP121Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP121Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP121Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP123:
                    SchedaP123Type schedaP123Type = objectMapper.convertValue(scheda.getBody(), SchedaP123Type.class);
                    if(schedaP123Type.getAnacForm() != null &&
                            schedaP123Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP123Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP123Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP124:
                    SchedaP124Type schedaP124Type = objectMapper.convertValue(scheda.getBody(), SchedaP124Type.class);
                    if(schedaP124Type.getAnacForm() != null &&
                            schedaP124Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP124Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP124Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP210:
                    SchedaP210Type schedaP210Type = objectMapper.convertValue(scheda.getBody(), SchedaP210Type.class);
                    if(schedaP210Type.getAnacForm() != null &&
                            schedaP210Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP210Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP210Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP211:
                    SchedaP211Type schedaP211Type = objectMapper.convertValue(scheda.getBody(), SchedaP211Type.class);
                    if(schedaP211Type.getAnacForm() != null &&
                            schedaP211Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP211Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP211Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP212:
                    SchedaP212Type schedaP212Type = objectMapper.convertValue(scheda.getBody(), SchedaP212Type.class);
                    if(schedaP212Type.getAnacForm() != null &&
                            schedaP212Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP212Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP212Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP213:
                    SchedaP213Type schedaP213Type = objectMapper.convertValue(scheda.getBody(), SchedaP213Type.class);
                    if(schedaP213Type.getAnacForm() != null &&
                            schedaP213Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP213Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP213Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP214:
                    SchedaP214Type schedaP214Type = objectMapper.convertValue(scheda.getBody(), SchedaP214Type.class);
                    if(schedaP214Type.getAnacForm() != null &&
                            schedaP214Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP214Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP214Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP216:
                    SchedaP216Type schedaP216Type = objectMapper.convertValue(scheda.getBody(), SchedaP216Type.class);
                    if(schedaP216Type.getAnacForm() != null &&
                            schedaP216Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP216Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP216Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP217:
                    SchedaP217Type schedaP217Type = objectMapper.convertValue(scheda.getBody(), SchedaP217Type.class);
                    if(schedaP217Type.getAnacForm() != null &&
                            schedaP217Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP217Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP217Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP218:
                    SchedaP218Type schedaP218Type = objectMapper.convertValue(scheda.getBody(), SchedaP218Type.class);
                    if(schedaP218Type.getAnacForm() != null &&
                            schedaP218Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP218Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP218Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP219:
                    SchedaP219Type schedaP219Type = objectMapper.convertValue(scheda.getBody(), SchedaP219Type.class);
                    if(schedaP219Type.getAnacForm() != null &&
                            schedaP219Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP219Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP219Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP220:
                    SchedaP220Type schedaP220Type = objectMapper.convertValue(scheda.getBody(), SchedaP220Type.class);
                    if(schedaP220Type.getAnacForm() != null &&
                            schedaP220Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP220Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP220Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP221:
                    SchedaP221Type schedaP221Type = objectMapper.convertValue(scheda.getBody(), SchedaP221Type.class);
                    if(schedaP221Type.getAnacForm() != null &&
                            schedaP221Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP221Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP221Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP223:
                    SchedaP223Type schedaP223Type = objectMapper.convertValue(scheda.getBody(), SchedaP223Type.class);
                    if(schedaP223Type.getAnacForm() != null &&
                            schedaP223Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP223Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP223Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP224:
                    SchedaP224Type schedaP224Type = objectMapper.convertValue(scheda.getBody(), SchedaP224Type.class);
                    if(schedaP224Type.getAnacForm() != null &&
                            schedaP224Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP224Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP224Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP31:
                    SchedaP31Type schedaP31Type = objectMapper.convertValue(scheda.getBody(), SchedaP31Type.class);
                    if(schedaP31Type.getAnacForm() != null &&
                            schedaP31Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP31Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP31Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP32:
                    SchedaP32Type schedaP32Type = objectMapper.convertValue(scheda.getBody(), SchedaP32Type.class);
                    if(schedaP32Type.getAnacForm() != null &&
                            schedaP32Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP32Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP32Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP33:
                    SchedaP33Type schedaP33Type = objectMapper.convertValue(scheda.getBody(), SchedaP33Type.class);
                    if(schedaP33Type.getAnacForm() != null &&
                            schedaP33Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP33Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP33Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP34:
                    SchedaP34Type schedaP34Type = objectMapper.convertValue(scheda.getBody(), SchedaP34Type.class);
                    if(schedaP34Type.getAnacForm() != null &&
                            schedaP34Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP34Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP34Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP35:
                    SchedaP35Type schedaP35Type = objectMapper.convertValue(scheda.getBody(), SchedaP35Type.class);
                    if(schedaP35Type.getAnacForm() != null &&
                            schedaP35Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP35Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP35Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP41:
                    SchedaP41Type schedaP41Type = objectMapper.convertValue(scheda.getBody(), SchedaP41Type.class);
                    if(schedaP41Type.getAnacForm() != null &&
                            schedaP41Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP41Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP41Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP42:
                    SchedaP42Type schedaP42Type = objectMapper.convertValue(scheda.getBody(), SchedaP42Type.class);
                    if(schedaP42Type.getAnacForm() != null &&
                            schedaP42Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP42Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP42Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP43:
                    SchedaP43Type schedaP43Type = objectMapper.convertValue(scheda.getBody(), SchedaP43Type.class);
                    if(schedaP43Type.getAnacForm() != null &&
                            schedaP43Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP43Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP43Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP44:
                    SchedaP44Type schedaP44Type = objectMapper.convertValue(scheda.getBody(), SchedaP44Type.class);
                    if(schedaP44Type.getAnacForm() != null &&
                            schedaP44Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP44Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP44Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP45:
                    SchedaP45Type schedaP45Type = objectMapper.convertValue(scheda.getBody(), SchedaP45Type.class);
                    if(schedaP45Type.getAnacForm() != null &&
                            schedaP45Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP45Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP45Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP46:
                    SchedaP46Type schedaP46Type = objectMapper.convertValue(scheda.getBody(), SchedaP46Type.class);
                    if(schedaP46Type.getAnacForm() != null &&
                            schedaP46Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP46Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP46Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP5:
                    SchedaP5Type schedaP5Type = objectMapper.convertValue(scheda.getBody(), SchedaP5Type.class);
                    if(schedaP5Type.getAnacForm() != null &&
                            schedaP5Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP5Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP5Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP61:
                    SchedaP61Type schedaP61Type = objectMapper.convertValue(scheda.getBody(), SchedaP61Type.class);
                    if(schedaP61Type.getAnacForm() != null &&
                            schedaP61Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP61Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP61Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP62:
                    SchedaP62Type schedaP62Type = objectMapper.convertValue(scheda.getBody(), SchedaP62Type.class);
                    if(schedaP62Type.getAnacForm() != null &&
                            schedaP62Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP62Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP62Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP711:
                    SchedaP711Type schedaP711Type = objectMapper.convertValue(scheda.getBody(), SchedaP711Type.class);
                    if(schedaP711Type.getAnacForm() != null &&
                            schedaP711Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP711Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP711Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP712:
                    SchedaP712Type schedaP712Type = objectMapper.convertValue(scheda.getBody(), SchedaP712Type.class);
                    if(schedaP712Type.getAnacForm() != null &&
                            schedaP712Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP712Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP712Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP713:
                    SchedaP713Type schedaP713Type = objectMapper.convertValue(scheda.getBody(), SchedaP713Type.class);
                    if(schedaP713Type.getAnacForm() != null &&
                            schedaP713Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP713Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP713Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                case FasiPcp.SCHEDAP72:
                    SchedaP72Type schedaP72Type = objectMapper.convertValue(scheda.getBody(), SchedaP72Type.class);
                    if(schedaP72Type.getAnacForm() != null &&
                            schedaP72Type.getAnacForm().getStazioniAppaltanti() != null &&
                            !schedaP72Type.getAnacForm().getStazioniAppaltanti().isEmpty()) {
                        for (StazioneAppaltanteType sa : schedaP72Type.getAnacForm().getStazioniAppaltanti()) {
                            if(StringUtils.isNotBlank(sa.getCodiceFiscale()) && sa.getCodiceFiscale().equals(cfSa)) {
                                return true;
                            }
                        }
                    }
                    break;
                default: logger.info("Scheda non trovata");
            }


        }catch (Exception e) {
            logger.error("Errore nel metodo getCfSaPcp",e);
            throw e;
        }

        return false;
    }

     private Double getImportoLottoFromQuadroEconomico(it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoType quadroEconomicoStandard,
                                                      it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoConcessioniType quadroEconomicoConcessioni) {
        try {
            Double importoLavori;
            Double importoServizi;
            Double importoForniture;
            Double importoSubtotale;
            Double importoSicurezza;
            Double importoProgettazione;
            Double importoUlterioriSommeRib;
            Double importoComplAppalto = 0D;
            if (quadroEconomicoStandard != null) {
                importoLavori = quadroEconomicoStandard.getImpLavori() != null ? quadroEconomicoStandard.getImpLavori() : 0D;
                importoServizi = quadroEconomicoStandard.getImpServizi() != null ? quadroEconomicoStandard.getImpServizi() : 0D;
                importoForniture = quadroEconomicoStandard.getImpForniture() != null ? quadroEconomicoStandard.getImpForniture() : 0D;
                importoSubtotale = importoLavori + importoServizi + importoForniture;
                importoSicurezza = quadroEconomicoStandard.getImpTotaleSicurezza() != null ? quadroEconomicoStandard.getImpTotaleSicurezza() : 0D;
                importoProgettazione = quadroEconomicoStandard.getImpProgettazione() != null ? quadroEconomicoStandard.getImpProgettazione() : 0D;
                importoUlterioriSommeRib = quadroEconomicoStandard.getUlterioriSommeNoRibasso() != null ? quadroEconomicoStandard.getUlterioriSommeNoRibasso() : 0D;
                importoComplAppalto = importoSubtotale + importoSicurezza + importoProgettazione + importoUlterioriSommeRib;

            } else if (quadroEconomicoConcessioni != null) {
                importoLavori = quadroEconomicoConcessioni.getImpLavori() != null ? quadroEconomicoConcessioni.getImpLavori() : 0D;
                importoServizi = quadroEconomicoConcessioni.getImpServizi() != null ? quadroEconomicoConcessioni.getImpServizi() : 0D;
                importoForniture = quadroEconomicoConcessioni.getImpForniture() != null ? quadroEconomicoConcessioni.getImpForniture() : 0D;
                importoSubtotale = importoLavori + importoServizi + importoForniture;
                importoSicurezza = quadroEconomicoConcessioni.getImpTotaleSicurezza() != null ? quadroEconomicoConcessioni.getImpTotaleSicurezza() : 0D;
                importoProgettazione = 0D;
                importoUlterioriSommeRib = quadroEconomicoConcessioni.getUlterioriSommeNoRibasso() != null ? quadroEconomicoConcessioni.getUlterioriSommeNoRibasso() : 0D;
                importoComplAppalto = importoSubtotale + importoSicurezza + importoProgettazione + importoUlterioriSommeRib;

            }

            return importoComplAppalto;
        }catch (Exception e){
            logger.error("Errore in estrazione importo lotto: getImportoLottoFromQuadroEconomico",e);
            throw e;
        }
    }


    private Long calculateIdSceltaContr(String codiceScheda, String tipoProcedura) {
        if(codiceScheda.equals(FasiPcp.SCHEDAAD4)) {
            return 18L;
        } else if(codiceScheda.equals(FasiPcp.SCHEDAA36)) {
            return 16L;
        } else if(codiceScheda.startsWith("AD")) {
            return 15L;
        } else {
            if(tipoProcedura == null) {
                return null;
            } else if(tipoProcedura.equals("open")) {
                return 1L;
            } else if(tipoProcedura.equals("restricted")) {
                return 2L;
            } else if(tipoProcedura.equals("neg-w-call")) {
                return 30L;
            } else if(tipoProcedura.equals("neg-wo-call")) {
                return 4L;
            } else if(tipoProcedura.equals("comp-dia")) {
                return 8L;
            } else if(tipoProcedura.equals("innovation")) {
                return 34L;
            }
        }
        return null;

    }

    private String calculateClasseCatPrev(Double importo) {
        if(importo <= 258000 ) {
            return "I";
        } else if(258000 < importo && importo <= 516000) {
            return "II";
        } else if(516000 < importo && importo <= 1033000) {
            return "III";
        } else if(1033000 < importo && importo <= 1500000) {
            return "IIIB";
        } else if(1500000 < importo && importo <= 2582000) {
            return "IV";
        } else if(2582000 < importo && importo <= 3500000) {
            return "IVB";
        } else if(3500000 < importo && importo <= 5165000) {
            return "V";
        } else if(5165000 < importo && importo <= 10329000) {
            return "VI";
        } else if(10329000 < importo && importo <= 15494000) {
            return "VII";
        } else if(importo > 15494000) {
            return "VIII";
        }
        return null;

    }

    private void inserisciAggiudicazioneW9AppaAD(Long codGara, Long codLotto, it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoType quadroEconomicoStandard,
                                                 Double valoreSogliaAnomalia, Long numeroOfferteAmmesse, Date dataAggiudicazione, Double importo, Double ribasso, Double offAumento,
                                                 it.appaltiecontratti.pcp.v102.comunicaAppalto.QuadroEconomicoConcessioniType quadroEconomicoConcessioni, String tipologia) {
        try {
            FaseAggInsertForm aggiudicazione = new FaseAggInsertForm();
            aggiudicazione.setCodGara(codGara);
            aggiudicazione.setCodLotto(codLotto);
            aggiudicazione.setNum(1L);

            if(quadroEconomicoStandard != null) {
                Double importoLavori = quadroEconomicoStandard.getImpLavori() != null ? quadroEconomicoStandard.getImpLavori() : 0D;
                Double importoServizi = quadroEconomicoStandard.getImpServizi() != null ? quadroEconomicoStandard.getImpServizi() : 0D;
                Double importoForniture = quadroEconomicoStandard.getImpForniture() != null ? quadroEconomicoStandard.getImpForniture() : 0D;
                Double importoSubtotale = importoLavori + importoServizi + importoForniture;
                aggiudicazione.setImportoLavori(importoLavori);
                aggiudicazione.setImportoServizi(importoServizi);
                aggiudicazione.setImportoForniture(importoForniture);
                aggiudicazione.setImportosubtotale(importoSubtotale);

                Double importoSicurezza = quadroEconomicoStandard.getImpTotaleSicurezza() != null ? quadroEconomicoStandard.getImpTotaleSicurezza() : 0D;
                Double importoProgettazione = quadroEconomicoStandard.getImpProgettazione() != null ? quadroEconomicoStandard.getImpProgettazione() : 0D;
                Double importoUlterioriSommeRib = quadroEconomicoStandard.getUlterioriSommeNoRibasso() != null ? quadroEconomicoStandard.getUlterioriSommeNoRibasso() : 0D;
                Double importoComplAppalto = importoSubtotale + importoSicurezza + importoProgettazione + importoUlterioriSommeRib;
                aggiudicazione.setImportoSicurezza(importoSicurezza);
                aggiudicazione.setImportoProgettazione(importoProgettazione);
                aggiudicazione.setImpNonAssog(importoUlterioriSommeRib);
                aggiudicazione.setImportoComplAppalto(importoComplAppalto);


                Double importoDisposizione = quadroEconomicoStandard.getSommeADisposizione() != null ? quadroEconomicoStandard.getSommeADisposizione() : 0D;

                Double importoSommeOpzioniRinnovi = quadroEconomicoStandard.getSommeOpzioniRinnovi() != null ? quadroEconomicoStandard.getSommeOpzioniRinnovi() : 0D;
                Double importoSommeripetizioni = quadroEconomicoStandard.getSommeRipetizioni() != null ? quadroEconomicoStandard.getSommeRipetizioni() : 0D;
                aggiudicazione.setImportoSommeOpzioniRinnovi(importoSommeOpzioniRinnovi);
                aggiudicazione.setImportoSommeripetizioni(importoSommeripetizioni);
                Double importoComplIntervento = importoComplAppalto + importoSommeOpzioniRinnovi + importoSommeripetizioni + importoDisposizione;
                aggiudicazione.setImportoComplIntervento(importoComplIntervento);

                aggiudicazione.setImportoDisposizione(importoDisposizione);

            } else if(quadroEconomicoConcessioni != null) {
                Double importoLavori = quadroEconomicoConcessioni.getImpLavori() != null ? quadroEconomicoConcessioni.getImpLavori() : 0D;
                Double importoServizi = quadroEconomicoConcessioni.getImpServizi() != null ? quadroEconomicoConcessioni.getImpServizi() : 0D;
                Double importoForniture = quadroEconomicoConcessioni.getImpForniture() != null ? quadroEconomicoConcessioni.getImpForniture() : 0D;
                Double importoSubtotale = importoLavori + importoServizi + importoForniture;
                aggiudicazione.setImportoLavori(importoLavori);
                aggiudicazione.setImportoServizi(importoServizi);
                aggiudicazione.setImportoForniture(importoForniture);
                aggiudicazione.setImportosubtotale(importoSubtotale);

                Double importoSicurezza = quadroEconomicoConcessioni.getImpTotaleSicurezza() != null ? quadroEconomicoConcessioni.getImpTotaleSicurezza() : 0D;
                Double importoProgettazione = 0D;
                Double importoUlterioriSommeRib = quadroEconomicoConcessioni.getUlterioriSommeNoRibasso() != null ? quadroEconomicoConcessioni.getUlterioriSommeNoRibasso() : 0D;
                Double importoComplAppalto = importoSubtotale + importoSicurezza + importoProgettazione + importoUlterioriSommeRib;
                aggiudicazione.setImportoSicurezza(importoSicurezza);
                aggiudicazione.setImportoProgettazione(importoProgettazione);
                aggiudicazione.setImpNonAssog(importoUlterioriSommeRib);
                aggiudicazione.setImportoComplAppalto(importoComplAppalto);


                Double importoDisposizione = quadroEconomicoConcessioni.getSommeADisposizione() != null ? quadroEconomicoConcessioni.getSommeADisposizione() : 0D;


                Double importoSommeOpzioniRinnovi = quadroEconomicoConcessioni.getSommeOpzioniRinnovi() != null ? quadroEconomicoConcessioni.getSommeOpzioniRinnovi() : 0D;
                Double importoSommeripetizioni = 0D;
                aggiudicazione.setImportoSommeOpzioniRinnovi(importoSommeOpzioniRinnovi);
                aggiudicazione.setImportoSommeripetizioni(importoSommeripetizioni);
                Double importoComplIntervento = importoComplAppalto + importoSommeOpzioniRinnovi + importoSommeripetizioni + importoDisposizione;
                aggiudicazione.setImportoComplIntervento(importoComplIntervento);
                aggiudicazione.setImportoDisposizione(importoDisposizione);

            } else {
                if(tipologia != null) {
                    Double importoLavori = 0D;
                    Double importoServizi = 0D;
                    Double importoForniture = 0D;

                    if(tipologia.equals("L")) {
                        importoLavori = importo;
                    } else if(tipologia.equals("F")) {
                        importoForniture = importo;
                    } else if(tipologia.equals("S")) {
                        importoServizi = importo;
                    }
                    Double importoSubtotale = importoLavori + importoServizi + importoForniture;
                    aggiudicazione.setImportoLavori(importoLavori);
                    aggiudicazione.setImportoServizi(importoServizi);
                    aggiudicazione.setImportoForniture(importoForniture);
                    aggiudicazione.setImportosubtotale(importoSubtotale);

                    Double importoSicurezza = 0D;
                    Double importoProgettazione = 0D;
                    Double importoUlterioriSommeRib = 0D;
                    Double importoComplAppalto = importoSubtotale + importoSicurezza + importoProgettazione + importoUlterioriSommeRib;
                    aggiudicazione.setImportoSicurezza(importoSicurezza);
                    aggiudicazione.setImportoProgettazione(importoProgettazione);
                    aggiudicazione.setImpNonAssog(importoUlterioriSommeRib);
                    aggiudicazione.setImportoComplAppalto(importoComplAppalto);

                    Double importoDisposizione = 0D;

                    Double importoSommeOpzioniRinnovi = 0D;
                    Double importoSommeripetizioni = 0D;
                    aggiudicazione.setImportoSommeOpzioniRinnovi(importoSommeOpzioniRinnovi);
                    aggiudicazione.setImportoSommeripetizioni(importoSommeripetizioni);
                    Double importoComplIntervento = importoComplAppalto + importoSommeOpzioniRinnovi + importoSommeripetizioni + importoDisposizione;
                    aggiudicazione.setImportoComplIntervento(importoComplIntervento);

                    aggiudicazione.setImportoDisposizione(importoDisposizione);
                }
            }

            if(valoreSogliaAnomalia != null && this.schedePcpUtils.isValidNumeric139(valoreSogliaAnomalia)) {
                aggiudicazione.setValoreSogliaAnomalia(valoreSogliaAnomalia);
            }

            if(numeroOfferteAmmesse != null) {
                aggiudicazione.setNumOfferteAmmesse(numeroOfferteAmmesse);
            }

            if(dataAggiudicazione != null) {
                aggiudicazione.setDataVerbAggiudicazione(dataAggiudicazione);
            }

            if(importo != null) {
                aggiudicazione.setImportoAggiudicazione(importo);
            }

            if(ribasso != null && this.schedePcpUtils.isValidNumeric139(ribasso)) {
                aggiudicazione.setPercentRibassoAgg(ribasso);
            }

            if(offAumento != null && this.schedePcpUtils.isValidNumeric139(offAumento)) {
                aggiudicazione.setPercOffAumento(offAumento);
            }


            this.contrattiMapper.insertFaseAggiudicazione(aggiudicazione);
        } catch (Exception e) {
            logger.error("Errore in fase di importazione gara pcp: inserisciAggiudicazioneW9AppaAD");
            throw e;
        }

    }

}
