@use 'sass:math';
// ----------------------
//
// IMPORTS
//
// ----------------------
// Variables
// ----------------------
//
// SETTINGS
//
// ----------------------
// ----------------------
// Namespace
//
// To avoid conflicts, Wire used custom namespace,
// Set 'wire-' to avoid conflicts with others frameworks. '' by default.
// ----------------------
$wire-namespace: '' !default;

// ----------------------
// Markup Mode
//
// Compile Wire.css with markup, if you only need extend
// the styles in Sass, set this in 'false'.
// Set 'true' or 'false'. True by default.
// ----------------------
$wire-markup: true !default;

// ----------------------
// Debug Mode
//
// Highlight markup errors.
// Set 'true' or 'false'. False by default.
// ----------------------
$wire-debug: false !default;



// ----------------------
//
// VARIABLES
//
// ----------------------
// ----------------------
// Defaults Sizes (Base 10 to simplify)
// ----------------------
$wire-font-size-base: 16 !default;
$wire-line-height-base: 1.45 !default;
$wire-border-radius: 3px !default;

// ----------------------
// Colors
// ----------------------
// ----------------------
// Brand Colors
// ----------------------
$wire-color-primary: #48a8ce !default;
$wire-color-secundary: #7c7c7c !default;
$wire-color-alt: #e0e0e0 !default;
$wire-link-color: $wire-color-primary !default;
$wire-link-color-hover: darken($wire-color-primary, 30%) !default;
$wire-button-bg: $wire-color-primary !default;
$wire-button-color: #ffffff !default;
$wire-button-alt-bg: $wire-color-alt !default;
$wire-button-alt-color: $wire-color-secundary !default;
$wire-form-input-border: #e0e0e0 !default;
$wire-form-input-bg: #ffffff !default;
$wire-table-tr-even-bg: #e5e5e5 !default;
$wire-table-border-color: #d2d2d2 !default;

// ----------------------
// Grid
// ----------------------
$wire-max-columns: 12 !default;
$wire-base-gutter: 2% !default;

// ----------------------
// Breakpoints
// ----------------------
$wire-breakpoints: ("small": "screen and (max-width: 719px)",
    "retina": "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dppx)",
    "medium": "screen and (min-width: 720px) and (max-width: 1023px)",
    "small-and-medium": "screen and (max-width: 1023px)",
    "large": "screen and (min-width: 1024px)",
    "huge": "screen and (min-width: 1200px)",
    "lg": "screen and (min-width: 992px) and (max-width: 1199px)"
) !default;


// Mixins
// ----------------------
//
// MIXINS
//
// ----------------------
// ----------------------
// Media Queries
// Use predefined breakpoints defined in $wire-breakpoints or use custom value
// mq(phone)
// mq(phone, landscape)
// mq(820px)
// mq(768px, 1024px, landscape)
// ----------------------
@mixin mq($min, $max: false, $orientation: false) {
    @if map-has-key($wire-breakpoints, $min) {
        @if not $orientation {
            @media #{map-get($wire-breakpoints, $min)} {
                @content;
            }
        }

        @else {
            @if map-has-key($wire-breakpoints, $min) {
                @media #{map-get($wire-breakpoints, $min)} and (orientation: $orientation) {
                    @content;
                }
            }
        }
    }

    @else {
        @if not $max {
            @media (max-width: #{$min}) {
                @content;
            }
        }

        @else {
            @if not $orientation {
                @media (min-width: #{$min}) and (max-width: #{$max}) {
                    @content;
                }
            }

            @else {
                @media (min-width: #{$min}) and (max-width: #{$max}) and (orientation: #{$orientation}) {
                    @content;
                }
            }
        }
    }
}

// ----------------------
// FontFace
// fontface(name, filename, weight, style, stretch)
// ----------------------
@function font-url($path) {
    @return url('fonts/'+ $path);
}

@mixin font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal) {
    @font-face {
        font-family: '#{$font-family}';
        src: font-url('#{$font-filename}.eot');
        src: font-url('#{$font-filename}.eot?#iefix') format('embedded-opentype'),
        font-url('#{$font-filename}.woff') format('woff'),
        font-url('#{$font-filename}.ttf') format('truetype'),
        font-url('#{$font-filename}.svg##{$font-family}') format('svg');
        font-weight: $font-weight;
        font-style: $font-style;
        font-stretch: $font-stretch;
    }
}


// Helpers
// ----------------------
//
// HELPERS
//
// ----------------------
// ----------------------
// REM Calculation
// rem(value, size)
// Size attribute is optional
// ----------------------
@function rem($value) {
    $value: ($value / 10) * 1rem;

    @if ($value==0rem) {
        $value: 0;
    }

    // Turn 0rem into 0
    @return $value;
}

// ----------------------
// EMs Calculation
// em(value, size)
// Size attribute is optional
// ----------------------
@function em($value, $context: $wire-font-size-base) {
    @return #{$value / $context}em;
}

// ----------------------
// Clearfix
// ----------------------
@mixin clearfix() {

    &:after,
    &:before {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

@if $wire-markup==true {
    .#{$wire-namespace}clearfix {
        @include clearfix();
    }
}

// ----------------------
// Text Align
// ----------------------
$align-positions: left,
center,
right;

@each $align-position in $align-positions {
    @if $wire-markup==true {
        .#{$wire-namespace}align-#{$align-position} {
            text-align: $align-position;
        }
    }
}

// ----------------------
// Hidden
// ----------------------
%hidden {
    display: none !important;
    visibility: hidden;
}

@if $wire-markup==true {
    .hidden {
        @extend %hidden;
    }
}

// ----------------------
// Invisible
// ----------------------
%invisible {
    visibility: hidden;
}

@if $wire-markup==true {
    .invisible {
        @extend %invisible;
    }
}

// ----------------------
// Show Elements on Device
// ----------------------
@each $breakpoint,
$value in $wire-breakpoints {
    @include mq($breakpoint) {
        @if $wire-markup==true {
            .#{$wire-namespace}visible-#{$breakpoint} {
                display: block !important;
            }
        }
    }
}

// ----------------------
// Hide Elements on Device
// ----------------------
@each $breakpoint,
$value in $wire-breakpoints {
    @include mq($breakpoint) {
        @if $wire-markup==true {
            .#{$wire-namespace}hidden-#{$breakpoint} {
                display: none !important;
            }
        }
    }
}


// Global
// ----------------------
//
// Base
//
// ----------------------
/* html {
	box-sizing: border-box;
	font-size: 62.5%;
	height: 100%;
}

body {
	font-size: rem(16);
	height: 100%;
	line-height: $wire-line-height-base;
} */


// ----------------------
//
// Grid
//
// Content:
// - Core definition
// - Direction
// - Wrap
// - Align
// - column Align
// ----------------------

@mixin container() {
    height: 100%;
    width: 100%;

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

@if $wire-markup==true {
    .#{$wire-namespace}container {
        @include container();
    }
}

[class*="col-"] {
    box-sizing: border-box;
    width: 100%;
}


// $Grid
// Core Grid
@mixin grid() {
    display: flex;
    flex-wrap: wrap;
    // width: 100%;
}

@if $wire-markup==true {

    .#{$wire-namespace}grid,
    [data-grid] {
        @include grid();
    }
}

// $Direction
// Row
@mixin grid-row() {
    flex-direction: row;
}

@if $wire-markup==true {

    [data-grid~="row"],
    .#{$wire-namespace}grid--row {
        @include grid-row();
    }
}

@mixin grid-row-reverse() {
    flex-direction: row-reverse;
}

@if $wire-markup==true {

    [data-grid~="row-reverse"],
    .#{$wire-namespace}grid--row-reverse {
        @include grid-row-reverse();
    }
}

@mixin grid-column() {
    flex-direction: column;
}

@if $wire-markup==true {

    [data-grid~="column"],
    .#{$wire-namespace}grid--column {
        @include grid-column();
    }
}

@mixin grid-column-reverse() {
    flex-direction: column-reverse;
}

@if $wire-markup==true {

    [data-grid~="column-reverse"],
    .#{$wire-namespace}grid--column-reverse {
        @include grid-column-reverse();
    }
}

// $Wrap
// Wrap
@mixin grid-wrap() {
    flex-wrap: wrap;
}

@if $wire-markup==true {

    [data-grid~="wrap"],
    .#{$wire-namespace}grid--wrap {
        @include grid-wrap();
    }
}

// Wrap Reverse
@mixin grid-wrap-reverse() {
    flex-wrap: wrap-reverse;
}

@if $wire-markup==true {

    [data-grid~="wrap-reverse"],
    .#{$wire-namespace}grid--wrap-reverse {
        @include grid-wrap-reverse();
    }
}

// Nowrap
@mixin grid-nowrap() {
    flex-wrap: nowrap;
}

@if $wire-markup==true {

    [data-grid~="nowrap"],
    .#{$wire-namespace}grid--nowrap {
        @include grid-nowrap();
    }
}

// $Align
// Left
@mixin grid-left() {
    justify-content: flex-start;
}

@if $wire-markup==true {

    [data-grid~="left"],
    .#{$wire-namespace}grid--left {
        @include grid-left();
    }
}

// Right
@mixin grid-right() {
    justify-content: flex-end;
}

@if $wire-markup==true {

    [data-grid~="right"],
    .#{$wire-namespace}grid--right {
        @include grid-right();
    }
}

// Center
@mixin grid-center() {
    justify-content: center;
}

@if $wire-markup==true {

    [data-grid~="center"],
    .#{$wire-namespace}grid--center {
        @include grid-center();
    }
}

// Space Between
@mixin grid-between() {
    justify-content: space-between;
}

@if $wire-markup==true {

    [data-grid~="space-between"],
    .#{$wire-namespace}grid--between {
        @include grid-between();
    }
}

// Space Around
@mixin grid-around() {
    justify-content: space-around;
}

@if $wire-markup==true {

    [data-grid~="space-around"],
    .#{$wire-namespace}grid--around {
        @include grid-around();
    }
}

// $column Align
// Top
@mixin grid-va-top() {
    align-items: flex-start;
}

@if $wire-markup==true {

    [data-grid~="va-top"],
    .#{$wire-namespace}grid--va-top {
        @include grid-va-top();
    }
}

// Bottom
@mixin grid-va-bottom() {
    align-items: flex-end;
}

@if $wire-markup==true {

    [data-grid~="va-bottom"],
    .#{$wire-namespace}grid--va-bottom {
        @include grid-va-bottom();
    }
}

// Center
@mixin grid-va-center() {
    align-items: center;
}

@if $wire-markup==true {

    [data-grid~="va-center"],
    .#{$wire-namespace}grid--va-center {
        @include grid-va-center();
    }
}

// Baseline
@mixin grid-va-baseline() {
    align-content: baseline;
}

@if $wire-markup==true {

    [data-grid~="va-baseline"],
    .#{$wire-namespace}grid--va-baseline {
        @include grid-va-baseline();
    }
}

// Stretch
@mixin grid-va-stretch() {
    align-items: stretch;
}

@if $wire-markup==true {

    [data-grid~="va-stretch"],
    .#{$wire-namespace}grid--va-stretch {
        @include grid-va-stretch();
    }
}

// $Content Align
// Stretch
@mixin grid-ca-stretch() {
    align-content: stretch;
}

@if $wire-markup==true {

    [data-grid~="ca-stretch"],
    .#{$wire-namespace}grid--ca-stretch {
        @include grid-ca-stretch();
    }
}

// Top
@mixin grid-ca-top() {
    align-content: flex-start;
}

@if $wire-markup==true {

    [data-grid~="ca-top"],
    .#{$wire-namespace}grid--ca-top {
        @include grid-ca-top();
    }
}

// Bottom
@mixin grid-ca-bottom() {
    align-content: flex-end;
}

@if $wire-markup==true {

    [data-grid~="ca-bottom"],
    .#{$wire-namespace}grid--ca-bottom {
        @include grid-ca-bottom();
    }
}

// Center
@mixin grid-ca-center() {
    align-content: center;
}

@if $wire-markup==true {

    [data-grid~="ca-center"],
    .#{$wire-namespace}grid--ca-center {
        @include grid-ca-center();
    }
}

// Space Around
@mixin grid-ca-space-around() {
    align-content: space-around;
}

@if $wire-markup==true {

    [data-grid~="ca-space-around"],
    .#{$wire-namespace}grid--ca-space-around {
        @include grid-ca-space-around();
    }
}

// Space Between
@mixin grid-ca-space-between() {
    align-content: space-between;
}

@if $wire-markup==true {

    [data-grid~="ca-space-between"],
    .#{$wire-namespace}grid--ca-space-between {
        @include grid-ca-space-between();
    }
}


// Grid Helpers
// Center - Center
// Center vertical and horizontal
@mixin grid-center-center() {
    justify-content: center;
    align-content: center;
    align-items: center;
    min-height: 100%;

    >* {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
}

@if $wire-markup==true {

    [data-grid~="center-center"],
    .#{$wire-namespace}grid--center-center {
        @include grid-center-center();
    }
}

// Order
@mixin order($position, $force: false) {
    @if $force==true {
        order: $position !important;
    }

    @else {
        order: $position;
    }
}

// Push Left
@mixin push-left() {
    @include order(-100, true);
}

%push-left {
    @include push-left;
}

@if $wire-markup==true {
    .push-left {
        @extend %push-left;
    }
}

// Push Right
@mixin push-right() {
    @include order(100, true);
}

%push-right {
    @include push-right;
}

@if $wire-markup==true {
    .push-right {
        @extend %push-right;
    }
}

// $Core Width
@mixin columns($col) {
    width: math.div($col * 100%, $wire-max-columns);
}

@for $col from 1 through ($wire-max-columns) {
    %col-#{$col} {
        @include columns($col);
    }

    @if $wire-markup==true {

        .#{$wire-namespace}col-#{$col},
        [data-col~="#{$col}"] {
            @include columns($col);

            @include mq(small) {
                width: 100%;
            }
        }
    }
}

@for $col from 1 through ($wire-max-columns) {

    @each $breakpoint,
    $value in $wire-breakpoints {
        @include mq($breakpoint) {
            @if $wire-markup==true {

                .#{$wire-namespace}col-#{$breakpoint}-#{$col},
                [data-col-#{$breakpoint}~="#{$col}"] {
                    @include columns($col);
                }
            }
        }
    }
}

@for $col from 1 through ($wire-max-columns) {
    %col-offset-#{$col} {
        margin-left: math.div($col * 100%, $wire-max-columns);
    }

    @if $wire-markup==true {
        .#{$wire-namespace}col-offset-#{$col} {
            @extend %col-offset-#{$col};
        }
    }
}

@for $col from 1 through ($wire-max-columns) {

    @each $breakpoint,
    $value in $wire-breakpoints {
        @include mq($breakpoint) {
            @if $wire-markup==true {
                .#{$wire-namespace}col-#{$breakpoint}-offset-#{$col} {
                    margin-left: math.div($col * 100%, $wire-max-columns);
                }
            }
        }
    }
}

// $Grid Row
@mixin row() {
    @include grid;
}

@if $wire-markup==true {
    .#{$wire-namespace}row {
        @include row();
    }
}

@mixin basis($basis) {
    flex-basis: $basis;
}

/* Definizione di classi composizione di proprietà flex */

.sdk-flex-row {
    @include grid;
    @include grid-row;
}

.sdk-flex-column {
    @include grid;
    @include grid-column;
}

.sdk-flex-wrap {
    @include grid;
    @include grid-wrap;
}

.sdk-flex-nowrap {
    @include grid;
    @include grid-nowrap;
}

.sdk-flex-left {
    @include grid;
    @include grid-left;
}

.sdk-flex-center {
    @include grid;
    @include grid-center;
}

.sdk-flex-around {
    @include grid;
    @include grid-around;
}

.sdk-flex-right {
    @include grid;
    @include grid-right;
}

.sdk-flex-va-stretch {
    @include grid;
    @include grid-va-stretch;
}

.sdk-flex-va-center {
    @include grid;
    @include grid-va-center;
}

/*
"small": "screen and (max-width: 719px)",
"retina": "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dppx)",
"medium": "screen and (min-width: 720px) and (max-width: 1023px)",
"large": "screen and (min-width: 1024px)",
"huge": "screen and (min-width: 1200px)"
*/

@mixin sdk-sticky() {
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1;
}

@mixin flex() {
    display: flex;
}

// Space evenly
@mixin grid-evenly() {
    justify-content: space-evenly;
}

@if $wire-markup==true {

    [data-grid~="space-evenly"],
    .#{$wire-namespace}grid--evenly {
        @include grid-evenly();
    }
}
